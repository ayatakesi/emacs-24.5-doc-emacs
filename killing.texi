@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2000-2015 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.

@node Killing
@chapter テキストのkillと移動

  Emacsで@dfn{kill}とはテキストを消去して、@dfn{killリング}にコピーすることを意味します。@dfn{yank}とは、killリングからテキストを取り出して、バッファーに戻すことを意味します(``cut(カット、切り取り)''と``paste(ペースト、貼り付け)''という用語を使うアプリケーションもあります)。これはテキストブロックのセットが、循環的にアクセスできるリングに格納されているイメージから、killリングと名付けられました。@ref{Kill
Ring}を参照してください。

  killとyankは、Emacsでテキストを移動したりコピーするための、もっとも一般的な方法です。これは用途が広いコマンドです。なぜなら、多くの異なる種類の構文単位をkillするためのコマンドが存在するからです。

@menu
* Deletion and Killing::     テキストを削除するコマンド。
* Yanking::                  テキストを挿入するコマンド。
* Cut and Paste::            グラフィカルなディスプレーにおけるクリップボードと選択。
* Accumulating Text::        バッファーにテキストを追加する他の方法。
* Rectangles::               矩形領域のテキストの操作。
* CUA Bindings::             killとyankで@kbd{C-x}/@kbd{C-c}/@kbd{C-v}を使う。
@end menu

@node Deletion and Killing
@section 削除とkill

@cindex killing text
@cindex cutting text
@cindex deletion
  バッファーからテキストを消去するコマンドの多くは、それをkillリングに保存します。これらは@dfn{kill}コマンドとして知られており、通常名前に@samp{kill}が含まれます(例
@code{kill-line})。killリングには、最近killしたものが、1つだけではなくいくつか格納されているので、killはとても安全な操作と言えます。なぜなら、以前にkillしたテキストが失われる心配をする必要がないからです。killリングは、すべてのバッファーで共有されているので、あるバッファーでkillしたテキストを、別のバッファーにyankすることができます。

  @kbd{C-/}
(@code{undo})を使うと、killコマンドはアンドゥ(@ref{Undo}を参照してください)されるので、killしたテキストはバッファーに戻されますが、killリングからは削除されません。

  グラフィカルなディスプレーでは、テキストをkillすると、それはシステムのクリップボードにもコピーされます。 @ref{Cut and
Paste}を参照してください。

  テキストを消去してkillリングに保存しないコマンドは、@dfn{削除(delete)}コマンドとして知られており、名前に@samp{delete}が含まれています。これらは@kbd{C-d}
(@code{delete-char})や@key{DEL}
(@code{delete-backward-char})のように、一度に1文字削除するものや、スペースや改行だけを削除するものが含まれます。重要なデータの有意な量を消去するコマンドには、一般的にkill操作が用いられます。

  killとyankでマウスを使うこともできます。@ref{Cut and Paste}を参照してください。

@menu
* Deletion::                 少量のテキストや空の領域を削除するコマンド。
* Killing by Lines::         テキスト行を一度にkillする方法。
* Other Kill Commands::      大きなリージョン、および単語やセンテンスのような構文単位をkillするコマンド。
* Kill Options::             killに影響を与えるオプション。
@end menu

@node Deletion
@subsection 削除
@findex delete-backward-char
@findex delete-char

  削除とは、テキストを消去してkillリングに保存しないという意味です。テキストを削除するたいていのEmacsコマンドは、1文字または空白文字しか消去しません。

@table @kbd
@item @key{DEL}
@itemx @key{BACKSPACE}
前の文字を削除します。リージョンがアクティブのときは、リージョンのテキストを削除します(@code{delete-backward-char})。

@item @key{Delete}
次の文字を削除します。リージョンがアクティブのときは、リージョンのテキストを削除します(@code{delete-forward-char})。

@item C-d
次の文字を削除します(@code{delete-char})。

@item M-\
ポイントの周囲のスペースとタブを削除します(@code{delete-horizontal-space})。
@item M-@key{SPC}
スペースを1つ残して、ポイントの周囲のスペースとタブを削除します(@code{just-one-space})。
@item C-x C-o
現在行の周囲の空行を削除します(@code{delete-blank-lines})。
@item M-^
行間にある改行をインデントと共に削除して2行を1行にします(@code{delete-indentation})。
@end table

  基本的な削除コマンド@key{DEL} (@code{delete-backward-char})、@key{delete}
(@code{delete-forward-char})、@kbd{C-d}
(@code{delete-char})については既に説明しました。@ref{Erasing}を参照してください。数引数を指定すると、指定した数の文字を削除します。リージョンがアクティブのとき、数引数に1を指定するか省略した場合は、リージョンのすべてのテキストを削除します。

@kindex M-\
@findex delete-horizontal-space
@kindex M-SPC
@findex just-one-space
@findex cycle-spacing
  他の削除コマンドは、空白文字(スペース、タブ、改行)だけを削除するものです。@kbd{M-\}
(@code{delete-horizontal-space})は、ポイントの前後にあるすべてのスペースとタブを削除します。プレフィクス引数を指定すると、ポイントの前にあるスペースとタブだけを削除します。@kbd{M-@key{SPC}}
(@code{just-one-space})も同様ですが、前にスペースが何個あるかに関係なく、ポイントの前に1つのスペースを残します。数引数@var{n}を指定すると、@var{n}が正のときはポイントの前に、@var{n}個のスペースを残します。@var{n}が負の場合は、スペースとタブに加えて改行も削除し、ポイントの前に@var{-n}個のスペースを残します。コマンド@code{cycle-spacing}は、@code{just-one-space}のようなコマンドで、よりフレキシブルな動作をします。これは連続で呼び出すと異なる処理を行います。1番目の呼び出しでは@code{just-one-space}と同様の処理をし、2番目の呼び出しではすべての空白文字を削除し、3番目の呼び出しでは元の空白文字を復元します。

  @kbd{C-x C-o}
(@code{delete-blank-lines})は、現在行の下にあるすべての空行を削除します。現在行が空行のときは、現在行の上にあるすべての空行も削除します(空行を1つ、つまり現在行は残します)。単独の空行で実行するとその行を削除します。

  @kbd{M-^}
(@code{delete-indentation})は、改行と周囲のスペース(通常1つのスペースを残す)を削除することにより、現在行とその上の行を結合します。@ref{Indentation,M-^}を参照してください。

@c Not really sure where to put this...
@findex delete-duplicate-lines
  コマンド@code{delete-duplicate-lines}は、リージョン内の重複した行を検索して、それぞれ1行を残して削除します。通常は重複した行の最初の行を残しますが、プレフィクス引数@kbd{C-u}を指定すると、最後の行を残します。プレフィクス引数@kbd{C-u
C-u}を指定すると、隣接した重複行だけを検索します。これは行がソート済みのとき効果的です。プレフィクス引数@kbd{C-u C-u
C-u}を指定すると、連続する空行は残します。

@node Killing by Lines
@subsection 行のkill

@table @kbd
@item C-k
行の残り、または1行以上をkillします(@code{kill-line})。
@item C-S-backspace
1度に行全体を削除します(@code{kill-whole-line})。
@end table

@kindex C-k
@findex kill-line
  もっとも簡単なkillコマンドは、@kbd{C-k}
(@code{kill-line})です。これを行末で使うと、その行を終端している改行をkillして、現在行と次の行を継げます(空行なら削除します)。そうでない場合、@kbd{C-k}はポイントから行末までを削除します。ポイントの元の位置が行頭の場合は、空行が残ります。

  どちらのケースを適用するか決める際には、行末のスペースとタブは無視されます。ポイントが行の一番最後の可視の文字の後ろにあるとき、@kbd{C-k}は改行をkillすることに注意してください。空でない行全体をkillするときは、行頭で@kbd{C-k}を2回タイプしてください。

  このコンテキストで``行''とは、スクリーン行ではなく論理行を意味します(@ref{Continuation Lines}を参照してください)。

  @kbd{C-k}に正の数値@var{n}を与えると、@var{n}行とそれに続く改行をkillします(現在行のポイントの前にあるテキストはkillされません)。負の引数@minus{}@var{n}を与えると、現在行のポイントの前にあるテキストと、前の@var{n}行をkillします。@kbd{C-k}に0を指定すると、現在行のポイントの前にあるテキストをkillします。

@vindex kill-whole-line
  変数@code{kill-whole-line}が非@code{nil}のときは、行頭での@kbd{C-k}により行末の改行も含めて行全体がkillされます。この変数は通常@code{nil}です。

@kindex C-S-backspace
@findex kill-whole-line
  @kbd{C-S-backspace}
(@code{kill-whole-line})は行中のポイントの位置に関わらず、改行を含めた行全体をkillします。キーシーケンス@kbd{C-S-backspace}をタイプできないテキスト端末がたくさんあることに注意してください。

@node Other Kill Commands
@subsection その他のkillコマンド
@findex kill-region
@kindex C-w

@table @kbd
@item C-w
リージョンをkillします(@code{kill-region})。
@item M-w
リージョンをkillリングにコピーします(@code{kill-ring-save})。
@item M-d
次の単語をkillします(@code{kill-word})。@ref{Words}を参照してください。
@item M-@key{DEL}
後方に1単語killします(@code{backward-kill-word})。
@item C-x @key{DEL}
センテンスの先頭までを後方にkillします(@code{backward-kill-sentence})。@ref{Sentences}を参照してください。
@item M-k
文の末尾までをkillします(@code{kill-sentence})。
@item C-M-k
後に続く対応のとれた式(balanced
expressions)をkillします(@code{kill-sexp})。@ref{Expressions}を参照してください。
@item M-z @var{char}
次の@var{char}までをkillします(@code{zap-to-char})。
@end table

@kindex C-w
@findex kill-region
@kindex M-w
@findex kill-ring-save
  一般によく使われるkillコマンドは@kbd{C-w}
(@code{kill-region})で、これはリージョンのテキストをkillします(@ref{Mark}を参照してください)。同様に@kbd{M-w}
(@code{kill-ring-save})は、バッファーからテキストを消去せずに、リージョンのテキストをkillリングにコピーします。@kbd{C-w}または@kbd{M-w}をタイプしたとき、マークが非アクティブの場合、これらのコマンドはポイントと最後にセットしたマークの間にあるテキストにたいして処理を行います(@ref{Using
Region}を参照してください)。

  Emacsは特定の構文単位にたいするkillコマンドを提供します。単語(words)にたいしては@kbd{M-@key{DEL}}と@kbd{M-d}(@ref{Words}を参照してください)、対応のとれた式(balanced
expressions)にたいしては@kbd{C-M-k}(@ref{Expressions}を参照してください)、センテンス(sentences:
文)にたいしては@kbd{C-x @key{DEL}}@kbd{M-k}(@ref{Sentences}を参照してください)です。

@kindex M-z
@findex zap-to-char
  コマンド@kbd{M-z}
(@code{zap-to-char})は、killと検索が組み合わされています。これは文字を読み取り、ポイントからバッファー内の次にその文字が現れる場所までをkillします。数引数は繰り返し回数です。負の引数の場合は後方に検索することを意味し、ポイントの前のテキストをkillします。

@node Kill Options
@subsection killのオプション

@vindex kill-read-only-ok
@cindex read-only text, killing
  いくつかの特別なバッファーは、@dfn{読み取り専用(read-only)のテキスト}を含んでいて、それらは変更できないのでkillもできません。killコマンドは読み取り専用のバッファーにたいして特別な動作をします。バッファーから実際にテキストを削除せずに、killリングにコピーします。通常はビープ音をならし、その旨のエラーメッセージを表示します。しかし変数@code{kill-read-only-ok}を非@code{nil}にセットすると、なぜテキストが消去されないのかをエコーエリアにメッセージ表示します。

@vindex kill-do-not-save-duplicates
  変数@code{kill-do-not-save-duplicates}を非@code{nil}に変更すると、同じものにたいするkillは重複なくkillリングの1つのエントリーとなります。

@node Yanking
@section yank
@cindex moving text
@cindex copying text
@cindex kill ring
@cindex yanking
@cindex pasting

  @dfn{yank}するとは、以前killしたテキストを再び挿入するという意味です。テキストを移動またはコピーする通常の方法は、それをkillしてからどこかにyankする方法です。

@table @kbd
@item C-y
最後にkillしたものをポイント位置にyankします(@code{yank})。
@item M-y
yankしたテキストを、それより前にkillしたテキストに置き換えます(@code{yank-pop})。@ref{Earlier
Kills}を参照してください。
@item C-M-w
次のコマンドがkillコマンドのときは、killしたものを、以前にkillしたものに追加します(@code{append-next-kill})。@ref{Appending
Kills}を参照してください。
@end table

@kindex C-y
@findex yank
  基本的なyankコマンドは、@kbd{C-y}
(@code{yank})です。これはもっとも最近killされたものを挿入し、カーソルを挿入されたテキストの最後に移動します。また挿入されたテキストの先頭にマークをセットして、それを非アクティブにします。これにより@kbd{C-u
C-@key{SPC}}で簡単にその位置にジャンプできます(@ref{Mark Ring}を参照してください)。

  @kbd{C-u
C-y}のようにプレフィクス引数を指定すると、カーソルを挿入されたテキストの前に移動して、マークをテキストの最後にセットします。他のプレフィクス引数は、何回前のkillかを指定します。たとえば@kbd{C-u
4 C-y}は、もっとも最近killされたものから4番目に古いものを挿入します。

  グラフィカルなディスプレーでは、@kbd{C-y}はまず最後にEmacsがkillした後に、他のアプリケーションがシステムのクリップボードに、何らかのテキストをコピーしていないか調べます。もしコピーしていたなら、かわりにクリップボードのテキストを挿入します。このようにEmacsは効果的に``カット(cut)''や``コピー(copy)''などの、他のアプリケーションで処理されたクリップボード操作を、Emacsのkillのように扱います(ただしkillリングには記録されません)。詳細については、@ref{Cut
and Paste}を参照してください。

@menu
* Kill Ring::                killされたテキストが格納される場所。
* Earlier Kills::            もっと前にkillしたものをyankする。
* Appending Kills::          数回のkillを一緒にまとめてyankする。
@end menu

@node Kill Ring
@subsection killリング

  @dfn{killリング(kill
ring)}とは、以前にkillされたテキストブロックからなるリストです。すべてのバッファーにたいして、killリングは1つしかないので、あるバッファーでkillしたテキストを、他のバッファーにyankすることができます。これはバッファーから他のバッファーへテキストを移動する、通常の方法です(他の方法もいくつかあります。たとえばテキストをレジスターに格納することもできます。@ref{Registers}を参照してください。テキストを移動する他の方法については、@ref{Accumulating
Text}を参照してください)。

@vindex kill-ring-max
  killリングのエントリーの最大数は、変数@code{kill-ring-max}で制御されます。デフォルトは60です。エントリー数が制限に達しているとき新たにkillすると、Emacsはkillリングの一番古いエントリーを削除して空きを作ります。

@vindex kill-ring
  killリングの実際の内容は、@code{kill-ring}という名前の変数に格納されています。killリングのエントリーの内容は、@kbd{C-h
v kill-ring}で見ることができます。

@node Earlier Kills
@subsection 過去にkillしたテキストをyankする
@cindex yanking previous kills

  @ref{Yanking}で説明したように、@kbd{C-y}に数引数を指定して、最後にkillされたものではないテキストをyankできます。これはkillリングのどのエントリーが欲しいか覚えているとき便利です。もし覚えていないときは、@kbd{M-y}
(@code{yank-pop})コマンドを使って、候補を探すことができます。

@kindex M-y
@findex yank-pop
  もし前のコマンドがyankコマンドのとき、@kbd{M-y}はyankされたテキストを、1つ前にkillされたテキストで置き換えます。つまり2番目に新しいkillされたテキストを復元するには、最初に@kbd{C-y}で最後にkillされたテキストをyankし、次に@kbd{M-y}でその1回前にkillされたテキストで置き換えます。@kbd{M-y}は、@kbd{C-y}または他の@kbd{M-y}の後しか使えません。

  killリングのエントリーを指す(ポイントする)、``last
yank''ポインターという概念で、@kbd{M-y}を理解できるでしょう。なにかをkillする度に、``last
yank''ポインターはリングの先頭に新たに作られたエントリーを指すように移動します。@kbd{C-y}は、``last
yank''ポインターが指すエントリーをyankします。@kbd{M-y}は``last
yank''ポインターが違うエントリーを指すように移動して、バッファーのテキストをポインターが指すテキストに変更します。@kbd{M-y}コマンドを繰り返すことにより、リングの任意のエントリーにポインターを移動できるので、任意のエントリーをバッファーに取り込むことができます。やがてリングの最後に到達すると、次の@kbd{M-y}により再び最初のエントリーに戻ります。

  @kbd{M-y}はリング内で``last
yank''ポインターを移動させますが、リング内のエントリーの順番は変更しません。リングのエントリーは、常に最後にkillされたものを先頭に、記憶されているもので一番古いエントリーへと並んでいます。

  ``last
yank''ポインターを何回進めるかを、@kbd{M-y}に数引数で指定できます。負の引数はリングの先頭に向かってポインターを移動させます。リングの先頭では一番古いエントリーに``戻り''、そこから先頭へと移動します。

  望むテキストを見つけてバッファーに取り込んだら、@kbd{M-y}コマンドを止めればそのテキストはそこに残ります。このテキストはkillリングのエントリーの単なるコピーなので、それを編集してもリングの中のエントリーは変更されません。新しく何かをkillしない限り、``last
yank''ポインターは同じ位置に留まるので、@kbd{C-y}でそのテキストの別のコピーをyankできます。

  @kbd{C-y}に数引数を指定するときも、yankするエントリーに``last yank''ポインターをセットします。

@node Appending Kills
@subsection killしたテキストの追加

@cindex appending kills in the ring
  通常はkillコマンドを実行するごとに、新しいエントリーがkillリングにpushされます。しかし2回以上の連続するkillコマンドにより、killされたテキストを1つのエントリーとしてまとめ、すべてのテキストを1単位として、あたかもそれがkillされたかのように、1回の@kbd{C-y}でyankできます。

  つまりテキストを1つの単位としてyankしたいとき、そのテキストすべてを1回でkillする必要はありません。すべてがkillされるまで行から行、単語から単語へとkillを続け、それを一度に取得することができます。

  ポイントから前方にkillするコマンドは、直前にkillされたテキストの最後に追加します。ポイントから後方にkillするコマンドは、テキストの先頭に追加します。この方法により前方と後方を併用した連続するkillコマンドは、すべてのkillされたテキストを再配置しなくてもよいように、1つのエントリーにまとめます。数引数を指定してもkillの連続性は途切れません。たとえば以下のようなテキストを含むバッファーがあるとしましょう:

@example
This is a line @point{}of sample text.
@end example

@noindent
ポイントの位置は@point{}で示された場所です。@kbd{M-d M-@key{DEL} M-d
M-@key{DEL}}とタイプして、前方と後方へのkillを交互に行うと、最後にkillリングには@samp{a line of
sample}という1つのエントリー、バッファーには@samp{This is@ @
text.}が残ります(@samp{is}と@samp{text}の間には2つのスペースがあることに注意してください。これは@kbd{M-@key{SPC}}または@kbd{M-q}で取り除くことができます)。

  同じテキストをkillする別の方法は、@kbd{M-b M-b}で単語2つ後方に移動してから、@kbd{C-u
M-d}で前方の単語4つをkillする方法です。これはバッファーとkillリングに、正確に同じ結果をもたらします。@kbd{M-f M-f C-u
M-@key{DEL}}で後方にkillしても結果は同じです。killリングのエントリーは、常にバッファーからkillされる前と同じ順番になります。

@kindex C-M-w
@findex append-next-kill
  killコマンドと最後のキルコマンドの間に、(単なる数引数ではない)他のコマンドが入ると、killリングには新たなエントリーが作られます。しかし、あらかじめ@kbd{C-M-w}
(@code{append-next-kill})とタイプすることにより、最後にkillされたテキストに追加するように強制できます。@kbd{C-M-w}は、後に続くコマンドがkillコマンドであれば、killしたテキストを前にkillしたテキストに付け加えるよう指示します。この方法でも、前方にkillするコマンドの場合は、前にkillされたテキストの最後に追加され、後方にkillするコマンドの場合は、先頭に追加されます。この方法により、1ヶ所にyankするために離れた場所にあるいくつかのテキスト断片を、killして集めることができます。

  @kbd{M-w}
(@code{kill-ring-save})の後のkillコマンドは、@kbd{M-w}でkillリングにコピーされたテキストへの追加はしません。

@node Cut and Paste
@section グラフィカルなディスプレーでのカットアンドペースト
@cindex cut
@cindex copy
@cindex paste

  ほとんどのグラフィカルなデスクトップ環境では、異なるアプリケーション間のデータ転送(通常はテキスト)に、@dfn{クリップボード(clipboard)}と呼ばれるシステム機能を使います。Xでは他にプライマリー選択(primary
selection)とセカンダリー選択(secondary
selection)という、同様の機能が利用可能です。Emacsをグラフィカルなディスプレーで実行している場合、killとyankコマンドはこれらの機能に統合されているので、Emacsと他のグラフィカルアプリケーション間で、簡単にテキストを転送できます。

  デフォルトでは、Emacsはプログラム間テキスト転送のコーディングシステムとして、UTF-8を使います。もしコピーしたテキストが期待したものでない場合、@kbd{C-x
@key{RET} x}または@kbd{C-x @key{RET}
X}とタイプして、他のコーディングシステムを指定できます。@code{x-select-request-type}をカスタマイズして、異なるデータタイプを要求することもできます。@ref{Communication
Coding}を参照してください。

@menu
* Clipboard::                Emacsがシステムクリップボードを使う方法。
* Primary Selection::        一時的に選択されたテキストの選択。
* Secondary Selection::      ポイントとマークを変化させずに切り取る。
@end menu

@node Clipboard
@subsection クリップボードを使う
@cindex clipboard

  @dfn{クリップボード(clipboard)}とは、ほとんどのグラフィカルなアプリケーションが、``カットアンドペースト''のために使う機能です。もしクリップボードが存在する場合、Emacsのkillおよびyankコマンドもそれを使います。

  何らかのテキストを、@kbd{C-w} (@code{kill-region})のようなコマンドでkillしたり、@kbd{M-w}
(@code{kill-ring-save})のようなコマンドでkillリングにコピーしたとき、そのテキストはクリップボードにも転送されます。

@vindex save-interprogram-paste-before-kill
  Emacsのkillコマンドがテキストをクリップボードに転送すると、通常クリップボードの既存の内容は失われます。オプションとして、@code{save-interprogram-paste-before-kill}を@code{t}に変更できます。これにより、Emacsは古いクリップボードのデータが失われることを防ぐために、最初にクリップボードのデータをkillリングに保存します。これにはデータが大きくなると、メモリー消費が増えるというリスクがあります。

  @kbd{C-y}
(@code{yank})のようなyankコマンドもクリップボードを使います。他のアプリケーションがクリップボードを``所有''する場合(たとえばEmacsで最後にkillコマンドを実行した後に、他のアプリケーションでテキストをカットまたはコピーした場合)、Emacsはkillリングではなくクリップボードからyankします。

@vindex yank-pop-change-selection
  通常killリングを@kbd{M-y}
(@code{yank-pop})で巡回することでは、クリップボードは変更されません。しかし@code{yank-pop-change-selection}を@code{t}に変更すると、@kbd{M-y}は新しいyankをクリップボードに保存します。

@vindex x-select-enable-clipboard
  killおよびyankコマンドがクリップボードにアクセスしないようにするには、変数@code{x-select-enable-clipboard}を@code{nil}に変更してください。

@cindex clipboard manager
@vindex x-select-enable-clipboard-manager
  多くのXデスクトップ環境は、@dfn{クリップボードマネージャー(clipboard
manager)}と呼ばれる機能をサポートします。もしEmacsがクリップボードのデータの現在の``持ち主''のときにEmacsを終了し、そのときクリップボードマネージャーが実行されていると、Emacsはクリップボードのデータをクリップボードマネージャーに転送するのでデータは失われません。ある状況において、これはEmacsが終了するが遅くなる原因となります。Emacsがクリップボードマネージャーにデータをを転送しないようにするには、変数@code{x-select-enable-clipboard-manager}を@code{nil}に変更してください。

@vindex x-select-enable-primary
@findex clipboard-kill-region
@findex clipboard-kill-ring-save
@findex clipboard-yank
  Emacs 24以前は、killおよびyankコマンドは、クリップボードではなくプライマリー選択(@ref{Primary
Selection}を参照してください)を使っていました。もしこのほうがよいなら、@code{x-select-enable-clipboard}を@code{nil}、@code{x-select-enable-primary}を@code{t}、@code{mouse-drag-copy-region}を@code{t}に変更してください。この場合は、次のコマンドを使って、クリップボードに明示的にアクセスできます。リージョンをkillしてクリップボードに保存するには@code{clipboard-kill-region}、リージョンをkillリングにコピーするとともにクリップボードに保存するには@code{clipboard-kill-ring-save}、クリップボードの内容をポイント位置にyankするには@code{clipboard-yank}です。

@node Primary Selection
@subsection 他のウィンドウアプリケーションにたいするカットアンドペースト
@cindex X cutting and pasting
@cindex X selection
@cindex primary selection
@cindex selection, primary

  Xウィンドウシステム下では、@dfn{プライマリー選択(primary
selection)}に、Xアプリケーションで最後に選択されたテキスト(通常はマウスのドラッグで選択される)が存在します。一般的に、このテキストは他のXアプリケーションに@kbd{mouse-2}をクリックして挿入することができます。プライマリー選択はクリップボードとは別のものです。プライマリー選択の内容は、より``脆弱''です。なぜなら、クリップボードは明示的な``カット''または``コピー''だけにより上書きされるのにくらべ、プライマリー選択はマウスでテキストが選択される度に上書きされるからです。

  Xの下では、リージョンがアクティブ(@ref{Mark}を参照してください)になればいつでも、リージョンのテキストはプライマリー選択に保存されます。これは、そのリージョンの選択がマウスでドラッグやクリック(@ref{Mouse
Commands}を参照してください)されたのか、キーボードコマンド(たとえば@kbd{C-@key{SPC}}をタイプしてからポイントを移動したなど。@ref{Setting
Mark}を参照してください)なのかによらず適用されます。

@vindex select-active-regions
  変数@code{select-active-regions}を@code{only}に変更すると、Emacsは一時的にアクティブになったリージョン(たとえばマウスやシフト選択など。@ref{Shift
Selection}を参照してください)だけをプライマリー選択に保存します。@code{select-active-regions}を@code{nil}に変更すると、Emacsはアクティブなリージョンをプライマリー選択に保存しません。

  プライマリー選択をEmacsのバッファーに挿入するには、挿入したい場所で@kbd{mouse-2}
(@code{mouse-yank-primary})をクリックします。@ref{Mouse Commands}を参照してください。

@cindex MS-Windows, and primary selection
  MS-Windowsはプライマリー選択を提供しませんが、Emacsは単一のEmacsセッション内で選択されたテキストを内部に格納することにより、これをエミュレートします。したがってWindowsでも、プライマリー選択に関するすべての機能とコマンドは、Xと同様に機能します。しかしこれは同一セッションにおけるカットやペーストなどの場合で、Emacsセッションと他のアプリケーション間では機能しません。

@node Secondary Selection
@subsection セカンダリー選択
@cindex secondary selection

  プライマリー選択に加えて、Xウィンドウシステムは@dfn{セカンダリー選択(secondary
selection)}として知られる、同様な第2の機能を提供します。最近ではセカンダリー選択を使うXアプリケーションの数は多くありませんが、以下のEmacsコマンドによりアクセスできます:

@table @kbd
@findex mouse-set-secondary
@kindex M-Drag-Mouse-1
@cindex secondary-selection face
@item M-Drag-Mouse-1
ボタンを押した場所からボタンを話した場所までを、セカンダリー選択としてセットします(@code{mouse-set-secondary})。ドラッグして選択されたテキストは、フェイス@code{secondary-selection}を使ってハイライトされます。ウィンドウの上端または下端を越えてマウスをドラッグすると、@code{mouse-set-region}と同様にウィンドウは自動的にスクロールします(@ref{Mouse
Commands}を参照してください)。

このコマンドはkillリングを変更しません。

@findex mouse-start-secondary
@kindex M-Mouse-1
@item M-Mouse-1
@dfn{セカンダリー選択}の始点をセットします(@code{mouse-start-secondary})。

@findex mouse-secondary-save-then-kill
@kindex M-Mouse-3
@item M-Mouse-3
@kbd{M-Mouse-1}で指定された位置から、クリックされた点を終点とするセカンダリー選択をセットします(@code{mouse-secondary-save-then-kill})。これは選択されたテキストをkillリングにも保存します。同じ場所での2回目の@kbd{M-Mouse-3}は、作成されたセカンダリー選択をkillします。

@findex mouse-yank-secondary
@kindex M-Mouse-2
@item M-Mouse-2
クリックした場所にセカンダリー選択を挿入し、ポイントをyankしたテキストの最後に配します(@code{mouse-yank-secondary})。
@end table

@kbd{Mouse-1}と同様、@kbd{M-Mouse-1}のダブルクリックで単語、トリプルクリックで行を処理します。

@code{mouse-yank-at-point}が非@code{nil}の場合、@kbd{M-Mouse-2}はポイント位置にyankします。どこをクリックしたか、さらにはフレームのどのウィンドウをクリックしたかは関係ありません。@ref{Mouse
Commands}を参照してください。

@node Accumulating Text
@section テキストの追加
@findex append-to-buffer
@findex prepend-to-buffer
@findex copy-to-buffer
@findex append-to-file

@cindex accumulating scattered text
  テキストのコピーや移動は、それをkillしてyankすることにより通常行います。しかし多くの箇所にあるテキストブロックをコピーしたり、たくさんのテキストの断片を1ヶ所にコピーする便利な方法があります。ここではテキストの断片を、バッファーやファイルに追加するコマンドを説明します。

@table @kbd
@item M-x append-to-buffer
リージョンを指定したバッファーの内容の後に追加(append)します。
@item M-x prepend-to-buffer
リージョンを指定したバッファーの内容の前に追加(prepend)します。
@item M-x copy-to-buffer
リージョンを指定したバッファーにコピーして、バッファーの古い内容は削除されます。
@item M-x insert-buffer
指定したバッファーの内容を、現在のバッファーのポイント位置に挿入します。
@item M-x append-to-file
リージョンを指定したファイルの内容の最後に追加します。
@end table

  テキストをバッファーに追加するには、@kbd{M-x
append-to-buffer}を使います。これはバッファー名を読み取り、リージョンのコピーを指定したバッファーに挿入します。存在しないバッファーを指定すると、@code{append-to-buffer}はそのバッファーを作成します。テキストは、そのバッファーのポイント位置に挿入されます。バッファーを編集用に使っていると、コピーされたテキストはその時ポイントがあった位置に挿入されます。

  バッファーのポイントは、コピーされたテキストの最後に残ります。連続して@code{append-to-buffer}を使うと、テキストは指定したバッファーにコピーした順番で追加されていきます。厳密に言うと@code{append-to-buffer}は既存のバッファーのテキストにたいして、常に追加をする訳ではありません。これはポイントがバッファーの最後にあるときに追加をします。しかしバッファーを変更するのに@code{append-to-buffer}しか使わない場合、ポイントは常にバッファーの最後に位置することになります。

  @kbd{M-x
prepend-to-buffer}も@code{append-to-buffer}と同様ですが、他のバッファーのポイントはコピーされたテキストの前に置かれるので、連続してテキストを追加すると結果は逆の順番にコピーされます。@kbd{M-x
copy-to-buffer}も同様ですが、他のバッファーの既存の内容は削除されるので、バッファーの内容は新しくコピーされたテキストだけになります。

  コマンド@kbd{M-x
insert-buffer}は、追加するテキストを他のバッファーから取得するために使われます。これはバッファー名の入力を求め、そのバッファーのすべてのテキストのコピーを、現在のバッファーのポイント位置に挿入します。ポイントは挿入されたテキストの先頭になります。挿入されたテキストの最後の位置もマークリングに追加されます。マークは非アクティブになります。バッファーに関する背景情報は、@ref{Buffers}を参照してください。

  バッファーのテキストを追加するかわりに、@kbd{M-x
append-to-file}でテキストを直接ファイルに追加できます。これはファイル名の入力を求め、リージョンのテキストを指定されたファイルの最後に追加します。ディスク上のファイルはすぐに変更されます。

  @code{append-to-file}は、Emacsがvisitして@emph{いない}ファイルだけに使うべきです。Emacsで編集中のファイルにたいして使用すると、それはEmacsの背後でファイルが変更されることになるため、編集内容が失われる可能性があります。

  テキストの移動に関する他の方法はレジスターに格納する方法です。@ref{Registers}を参照してください。

@node Rectangles
@section 矩形領域(Rectangles)
@cindex rectangle
@cindex columns (and rectangles)
@cindex killing rectangular areas of text

  @dfn{矩形領域(rectangle)}コマンドは、テキストの矩形領域を操作します。矩形領域のテキストとは、特定の行範囲内にある、特定の2つの列の間にある文字すべての文字です。Emacsには矩形領域にたいしてkill、yank、クリアー、スペースやテキストでんpフィル、削除を行うコマンドがあります。矩形領域コマンドは、複数列のテキストを操作したり、テキストをそのように変更したり戻したりする場合に便利です。

@cindex mark rectangle
  コマンドで操作する矩形領域を指定するには、一方の角にマークを設定し、その対角にポイントを置きます。このように設定した矩形領域を矩形リージョン(region-rectangle)と呼びます。ポイントとマークが同じ列の場合、矩形リージョンは空になります。ポイントとマークが同じ行の場合、矩形リージョンの高さは1行になります。

  矩形リージョンは、リージョンの制御と大体同じ方法で制御できます。しかし、ポイントとマークの組がリージョンとして解釈されるのか、あるいは矩形領域として解釈されるかは、それらを使うコマンドに依存することに注意してください。

@table @kbd
@item C-x r k
矩形リージョンをkillして、内容を``最後にkillされた矩形領域''として保存します(@code{kill-rectangle})。
@item C-x r M-w
矩形リージョンのテキストを``最後にkillされた矩形領域''として保存します(@code{copy-rectangle-as-kill})。
@item C-x r d
矩形リージョンのテキストを削除します(@code{delete-rectangle})。
@item C-x r y
最後にkillされた矩形領域の左上隅をがポイント位置になるようにyankします(@code{yank-rectangle})。
@item C-x r o
矩形領域にスペースを挿入します(@code{open-rectangle})。これにより矩形リージョンの以前の内容は右にずれます。
@item C-x r N
矩形リージョンの左端に行番号を挿入します(@code{rectangle-number-lines})。これにより矩形リージョンの以前の内容は右にずれます。
@item C-x r c
矩形リージョンの内容をスペースに置き換えてクリアーします(@code{clear-rectangle})。
@item M-x delete-whitespace-rectangle
指定された矩形領域の各行で、矩形領域の左端の列から空白文字を削除します。
@item C-x r t @var{string} @key{RET}
矩形領域の各行にたいして、内容を@var{string}に置き換えます(@code{string-rectangle})。
@item M-x string-insert-rectangle @key{RET} @var{string} @key{RET}
矩形領域の各行にたいして、@var{string}を挿入します。
@item C-x @key{SPC}
Rectangle
Markモードを切り替えます(@code{rectangle-mark-mode})。このモードがアクティブのとき矩形領域はハイライトされ、拡大・縮小が可能になります。標準のkillおよびyankコマンドは、それにたいして操作を行います。
@end table

  矩形領域の操作は2種類に分類できます。それは矩形領域を消去または挿入するものと、空の矩形領域を作るものです。

@kindex C-x r k
@kindex C-x r d
@findex kill-rectangle
@findex delete-rectangle
  矩形領域のテキストを消去するには2つの方法があります。@kbd{C-x r d}
(@code{delete-rectangle})はテキストを無条件に削除します。@kbd{C-x r k}
(@code{kill-rectangle})はテキストを取り除いて、それを@dfn{最後にkillされた矩形領域}として保存します。両方とも矩形領域の各行の指定したテキストを消去するように、矩形リージョンを消去します。その行の後に続くテキストがある場合、削除による隙間を生めるために後方に移動されます。

  矩形領域の``kill''は普通のkillとは異なります。矩形領域はkillリングには保存されず、一番最後にkillされた矩形領域だけを記録する、特別な場所に保存されます。矩形領域のyankは線形テキストのyankとは大きく異なるので、異なるyankコマンドが使われるからです。矩形領域にたいしてyankのpopは定義されていません。

@kindex C-x r M-w
@findex copy-rectangle-as-kill
  @kbd{C-x r M-w}
(@code{copy-rectangle-as-kill})は矩形領域用の@kbd{M-w}に相当します。これはバッファーからテキストを削除することなく、矩形領域を``最後にkillされた矩形領域''として記録します。

@kindex C-x r y
@findex yank-rectangle
  killされた矩形領域をyankするには、@kbd{C-x r y}
(@code{yank-rectangle})とタイプします。矩形領域の最初の行はポイント位置に挿入されます。矩形領域の2行目はポイントの1行下の位置に挿入され、以下同様に挿入されていきます。影響を受ける行数は、保存された矩形領域の高さにより決定されます。

  たとえば1列のリスト2つを2列のリストに変換できます。一方の1列リストを矩形領域としてkillしてもう一方の1列リストの隣にyankすればよいのです。

  @kbd{C-x r r @var{r}}と@kbd{C-x r i
@var{r}}で、矩形領域をレジスターにコピーしたり取り出したりできます。@ref{Rectangle Registers}を参照してください。

@kindex C-x r o
@findex open-rectangle
@kindex C-x r c
@findex clear-rectangle
  空の矩形領域を作るために使うことのできるコマンドが2つあります。@kbd{C-x r c}
(@code{clear-rectangle})は、矩形リージョンの既存のテキストを空白に置き換えます。@kbd{C-x r o}
(@code{open-rectangle})は空白の矩形領域を挿入します。

@findex delete-whitespace-rectangle
  @kbd{M-x
delete-whitespace-rectangle}は、指定した列を起点に水平方向の空白文字を削除します。これは矩形領域の各行に適用され、開始列は矩形領域の左端です。矩形領域の右端はこのコマンドに影響を及ぼしません。

@kindex C-x r N
@findex rectangle
  コマンド@kbd{C-x r N}
(@code{rectangle-number-lines})は、矩形領域の左端に行番号を挿入します。通常は矩形領域の最初の行を1として番号が開始されます。プレフィクス引数を指定すると、このコマンドは開始番号と、番号を出力する際の書式文字列(@ref{Formatting
Strings,,, elisp, The Emacs Lisp Reference Manual}を参照してください)の入力を求めます。

@kindex C-x r t
@findex string-rectangle
  コマンド@kbd{C-x r t}
(@code{string-rectangle})は、矩形リージョンの各行を文字列で置き換えます。文字列の幅は矩形領域と同じ幅である必要はありません。矩形領域の後ろのテキストは、文字列の幅が少ないときは左に、文字列の幅が大きいときは右にシフトされます。

@findex string-insert-rectangle
  コマンド@kbd{M-x
string-insert-rectangle}は、@code{string-rectangle}と同様ですが、各行に文字列を挿入し、元の文字列は右にシフトされます。

@findex rectangle-mark-mode
  コマンド@kbd{C-x @key{SPC}}
(@code{rectangle-mark-mode})は、矩形リージョンをハイライトするか、標準のリージョンをハイライトするかを切り替えます(最初にリージョンをアクティブにする必要があります)。このモードが有効な場合、@kbd{C-f}、@kbd{C-n}などのコマンドは矩形領域に合ったやり方でリージョンのサイズを変更し、kill、yankは矩形領域を処理します。@ref{Killing}を参照してください。このモードはリージョンがアクティブな間だけ持続します。

@node CUA Bindings
@section CUAバインド
@findex cua-mode
@vindex cua-mode
@cindex CUA key bindings
@vindex cua-enable-cua-keys
  コマンド@kbd{M-x cua-mode}は、多くのアプリケーションで使われている、CUA(Common User
Access)互換のキーバンドをセットアップします。

  CUAモードが有効な場合、@kbd{C-x}、@kbd{C-c}、@kbd{C-v}、@kbd{C-z}などのキーは、カット(kill)、コピー、ペースト(yank)、アンドウのコマンドを呼び出します。@kbd{C-x}と@kbd{C-c}によるカットとコピーは、リージョンがアクティブなときだけ処理されます。リージョンが非アクティブのときはプレフィクスキーとして動作するので、@kbd{C-x
C-c}のような標準のEmacsコマンドは正常に機能します。変数@code{mark-even-if-inactive}は@kbd{C-x}と@kbd{C-c}に影響を及ぼさないことに注意してください(@ref{Using
Region}を参照してください)。

  マークがアクティブのときに@kbd{C-x
C-f}のようなEmacsコマンドを入力するには、@kbd{Shift}を押しながらプレフィクスキーを押す(例 @kbd{S-C-x
C-f})か、プレフィクスキーを素早く2回タイプ(例 @kbd{C-x C-x C-f})します。

  CUAモードがEmacs標準のキーバインドをオーバーライドするのを無効にしつつ、以下で説明するそれ以外のCUAモードの機能は使う場合は、変数@code{cua-enable-cua-keys}に@code{nil}をセットしてください。

  CUA モードはデフォルトでDelete-Selectionモード(@ref{Mouse
Commands}を参照してください)を有効にするので、アクティブなリージョンがあるときテキストをタイプすると、そのテキストで置き換えられます。CUAモードでこれを無効にするには、変数@code{cua-delete-selection}を@code{nil}にセットしてください。

@cindex rectangle highlighting
  CUAモードは矩形領域を明白にハイライトする、強化された矩形領域サポートを提供します。@kbd{C-@key{RET}}を使うことにより矩形領域の選択が開始され、移動コマンドを使って拡張したり、@kbd{C-x}と@kbd{C-c}で切り取りとコピーができます。@key{RET}により、矩形領域の四隅に時計方向へカーソルを移動させるので、任意の方向に簡単に領域を拡張できます。タイプされた通常のテキストは、矩形領域の各行の左か右(カーソルのある側)に挿入されます。

  この矩形領域サポートは、@code{cua-rectangle-mark-mode}コマンドを呼び出すことにより、CUAモードを有効にせずに使うこともできます。しかし標準の@code{rectangle-mark-mode}も参照してください。@xref{Rectangles}を参照してください。

  CUAモードでは、テキストや矩形領域を簡単にレジスターに保存したり、取り出すことができます。これは1桁の数引数をkill、copy、yankコマンドに指定します。たとえば@kbd{C-1
C-c}はリージョンをレジスター@code{1}にコピーし、@kbd{C-2 C-v}はレジスター@code{2}の内容をyankします。

@cindex global mark
  CUAモードは、バッファー間での簡単にテキストを移動したりコピーするためのグローバルマーク機能も提供します。@kbd{C-S-@key{SPC}}を使って、グローバルマークのオンとオフが切り替えられます。グローバルマークがオンのときは、killまたはコピーされたすべてのテキストは自動的にグローバルマークの位置に挿入され、タイプしたテキストも現在のカーソル位置ではなくグローバルマークに挿入されます。

  たとえば複数のバッファーから単語をコピーして単語リストを作るには、単語リストを作るバッファーにグローバルマークをセットします。次にリストにしたい単語をマーク(@kbd{S-M-f}など)してから、@kbd{C-c}か@kbd{M-w}でリストにコピーします。そして@key{RET}でリストにコピーされた単語の後ろに改行を挿入すればよいのです。
