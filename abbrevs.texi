@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2001-2015 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Abbrevs
@chapter abbrev(略語)
@cindex abbrevs
@cindex expansion (of abbrevs)

  定義された@dfn{abbrev(abbreviation:
略語の意)}とは、挿入したとき他のテキストに@dfn{展開}される単語のことです。abbrevは、特別な方法で展開されるようにユーザーにより定義されます。たとえば@samp{foo}を、@samp{find
outer otter}に展開されるように定義したとします。その後、@kbd{f o o
@key{SPC}}とタイプすることにより、バッファーに@samp{find outer otter }を挿入できます。

  略語機能の2番目の種類は、@dfn{動的abbrev展開(dynamic abbrev
expansion)}と呼ばれます。ポイントの前の文字で始まる単語をバッファーから探して、その文字を展開するために、明示的なコマンドで動的abbrev展開を使用します。@ref{Dynamic
Abbrevs}を参照してください。

  ``Hippie(ヒッピー)''展開は、略語展開を一般化したものです。@ref{Hippie Expand, , Hippie Expansion,
autotype, Features for Automatic Typing}を参照してください。

@menu
* Abbrev Concepts::          定義されたabbrevの基本。
* Defining Abbrevs::         abbrevを定義することにより、タイプしたとき展開されるようになります。
* Expanding Abbrevs::        展開の制御 --- 
                               プレフィクス、展開の取り消し。
* Editing Abbrevs::          定義されたabbrevのリスト全体の閲覧と編集。
* Saving Abbrevs::           他のセッションのためにabbrevのリスト全体を保存する。
* Dynamic Abbrevs::          すでにバッファーにある単語にたいする略語。
* Dabbrev Customization::    動的abbrevのための単語とは何か。ケースごとの処理。
@end menu

@node Abbrev Concepts
@section abbrevの概念

  @dfn{abbrev}とは、特定の@dfn{展開結果}に@dfn{展開}されるために定義された単語のことです。abbrevの後ろに単語の区切りとなる文字を挿入したとき、それはabbrevを展開し、abbrevを展開結果に置き換えます。たとえば@samp{foo}が@samp{find
outer otter}に展開されるabbrevとして定義された場合、@kbd{f o o .}とタイプすると@samp{find outer
otter.}が挿入されます。

@findex abbrev-mode
@cindex Abbrev mode
@cindex mode, Abbrev
  abbrevは、バッファーローカルなマイナーモードのAbbrevモードが有効なときだけ展開されます。Abbrevモードを無効にすると、定義したabbrevは忘れられますが、再びAbbrevモードを有効にすると展開されます。コマンド@kbd{M-x
abbrev-mode}は、Abbrevモードを切り替えます。数引数を指定した場合、引数が正のときはAbbrevモードをオン、他の場合はオフに切り替えます。@ref{Minor
Modes}を参照してください。

  abbrevは、あるメジャーモードのときだけアクティブになる、@dfn{モード特有(mode-specific)}な定義をもつことができます。abbrevは、すべてのメジャーモードでアクティブになる、@dfn{グローバル(global)}な定義をもつこともできます。同じabbrevが、グローバルな定義と、異なるメジャーモードのための、さまざまなモード特有の定義をもつことができます。カレントのメジャーモードにたいするモード特有の定義は、グローバルな定義をオーバーライドします。

  Abbrevモードが有効かにかかわらず、編集セッションの間に対話的にabbrevを定義できます。後のセッションでリロードして使用するために、ファイルにabbrev定義のリストを保存することもできます。

@node Defining Abbrevs
@section abbrevの定義

@table @kbd
@item C-x a g
ポイントの前の1つ以上の単語を使用して、それが展開結果となるabbrevを定義します(@code{add-global-abbrev})。
@item C-x a l
同じですが、カレントメジャーモードに特有のabbrevを定義します(@code{add-mode-abbrev})。
@item C-x a i g
バッファーの単語をabbrevとして定義します(@code{inverse-add-global-abbrev})。
@item C-x a i l
バッファーの単語を、モード特有のabbrevとして定義します(@code{inverse-add-mode-abbrev})。
@item M-x define-global-abbrev @key{RET} @var{abbrev} @key{RET} @var{exp} @key{RET}
@var{abbrev}を、@var{exp}に展開されるabbrevとして定義します。
@item M-x define-mode-abbrev @key{RET} @var{abbrev} @key{RET} @var{exp} @key{RET}
@var{abbrev}を、@var{exp}に展開されるモード特有のabbrevとして定義します。
@item M-x kill-all-abbrevs
すべてのabbrev定義を削除して、白紙状態にします。
@end table

@kindex C-x a g
@findex add-global-abbrev
  abbrevを定義する通常の方法は、abbrevに展開させたいテキストを入力して、ポイントをその後ろに配し、@kbd{C-x a g}
(@code{add-global-abbrev})とタイプします。これはミニバッファーを使ってabbrev自身を読み取り、ポイントの前の1つ以上の単語にたいするabbrevとして定義します。数引数を使用してポイントの前のいくつの単語が展開結果となるかを指定します。たとえば、上述したabbrevの@samp{foo}を定義するには、@samp{find
outer otter}とテキストをタイプしてから、@kbd{C-u 3 C-x a g f o o @key{RET}}とタイプします。

  @kbd{C-x a g}の引数に0を指定すると、それは定義するabbrevの展開結果として、リージョンの内容を使用することを意味します。

@kindex C-x a l
@findex add-mode-abbrev
  @kbd{C-x a l}
(@code{add-mode-abbrev})は似ていますが、これはカレントのメジャーモードにたいする、モード特有のabbrevを定義します。引数の機能は@kbd{C-x
a g}と同じです。

@kindex C-x a i g
@findex inverse-add-global-abbrev
@kindex C-x a i l
@findex inverse-add-mode-abbrev
  @kbd{C-x a i g} (@code{inverse-add-global-abbrev})と@kbd{C-x a i l}
(@code{inverse-add-mode-abbrev})は、逆のことを行ないます。abbrevとなるテキストがすでにバッファーに存在する場合、これらのコマンドはミニバッファーに展開結果を指定することにより、abbrevを定義します。これらのコマンドは、この定義を使ってabbrevテキストを展開します。

@findex define-mode-abbrev
@findex define-global-abbrev
  abbrevまたは展開結果をバッファーに入力せずに、コマンド@code{define-global-abbrev}で定義することができます。これは2つの引数
---
abbrevと展開結果を読み取ります。コマンド@code{define-mode-abbrev}は、モード特有のabbrevにたいして同様のことを行います。

  abbrevの定義を変更するには、単に新しい定義を作成するだけです。abbrevがすでに定義をもつ場合、abbrev定義コマンドはそれを置換する前に確認を求めます。

@findex kill-all-abbrevs
  abbrev定義を削除するには、@kbd{C-u - C-x a g}や@kbd{C-u - C-x a
l}のように、abbrev定義コマンドに負の引数を与えます。前者はグローバルな定義を削除し、後者はモード特有の定義を削除します。@kbd{M-x
kill-all-abbrevs}は、すべてのabbrevにたいしてグローバルとローカルの両方の定義を削除します。

@node Expanding Abbrevs
@section abbrev展開の制御

  Abbrevモードが有効な場合、バッファーのポイントの前にabbrevがあり、そこで自己挿入文字として空白文字か区切り文字(@key{SPC}やカンマなど)を挿入したときは、常にabbrevが展開されます。より正確には、単語を構成しない任意の文字はabbrevを展開し、単語を構成する任意の文字はabbrevの一部となります。もっとも一般的なabbrevの使用法は、まずabbrevを挿入し、それから区切り文字か空白文字を挿入してabbrevを展開する方法です。

@vindex abbrev-all-caps
  abbrevの展開は、大文字小文字を維持します。つまり@samp{foo}は@samp{find outer
otter}に、@samp{Foo}は@samp{Find outer
otter}に展開されます。デフォルトでは@samp{FOO}は@samp{Find Outer
Otter}に展開されますが、変数@code{abbrev-all-caps}を非@code{nil}値に変更した場合は、@samp{FIND
OUTER OTTER}に展開されます。

  以下はabbrevの展開を制御するコマンドです:

@table @kbd
@item M-'
プレフィクスと、その後の展開されるabbrevを分割します(@code{abbrev-prefix-mark})。
@item C-x a e
@findex expand-abbrev
ポイントの前のabbrevを展開します。(@code{expand-abbrev})。これはAッbレvモードが有効でなくても効果があります。
@item M-x expand-region-abbrevs
リージョンで見つかったいくつか、またはすべてのabbrevを展開します。
@end table

@kindex M-'
@findex abbrev-prefix-mark
  abbrevを展開して、その展開結果にプレフィクスをつけたい場合があるかもしれません。たとえば、@samp{cnst}が@samp{construction}に展開されるとき、これを使って@samp{reconstruction}を入力したいと思うかもしれません。しかし、@kbd{recnst}とタイプしてもうまくいきません。なぜなら、それがabbrevとして定義される必要があるからです。これは、プレフィクス@samp{re}とabbrevの@samp{cnst}の間で、コマンド@kbd{M-'}
(@code{abbrev-prefix-mark})を使うことにより行なうことができます。最初にまず@samp{re}を挿入します。そこで@kbd{M-'}をタイプします。これにより、コマンドが機能していることを示すためバッファーにハイフンが挿入されます。その後、abbrevの@samp{cnst}を入力します。このときバッファーには@samp{re-cnst}が含まれます。そこで単語を構成しない文字を挿入すると、abbrevの@samp{cnst}が@samp{construction}に展開されます。この展開ステップでは、@kbd{M-'}が使用中であることを示していたハイフンも削除されます。結果は期待した通り@samp{reconstruction}となります。

  abbrevを展開せずにabbrevのテキストをバッファーに残したい場合、abbrevの後ろの区切り文字を@kbd{C-q}で挿入して、これを行なうことができます。したがって@kbd{foo
C-q ,}とタイプすると、それは展開されず、バッファーには@samp{foo,}が残ります。

@findex unexpand-abbrev
  間違ってabbrevを展開した場合、@kbd{C-/}
(@code{undo})で展開をアンドゥできます。これはabbrev展開による挿入をアンドゥし、それをabbrevテキストに戻します。期待する結果が展開されないabbrevと終端となる非単語文字の場合、@kbd{C-q}でクォートして終端文字を再挿入しなければなりません。@kbd{M-x
unexpand-abbrev}を使えば終端文字を削除せずに、最後の展開を取り消すことができます。

@findex expand-region-abbrevs
  @kbd{M-x
expand-region-abbrevs}は、リージョン内の定義されたabbrevを検索し、見つかったabbrevそれぞれにたいして、abbrevを展開結果に置き換えるか尋ねます。このコマンドはabbrevを使ってテキストを挿入したが、最初にAbbrevモードをオンにするのを忘れたときに便利です。これは特別なabbrev定義のセットで、複数のグローバルな置き換えを一度に行なうときにも便利です。このコマンドは、Abbrevモードが有効でなくても効果があります。

  関数@code{expand-abbrev}は、@code{abbrev-expand-function}が指定する関数を呼び出すことにより展開を行ないます。この関数を変更することにより、abbrevの展開を自由に変更できます。@ref{Abbrev
Expansion,,, elisp, The Emacs Lisp Reference Manual}を参照してください。

@node Editing Abbrevs
@section abbrevのテストと編集

@table @kbd
@item M-x list-abbrevs
すべてのabbrev定義のリストを表示します。数引数を指定した場合は、ローカルなabbrevのリストだけを表示します。
@item M-x edit-abbrevs
abbrevのリストを編集します。定義の追加、変更、削除ができます。
@end table

@findex list-abbrevs
  @kbd{M-x list-abbrevs}の出力は以下のようなものです:

@example
@var{他のさまざまなテーブル@dots{}}
(lisp-mode-abbrev-table)
"dk"          0    "define-key"
(global-abbrev-table)
"dfn"         0    "definition"
@end example

@noindent
(空行に意味はありません。また他のabbrevテーブルは省略しています。)

  カッコで括られた名前を含む行は、特定のabbrevテーブルのabbrevにたいするヘッダーです。@code{global-abbrev-table}はすべてのグローバルなabbrevを含み、その他のメジャーモードの後ろについたabbrevテーブルは、モード特有のabbrevを含みます。

  それぞれのabbrevテーブルで、空行でない行は1つのabbrevの定義です。行の先頭の単語はabbrevです。その後ろの数字は、そのabbrevが展開された回数です。Emacsはこれを追跡することにより、実際に使用されているabbrevを調べて、ときどきしか使わないものを削除するのを助けます。行の最後の文字列はabbrevの展開結果です。

  @samp{(sys)}とマークされているabbrevもいくつかあります。これらは``system''のabbrevで、さまざまなモードにたいして事前に定義されており、ユーザーのabbrevファイルには保存されません(@ref{Abbrevs,,,
elisp, The Emacs Lisp Reference
Manual}を参照してください)。``system''のabbrevを無効にするには、同じ名前で展開結果がabbrev自身と同じになるabbrevを定義し、それをabbrevファイルに保存してください。

@findex edit-abbrevs
@kindex C-c C-c @r{(Edit Abbrevs)}
  @kbd{M-x
edit-abbrevs}を使うと、Emacsバッファーでabbrevのリストを編集することにより、abbrev定義の追加、変更、killができます。リストの書式は、上記で説明した書式を同じです。abbrevのバッファーは@file{*Abbrevs*}と呼ばれ、モードはEdit-Abbrevsモードです。このバッファーで@kbd{C-c
C-c}をタイプすると、そのバッファーで指定されたabbrev定義がインストールされ、リストに定義されていないabbrevは削除されます。

  コマンド@code{edit-abbrevs}は、実際には@code{list-abbrevs}と同じですが、@code{list-abbrevs}が単に@file{*Abbrevs*}を他のウィンドウに表示するのに比べ、このコマンドはそのバッファーを選択する点が異なります。

@node Saving Abbrevs
@section abbrevの保存

  以下のコマンドにより、編集セッション間でabbrev定義を維持できます。

@table @kbd
@item M-x write-abbrev-file @key{RET} @var{file} @key{RET}
すべてのabbrev定義の記述を、ファイル@var{file}に書き込みます。
@item M-x read-abbrev-file @key{RET} @var{file} @key{RET}
ファイル@var{file}を読み込み、そこで指定されているabbrevを定義します。
@item M-x define-abbrevs
カレントバッファーの定義からabbrevを定義します。
@item M-x insert-abbrevs
すべてのabbrevとそれらの展開結果を、カレントバッファーに挿入します。
@end table

@findex write-abbrev-file
  @kbd{M-x
write-abbrev-file}は、ミニバッファーを使用してファイル名を読み取り、すべてのカレントのabbrev定義の記述を、そのファイルに書き込みます。これは後のセッションで使用するために、abbrev定義を保存するのに使われます。ファイルに保存されるテキストは一連のLisp式で、それが実行されると保存したときと同じabbrevを定義します。

@findex read-abbrev-file
@findex quietly-read-abbrev-file
@vindex abbrev-file-name
@cindex abbrev file
  @kbd{M-x
read-abbrev-file}は、ミニバッファーを使用してファイル名を読み取り、ファイル内容に対応するabbrevを定義します。関数@code{quietly-read-abbrev-file}も同様ですが、これはエコーエリアにメッセージを表示しません。これを対話的に呼び出すことはできず、主にinitファイル(@ref{Init
File}を参照してください)で使用されます。どちらの関数も引数に@code{nil}が指定されると、変数@code{abbrev-file-name}で与えられるファイルを使用します。この変数のデフォルトは@file{~/.emacs.d/abbrev_defs}です。これは標準のabbrev定義ファイルで、Emacsは起動時にこのファイルから自動的にabbrevをロードします(例外としてEmacsがバッチモードで開始されたときはabbrevファイルをロードしません。バッチモードについての説明は、@ref{Initial
Options}を参照してください)。

@vindex save-abbrevs
  abbrevのどれかを変更した場合、Emacsは((@kbd{C-x s}や@kbd{C-x
C-c}などで)、すべてのファイルの保存するか尋ねるときにabbrevについても尋ねます。これは@code{abbrev-file-name}で指定したファイルに、それらを保存します。この機能は変数@code{save-abbrevs}を@code{nil}にセットすることにより抑止できます。

@findex insert-abbrevs
@findex define-abbrevs
  コマンド@kbd{M-x insert-abbrevs}および@kbd{M-x
define-abbrevs}は、前のコマンドと似ていますが、Emacsバッファーのテキストにたいして機能します。@kbd{M-x
insert-abbrevs}は、カレントのabbrev定義の記述をカレントバッファーのポイントの後ろにテキストとして挿入します。@kbd{M-x
define-abbrevs}は、カレントバッファー全体を解析して、対応するabbrevを定義します。

@node Dynamic Abbrevs
@section 動的abbrev展開

  上記で説明したabbrev機能は、テキストの挿入にしたがい自動的に処理されますが、すべてのabbrevを明示的に定義しなければなりません。対照的に、@dfn{動的abbrev(dynamic
abbrevs)}は、バッファーの内容から略語の展開結果を自動的に決定することができます、しかし動的abbrevの展開は、明示的に要求したときだけ行なわれます。

@kindex M-/
@kindex C-M-/
@findex dabbrev-expand
@findex dabbrev-completion
@table @kbd
@item M-/
バッファーのポイントの前の単語を@dfn{動的abbrev}として、その略語で始まる単語をバッファーから検索することにより展開します(@code{dabbrev-expand})。

@item C-M-/
ポイントの前の単語を動的abbrevとして補完します(@code{dabbrev-completion})。
@end table

@vindex dabbrev-limit
  たとえばバッファーが@samp{does this follow }が含んでいて、@kbd{f o
M-/}とタイプすると、これは@samp{follow}を挿入します。なぜならそれが@samp{fo}で始まる、そのバッファーの最後の単語だからです。@kbd{M-/}に数引数を指定すると、それはポイントから後方に検索して2番目、3番目、...の異なる展開結果を検索します。@kbd{M-/}を繰り返すと他の展開結果を後方に検索します。ポイントの前のテキストをすべて検索した後は、ポイントの後のテキストを検索します。変数@code{dabbrev-limit}が非@code{nil}の場合、それはバッファーの中で展開結果を探す範囲を指定します。

@vindex dabbrev-check-all-buffers
  カレントバッファーを検索した後、@code{dabbrev-check-all-buffers}を@code{nil}にセットしていなければ、通常@kbd{M-/}は他のバッファーを検索します。

@vindex dabbrev-ignored-buffer-regexps
  どのバッファーを検索するかを制御するには、変数@code{dabbrev-ignored-buffer-regexps}をカスタマイズします。この変数の値は正規表現のリストです。バッファー名がこれらの正規表現のどれかにマッチした場合、動的abbrev展開はそのバッファーをスキップします。

  @kbd{C-u -
M-/}のように@kbd{M-/}に負の引数を指定すると、これは最初にポイントの後ろの展開結果を検索し、その後は他のバッファーを検索し、ポイントの前の展開結果は最後に報告します。他の展開結果を探すために@kbd{M-/}を繰り返す場合は、引数に何もしていしないでください。@kbd{M-/}を繰り返すことにより、ポイントの後、その後はポイントの前の展開結果を巡回します。

  動的abbrevを展開した後、その展開結果の元のコンテキストで展開結果の後ろに続く、追加の単語をコピーすることができます。コピーしたい追加の単語ごとに、単に@kbd{@key{SPC}
M-/}とタイプします。単語間のスペースおよび区切り文字は、単語とともにコピーされます。

  コマンド@kbd{C-M-/}
(@code{dabbrev-completion})は、動的abbrevの補完を行ないます。利用可能な展開結果を1つずつ試すかわりに、これはすべてを検索して、それらがもつ共通のテキストを挿入します。共通部分がない場合、@kbd{C-M-/}は、通常の方法で選択することができる補完リストを表示します。@ref{Completion}を参照してください。

  動的abbrev展開は、Abbrevモードとは完全に独立しています。@kbd{M-/}での単語の展開は、その単語が通常のabbrevとして定義されていることとは無関係です。

@node Dabbrev Customization
@section 動的abbrevのカスタマイズ

  動的abbrev展開は通常、展開結果の検索で大文字小文字を無視します。したがって、展開結果と展開する単語は、大文字小文字が一致する必要はありません。

@vindex dabbrev-case-fold-search
  この機能は変数@code{dabbrev-case-fold-search}により制御されます。この値が@code{t}の場合、検索で大文字小文字は無視されます。@code{nil}の場合、単語と展開結果は大文字小文字が一致していなければなりません。値が@code{case-fold-search}(デフォルト)の場合、変数@code{case-fold-search}が展開結果の検索で、大文字小文字を無視するかどうかを制御します(@ref{Search
Case}を参照してください)。

@vindex dabbrev-case-replace
  動的abbrev展開は通常、大文字小文字のパターンにしたがって展開結果を変換することにより、@emph{展開する動的abbrev}の大文字小文字のパターンを維持します。

@vindex dabbrev-case-fold-search
  変数@code{dabbrev-case-replace}は、動的abbrevの大文字小文字のパターンを維持するかどうかを制御します。この値が@code{t}の場合、動的abbrevの大文字小文字のパターンはほとんどのケースで維持されます。@code{nil}の場合、展開結果は常にそのままコピーされます。値が@code{case-replace}(デフォルト)の場合、変数@code{case-replace}が展開結果をそのままコピーするかどうかを制御します(@ref{Replacement
and Case}を参照してください)。

  しかし、展開結果が複雑にミックスされた大文字小文字のパターンを含む場合、そして動的abbrevがそのパターンにある程度マッチする場合、これらの変数の値にかかわらず、展開結果は常にそのままコピーされます。したがって、たとえばバッファーが@code{variableWithSillyCasePattern}というテキストを含む場合、@kbd{v
a M-/}とタイプすると、大文字小文字のパターンを含めて展開結果をコピーします。

@vindex dabbrev-abbrev-char-regexp
  変数@code{dabbrev-abbrev-char-regexp}が非@code{nil}の場合、これは動的展開の目的のために、どの文字を単語の一部とするかを制御します。正規表現は2文字以上ではなく、ただ1文字だけにマッチしなければなりません。同じ正規表現が、どの文字が展開結果の一部となるかも決定します。値が@code{nil}の場合は特別な意味をもちます。動的abbrevは単語構成文字から構成されますが、展開結果は単語とシンボル文字から構成されます。

@vindex dabbrev-abbrev-skip-leading-regexp
  シェルスクリプトおよびmakefileでは、変数名にプレフィクス@samp{$}があるときと、ないときがあります。このタイプのテキストのためのメジャーモードは、オプションのプレフィクスを扱うために、変数@code{dabbrev-abbrev-skip-leading-regexp}をセットして、動的abbrev展開をカスタマイズできます。この値には、動的abbrev展開が無視すべきオプションのプレフィクスにマッチする正規表現を指定します。
