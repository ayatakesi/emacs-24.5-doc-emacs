@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2000-2015 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Buffers
@chapter Using Multiple Buffers

@cindex buffers
  Emacsで編集するテキストは、@dfn{バッファー(buffer)}と呼ばれるオブジェクトの中に存在します。ファイルをvisitするたびに、そのファイルのテキストを保持するために、バッファーが使われます。Diredを呼び出すたびに、ディレクトリーリストを保持するためにバッファーが使われます。@kbd{C-x
m}でメッセージを送信すると、メッセージのテキストを保持するためにバッファーが使われます。コマンドのドキュメントは、@file{*Help*}という名前のバッファーに表示されます。

  それぞれのバッファーは、任意の長さの一意な名前を持っています。バッファーがウインドウに表示されているとき、バッファーの名前はモードライン(@ref{Mode
Line}を参照してください)に表示されます。バッファー名での大文字と小文字の違いは重要です。ほとんどの場合、ほとんどのバッファーはvisitしているファイルから作られ、それらの名前はファイル名から生成されます。しかし、新しい空のバッファーを、任意の名前で作成することもできます。新しく開始されたEmacsにはいくつかのバッファーがあり、それらの中には@file{*scratch*}という名前の、Lisp式を評価するのに使用されるバッファーも含まれます。そのバッファーはファイルに関連付けられていません(@ref{Lisp
Interaction}を参照してください)。

@cindex selected buffer
@cindex current buffer
  @dfn{選択}されるバッファーは、常に1つだけです。そのバッファーを@dfn{カレントバッファー(current buffer:
現在のバッファー)}と呼びます。「コマンドは``そのバッファー(the
buffer)''を操作します」という言い方をするときがあります。これはカレントバッファーを操作するというのが、本当の意味です。Emacsのウィンドウが1つだけのとき、そのウィンドウに表示されているバッファーがカレントになります。複数のウィンドウがあるとき、@dfn{選択されたウィンドウ}に表示されているバッファーがカレントになります。@ref{Windows}を参照してください。

  バッファーのテキスト的な内容は別として、それぞれのバッファーはいくつかの情報を記録しています。それらは、(もしあれば)visitしているファイルは何か、変更されているか、有効なメジャーモードとマイナーモードは何か(@ref{Modes}を参照してください)、などの情報です。これらは、@dfn{バッファーローカルな変数(buffer-local
variables)}に格納され、これらの変数はバッファーごとに異なる値をもつことができます。@ref{Locals}を参照してください。

@cindex buffer size, maximum
  バッファーのサイズは、いくつかの最大値を超えて大きくすることはできません。これは一番大きいバッファーの位置が、@dfn{Emacsの整数(Emacs
integers)}で表されることにより定義されます。なぜならEmacsはそのデータ型を使用して、バッファーの位置を追跡するからです。通常の64ビットマシンでは、バッファーの最大サイズは@math{2^{61}
- 2}バイト、およそ2EiBです。通常の32ビットマシンでは、バッファーの最大サイズは通常@math{2^{29} -
2}バイト、およそ512MiBです。バッファーのサイズはシステムのメモリー量によっても制限されます。

@menu
* Select Buffer::            新しいバッファーの作成と既存のバッファーの再選択。
* List Buffers::             既存のバッファーリストの取得。
* Misc Buffer::              リネーム、読み取り専用属性の変更、テキストのコピー。
* Kill Buffer::              不必要なバッファーのkill。
* Several Buffers::          すべてのバッファーにたいするリストの操作と、複数バッファーにたいする操作。
* Indirect Buffers::         他のバッファーのテキストを共有するインダイレクトバッファー。
* Buffer Convenience::       バッファー操作のための便利な機能とカスタマイズ。
@end menu

@node Select Buffer
@section Creating and Selecting Buffers
@cindex change buffers
@cindex switch buffers

@table @kbd
@item C-x b @var{buffer} @key{RET}
@var{buffer}という名前のバッファーを、選択または作成します(@code{switch-to-buffer})。
@item C-x 4 b @var{buffer} @key{RET}
同様ですが、他のウィンドウで@var{buffer}を選択します(@code{switch-to-buffer-other-window})。
@item C-x 5 b @var{buffer} @key{RET}
同様ですが、別のフレームで@var{buffer}を選択します(@code{switch-to-buffer-other-frame})。
@item C-x @key{LEFT}
バッファーリストの、前のバッファーを選択します(@code{previous-buffer})。
@item C-x @key{RIGHT}
バッファーリストの、次のバッファーを選択します(@code{next-buffer})。
@item C-u M-g M-g
@itemx C-u M-g g
数字@var{n}を読み取って、カレントバッファーではない、一番最近選択されたバッファーの、@var{n}行目に移動します。
@end table

@kindex C-x b
@findex switch-to-buffer
  @kbd{C-x b}
(@code{switch-to-buffer})コマンドは、ミニバッファーを使ってバッファー名を読み取ります。それからそのバッファーをカレントとして、現在選択されたウィンドウに表示します。空の入力は、そのとき他のウィンドウに表示されていない、一番最近カレントだったバッファーを指定します。

  バッファー名を入力するとき、通常の補完とヒストリーコマンドを使うことができます(@ref{Minibuffer}を参照してください)。@kbd{C-x
b}および関連するコマンドは、ミニバッファーの補完に、``確認つきの寛大な補完(permissive completion with
confirmation)''を使うことに注意してください。存在しないバッファー名にたいする補完の後、すぐに@key{RET}をタイプすると、Emacsは@samp{[Confirm]}を出力し、バッファー名を確定するために2回目の@key{RET}をタイプしなければなりません。詳細は、@ref{Completion
Exit}を参照してください。

  存在しないバッファーを指定すると、@kbd{C-x
b}はファイルをvisitしていない新しい空のバッファーを作成し、編集用にそのバッファーを選択します。変数@code{major-mode}は、新しいバッファーのメジャーモードのデフォルトを決定します。デフォルトでは、これはFundamentalモードです。@ref{Major
Modes}を参照してください。新しいバッファーを作る1つの理由は、それを一時的なノートとして使うためです。これを保存しようと試みると、Emacsは保存に使うファイル名を尋ね、バッファーのメジャーモードは、ファイル名にもとづきメジャーモードを再割り当てします(@ref{Choosing
Modes}を参照してください)。

@kindex C-x @key{LEFT}
@kindex C-x @key{RIGHT}
@findex next-buffer
@findex previous-buffer
  少ないバッファーの切り替えでは、コマンド@kbd{C-x @key{LEFT}}および@kbd{C-x
@key{RIGHT}}を使うのが便利です。@kbd{C-x @key{LEFT}}
(@code{previous-buffer})は前のバッファー(現在のフレームの一番最近選択されたバッファー順)、@kbd{C-x
@key{RIGHT}} (@code{next-buffer})は逆方向のバッファーに移動します。

@kindex C-x 4 b
@findex switch-to-buffer-other-window
  現在のウィンドウとは別のウィンドウにバッファーを選択するには、@kbd{C-x 4 b}
(@code{switch-to-buffer-other-window})とタイプします。これはミニバッファーを使ってバッファー名の入力を求め、選択されているウィンドウではない別のウィンドウに、そのバッファーを表示します。

@kindex C-x 5 b
@findex switch-to-buffer-other-frame
  同様に@kbd{C-x 5 b}
(@code{switch-to-buffer-other-frame})はバッファー名の入力を求め、他のフレームにそのバッファーを表示して、そのフレームを選択します。他のウィンドウまたはフレームにすでにバッファーが表示されている場合、Emacsは新しく作成するのではなく、そのウィンドウまたはフレームを選択します。

  @kbd{C-x 4 b}および@kbd{C-x 5
b}コマンドが表示するウィンドウまたはフレームを取得する方法については、@ref{Displaying Buffers}を参照してください。

  これらに加えて、@kbd{C-x
C-f}や、その他のファイルをvisitするコマンドでも、すでにファイルをvisitしているバッファーに切り替えることができます。@ref{Visiting}を参照してください。

@findex goto-line
  プレフィクス引数だけを指定した@kbd{C-u M-g M-g}
@code{goto-line}は、ミニバッファーを使って数字@var{n}を読み取り、別のウィンドウにあるカレントバッファー以外の、一番最近選択されたバッファーを選択して、ポイントをそのバッファーの@var{n}行目の先頭に移動します。これは他のバッファーの行番号を参照するバッファーで特に有用です。ポイントが数字の直後にある場合、@code{goto-line}は@var{n}のデフォルトとしてその数字を使います。ただの@kbd{C-u}ではないプレフィクス引数では、異なる振る舞いをすることに注意してください。@kbd{C-u
4 M-g
M-g}はミニバッファーから数字を読み取らず、@emph{カレントバッファー}の4行目にジャンプします(プレフィクス引数を指定しない@kbd{M-g
M-g}は、数字@var{n}を読み取ってカレントバッファーの@var{n}行目に移動することを思い出してください。@ref{Moving
Point}を参照してください)。

  Emacsはスペースで開始される名前のバッファーを、内部的な用途のために使用しています。それらのバッファーは特別な方法で扱われます。たとえば、それらのバッファーではundo情報が記録されません。そのようなバッファー名を使うことは避けるのが最良です。

@node List Buffers
@section Listing Existing Buffers

@table @kbd
@item C-x C-b
既存のバッファーをリストします(@code{list-buffers})。
@end table

@cindex listing current buffers
@kindex C-x C-b
@findex list-buffers
  既存のバッファーのリストを表示するには、@kbd{C-x
C-b}とタイプします。リストの各行にはバッファー名、サイズ、メジャーモード、visitしているファイルが表示されます。バッファーは、カレントだった順でリストされます。したがって、一番最近カレントだったバッファーが先頭に表示されます。

  行の最初のフィールドの@samp{.}は、そのバッファーがカレントであることを示します。@samp{%}は読み取り専用バッファーであることを示します。@samp{*}はそのバッファーが``変更''されていることを示します。いくつかのバッファーが変更されていて、それらを保存するべきだと思ったときは、@kbd{C-x
s} (@ref{Save Commands}を参照してください)で保存します。以下はバッファーリストの例です:

@smallexample
CRM Buffer                Size  Mode              File
. * .emacs                3294  Emacs-Lisp        ~/.emacs
 %  *Help*                 101  Help
    search.c             86055  C                 ~/cvs/emacs/src/search.c
 %  src                  20959  Dired by name     ~/cvs/emacs/src/
  * *mail*                  42  Mail
 %  HELLO                 1607  Fundamental       ~/cvs/emacs/etc/HELLO
 %  NEWS                481184  Outline           ~/cvs/emacs/etc/NEWS
    *scratch*              191  Lisp Interaction
  * *Messages*            1554  Messages
@end smallexample

@noindent
この例でバッファー@file{*Help*}は、ヘルプを要求されたことにより作成されます(@ref{Help}を参照してください)。これはファイルをvisitしていません。バッファー@code{src}は、ディレクトリー@file{~/cvs/emacs/src/}にたいして、Diredが作成したバッファーです。ファイルをvisitしているバッファーだけを一覧するには、@kbd{C-u
C-x C-b}のように、コマンドにプレフィクス引数を与えます。

  @code{list-buffers}は名前がスペースで始まるバッファーを省略します(そのバッファーがファイルをvisitしていない限り)。これらのバッファーは、Emacsにより内部的に使用されます。

@node Misc Buffer
@section Miscellaneous Buffer Operations

@table @kbd
@item C-x C-q
バッファーの読み取り専用の状態を切り替えます(@code{read-only-mode})。
@item M-x rename-buffer @key{RET} @var{name} @key{RET}
カレントバッファーの名前を変更します。
@item M-x rename-uniquely
カレントバッファーの末尾に@samp{<@var{number}>}を加えてリネームします。
@item M-x view-buffer @key{RET} @var{buffer} @key{RET}
バッファー@var{buffer}をスクロールして閲覧します。@ref{View Mode}を参照してください。
@end table

@kindex C-x C-q
@vindex buffer-read-only
@cindex read-only buffer
  バッファーを読み取り専用にすることができます、これは内容を変更するコマンドが許されないことを意味します。読み取り専用バッファーのモードラインでは、左余白の近くに@samp{%%}または@samp{%*}が表示されます。読み取り専用バッファーは通常DiredやRmailのように、そのバッファーのテキストを操作する専用コマンドをもつ、サブシステムにより作成されます。アクセスコントロールにより制御されているファイルをvisitしたときも、書き込めない旨が通知されます。

@findex read-only-mode
@vindex view-read-only
 コマンド@kbd{C-x C-q}
(@code{read-only-mode})は、読み取り専用バッファーを書き込み可能に、書き込み可能なバッファーを読み取り専用にします。これは各バッファーにローカルな変数@code{buffer-read-only}をセットすることにより機能します(値が非@code{nil}のときバッファーは読み取り専用)。オプション@code{view-read-only}を非@code{nil}値に変更すると、@kbd{C-x
C-q}でバッファーを読み取り専用にしたとき、そのバッファーでViewモードが有効になります(@ref{View Mode}を参照してください)。

@findex rename-buffer
  @kbd{M-x
rename-buffer}は、カレントバッファーの名前をリネームします。新しい名前はミニバッファーで指定します。デフォルトはありません。他のバッファーで使用済の名前を指定するとエラーとなり、リネームされません。

@findex rename-uniquely
  @kbd{M-x
rename-uniquely}は、カレントバッファーの後ろに数字を追加して、似てはいるが異なる名前を作成します。このコマンドに引数は必要ありません。これは複数のshellバッファーを作成するのに便利です。@file{*shell*}バッファーをリネームしてから、再度@kbd{M-x
shell}を行うと、これは新しく@file{*shell*}という名前のバッファーを作成します。一方リネームされた古いshellバッファーは、新しい名前で実行を続けます。この方法はmailバッファー、compilationバッファー、そして特定の名前で特別なバッファーを作成するEmacs機能に適しています(これらの機能のいくつか、たとえば@kbd{M-x
compile}、@kbd{M-x
grep}などでは、コマンドを再度実行する前に他のバッファーに切り替える必要があります。さもないとカレントバッファーの名前を変更せずに、そのバッファーを再使用します)。

  コマンド@kbd{M-x append-to-buffer}および@kbd{M-x
insert-buffer}も、あるバッファーから他のバッファーへテキストをコピーするのに使用できます。@ref{Accumulating
Text}を参照してください。

@node Kill Buffer
@section Killing Buffers

@cindex killing buffers
@cindex close buffer
@cindex close file
  しばらくの間、Emacsセッションを続けていると、多くのバッファーが溜まってしまう場合があります。必要のないバッファーを@dfn{kill}したほうがよいと思うかもしれません(他のエディターではこの操作を@dfn{close(閉じる)}と呼び、``バッファーを閉じる''とか、ファイルをvisitしているバッファーでは``ファイルを閉じる''のように表現するものもあります)。ほとんどのオペレーティングシステムでは、バッファーをkillすることにより、そのスペースをオペレーティングシステムに返却するので、他のプログラムがそれを使えるようになります。以下はバッファーをkillするコマンドです:

@table @kbd
@item C-x k @var{bufname} @key{RET}
バッファー@var{bufname}をkillします(@code{kill-buffer})。
@item M-x kill-some-buffers
バッファーを1つずつkillするか尋ねます。
@item M-x kill-matching-buffers
正規表現にマッチするすべてのバッファーをkillするか尋ねます。
@end table

@findex kill-buffer
@kindex C-x k
  @kbd{C-x k}
(@code{kill-buffer})は、ミニバッファーで指定した名前のバッファーを1つkillします。@key{RET}だけをタイプしたときはデフォルトが使われ、これはカレントバッファーをkillします。カレントバッファーをkillすると、最近カレントだったが、今は別のウィンドウにも表示されていないバッファーがカレントになります。ファイルをvisitしているバッファーが変更されているとき、それをkillしようとすると確認を求められます。そのバッファーをkillする前に、確認に@kbd{yes}を応えなければkillできません。

@findex kill-some-buffers
  コマンド@kbd{M-x
kill-some-buffers}は、各バッファーについて1つずつ確認を求めます。@kbd{y}と応えると、@code{kill-buffer}と同様にバッファーをkillすることを意味します。このコマンドは名前がスペースで始まる、Emacsが内部的に使用するバッファーは無視します。

@findex kill-matching-buffers
  コマンド@kbd{M-x
kill-matching-buffers}は、正規表現の入力を求め、名前がその正規表現にマッチするすべてのバッファーをkillします。@xref{Regexps}を参照してください。@code{kill-some-buffers}と同様、このコマンドはkillする前に確認を求めます。このコマンドは通常、名前がスペースで始まる、Emacsが内部的に使うバッファーを無視します。内部的なバッファーも同じようにkillするには、プレフィクス引数を指定して@code{kill-matching-buffers}を呼び出します。

  さまざまなバッファーをkillするにはBuffer Menu機能も便利です。@ref{Several Buffers}を参照してください。

@vindex kill-buffer-hook
  バッファーがkillされるときに特別な処理を行いたい場合、フック@code{kill-buffer-hook}にフック関数を追加できます(@ref{Hooks}を参照してください)。

@findex clean-buffer-list
  (多くの人がそうしているように)何日間も1つのEmacsセッションを使っていると、何日か前に使ったバッファーが溜まってくるかもしれません。コマンド@kbd{M-x
clean-buffer-list}は、それらを一掃するのに便利です。これは長い間使用されていない、変更されていないバッファーをすべてkillします。3日間表示されていない普通のバッファーはkillされます。しかし自動的にkillされるべきではない特定のバッファーを指定したり、使われていない時間が短いバッファーでもkillするように指定できます。

@cindex Midnight mode
@vindex midnight-mode
@vindex midnight-hook
  Midnightモードを有効にすることにより、1日ごとにバッファーを一掃することもできます。Midnightモードは毎日真夜中に@code{clean-buffer-list}、またはノーマルフック@code{midnight-hook}に指定された関数を実行します(@ref{Hooks}を参照してください)。Midnightモードを有効にするには、Customizationバッファーを使って変数@code{midnight-mode}を@code{t}にセットします。@ref{Easy
Customization}を参照してください。

@node Several Buffers
@section Operating on Several Buffers
@cindex Buffer Menu

@table @kbd
@item M-x buffer-menu
すべてのEmacsバッファーの、バッファーリストの編集を開始します。
@item M-x buffer-menu-other-window.
同様ですが、別のウィンドウで行います。
@end table

  @kbd{C-x C-b} (@ref{List Buffers}を参照してください)でオープンされる@dfn{Buffer
Menu}は、単にバッファーを一覧するだけではありません。これはDiredに似たインターフェースで、バッファーにたいしてさまざまな操作を行うことができます。ここでは、バッファーの保存、kill(Diredとの一貫性を保つため、ここではそれらを@dfn{削除(delete)}する、と呼びます)、表示ができます。

@findex buffer-menu
@findex buffer-menu-other-window
  Buffer Menuを使うには@kbd{C-x C-b}とタイプして、@file{*Buffer
List*}バッファーが表示されたウィンドウに切り替えます。@kbd{M-x buffer-menu}とタイプして、選択されたウィンドウにBuffer
Menuを開くこともできます。コマンド@kbd{M-x buffer-menu-other-window}は、Buffer
Menuを別のウィンドウに開いて、そのウィンドウを選択します。

  Buffer
Menuは読み取り専用バッファーで、このセクションで説明する特別なコマンドだけを通じて変更します。このバッファーでは、通常のカーソル移動コマンドを使うことができます。以下のコマンドは、バッファーのカレント行に適用されます。

@table @kbd
@item d
@findex Buffer-menu-delete
@kindex d @r{(Buffer Menu)}
そのバッファーの削除(kill)フラグをセットしてから、ポイントを次の行に移動します(@code{Buffer-menu-delete})。削除フラグは、各行のバッファー名の前の文字@samp{D}により示されます。削除は@kbd{x}コマンド(以下参照)をタイプしたときだけ発生します。

@item C-d
@findex Buffer-menu-delete-backwards
@kindex C-d @r{(Buffer Menu)}
@kbd{d}と同様ですが、ポイントを下ではなく上に移動します(@code{Buffer-menu-delete-backwards})。

@item s
@findex Buffer-menu-save
@kindex s @r{(Buffer Menu)}
そのバッファーの保存フラグをセットします(@code{Buffer-menu-save})。保存フラグは各行のバッファー名の前の文字@samp{S}により示されます。保存は@kbd{x}コマンド(以下参照)をタイプしたときだけ発生します。同じバッファーに保存と削除の両方をリクエストできます。

@item x
@findex Buffer-menu-execute
@kindex x @r{(Buffer Menu)}
すべての削除および保存フラグを処理します(@code{Buffer-menu-execute})。

@item u
@findex Buffer-menu-unmark
@kindex u @r{(Buffer Menu)}
カレント行のすべてのフラグを取り除いてから、下に移動します(@code{Buffer-menu-unmark})。

@item @key{DEL}
@findex Buffer-menu-backup-unmark
@kindex DEL @r{(Buffer Menu)}
前の行に移動して、その行のすべてのフラグを取り除きます(@code{Buffer-menu-backup-unmark})。
@end table

@noindent
フラグを追加または取り除くコマンド@kbd{d}、@kbd{C-d}、@kbd{s}、@kbd{u}には、すべて繰り返し回数として数引数を指定できます。

  以下のコマンドは、カレント行にリストされたバッファーを即座に処理します。これらのコマンドにも、繰り返し回数を数引数として指定できます。

@table @kbd
@item ~
@findex Buffer-menu-not-modified
@kindex ~ @r{(Buffer Menu)}
バッファーを変更されていない(unmodified)とマークします(@code{Buffer-menu-not-modified})。@ref{Save
Commands}を参照してください。

@item %
@findex Buffer-menu-toggle-read-only
@kindex % @r{(Buffer Menu)}
バッファーの読み取り専用属性を切り替えます(@code{Buffer-menu-toggle-read-only})。@ref{Misc
Buffer}を参照してください。

@item t
@findex Buffer-menu-visit-tags-table
@kindex % @r{(Buffer Menu)}
そのバッファーを、tagsテーブルとしてvisitします(@code{Buffer-menu-visit-tags-table})。@ref{Select
Tags Table}を参照してください。
@end table

  以下は、他のバッファーを選択するために使われるコマンドです:

@table @kbd
@item q
@findex quit-window
@kindex q @r{(Buffer Menu)}
Buffer Menuメニューを閉じます(@code{quit-window})。一番最近に表示されていたバッファーが、その場所に表示されます。

@item @key{RET}
@itemx f
@findex Buffer-menu-this-window
@kindex f @r{(Buffer Menu)}
@kindex RET @r{(Buffer Menu)}
そのウィンドウの@file{*Buffer
List*}バッファーを置き換えて。この行のバッファーを選択します(@code{Buffer-menu-this-window})。

@item o
@findex Buffer-menu-other-window
@kindex o @r{(Buffer Menu)}
@kbd{C-x 4 b}のように@file{*Buffer
List*}を表示したまま、その行のバッファーを他のウィンドウで選択します(@code{Buffer-menu-other-window})。

@item C-o
@findex Buffer-menu-switch-other-window
@kindex C-o @r{(Buffer Menu)}
この行のバッファーを他のウィンドウで表示しますが、選択はしません(@code{Buffer-menu-switch-other-window})。

@item 1
@findex Buffer-menu-1-window
@kindex 1 @r{(Buffer Menu)}
この行のバッファーを、フレーム全体のウィンドウで選択します(@code{Buffer-menu-1-window})。

@item 2
@findex Buffer-menu-2-window
@kindex 2 @r{(Buffer Menu)}
現在のフレームを2つのウィンドウにセットアップして、この行のバッファーを一方のウィンドウで選択し、もう一方のウィンドウに以前のカレントバッファー(@file{*Buffer
List*})は除く)を表示します(@code{Buffer-menu-2-window})。

@item b
@findex Buffer-menu-bury
@kindex b @r{(Buffer Menu)}
この行のバッファーを、リストの最後に移動します(@code{Buffer-menu-bury})。

@item m
@findex Buffer-menu-mark
@kindex m @r{(Buffer Menu)}
@kbd{v}コマンドで抜けるとき、この行のバッファーを他のウィンドウで表示されるようにマークします(@code{Buffer-menu-mark})。表示フラグは行の先頭に文字@samp{>}で示されます(1つのバッファーが削除と表示のフラグを両方もつことはないでしょう)。

@item v
@findex Buffer-menu-select
@kindex v @r{(Buffer Menu)}
この行のバッファーを選択し、@kbd{m}コマンドでフラグづけされたバッファーも他のウィンドウで表示します(@code{Buffer-menu-select})。バッファーにフラグをつけていないとき、このコマンドは@kbd{1}と等価です。
@end table

  以下はバッファーリスト全体に影響を与えるコマンドです:

@table @kbd
@item S
@findex tabulated-list-sort
@kindex S @r{(Buffer Menu)}
ポイントがある列の数値にしたがって、Buffer
Menu全体をソートします。数引数@var{n}を指定すると、@var{n}番目の列でソートします(@code{tabulated-list-sort})。

@item T
@findex Buffer-menu-toggle-files-only
@kindex T @r{(Buffer Menu)}
非ファイルバッファーを削除または再挿入します@code{Buffer-menu-toggle-files-only})。このコマンドは、そのようなバッファーがバッファーリストに含まれるか否かを切り替えます。
@end table

  バッファー@file{*Buffer
List*}は通常、バッファーの作成およびkillにより自動的に更新はされません(内容は単なるテキストです)。バッファーを作成・削除・リネームした場合、それが行われたか確かめるために@file{*Buffer
List*}を更新するには、@kbd{g} (@code{revert-buffer})とタイプします。このバッファーのAuto
Revertモードを有効にすれば、このバッファーが変更されたとマークされない限り、@code{auto-revert-interval}秒ごとに定期的に更新させることができます。Global
Auto
Revertモードは、@code{global-auto-revert-non-file-buffers}が非@code{nil}のときだけ、@file{*Buffer
List*}バッファーに適用されます。
@iftex
詳細は、@inforef{Autorevert,, emacs-xtra}を参照してください。
@end iftex
@ifnottex
詳細は、@ref{Autorevert, global-auto-revert-non-file-buffers}を参照してください。
@end ifnottex

@node Indirect Buffers
@section Indirect Buffers
@cindex indirect buffer
@cindex base buffer

  @dfn{インダイレクトバッファー(indirect buffer:
間接バッファー)}は、そのインダイレクトバッファーの@dfn{ベースバッファー(base buffer:
基底バッファー)}と呼ばれる、他のバッファーのテキストを共有します。ある点においては、ファイルに置けるシンボリックリンクの、バッファー版に例えることができます。

@table @kbd
@findex make-indirect-buffer
@item M-x make-indirect-buffer @key{RET} @var{base-buffer} @key{RET} @var{indirect-name} @key{RET}
ベースバッファー@var{base-buffer}の、インダイレクトバッファー@var{indirect-name}を作成します。
@findex clone-indirect-buffer
@item M-x clone-indirect-buffer @key{RET}
カレントバッファーの、インダイレクトバッファーを作成します。
@item C-x 4 c
@kindex C-x 4 c
@findex clone-indirect-buffer-other-window
カレントバッファーのインダイレクトバッファーを作成して、それを別のウィンドウで選択します(@code{clone-indirect-buffer-other-window})。
@end table

  インダイレクトバッファーのテキストは、常にベースバッファーのテキストと等しく、どちらかを編集すると、その変更はすぐにもう一方から見えるようになります。しかし他の観点では、インダイレクトバッファーとベースバッファーは、完全に分離されています。これらのバッファーは異なる名前、異なるポイント値、異なるナローイング、異なるマーカー、異なるメジャーモード、異なるローカル変数をもつことができます。

  インダイレクトバッファーはファイルをvisitできませんが、ベースバッファーはvisitできます。インダイレクトバッファーの保存を試みると、それは実際にはベースバッファーの保存として機能します。ベースバッファーをkillするとインダイレクトバッファーもkillされますが、インダイレクトバッファーのkillは、ベースバッファーに影響を与えません。

  インダイレクトバッファーの1つの使い方としては、アウトラインの複数の視点からの表示です。@ref{Outline Views}を参照してください。

@vindex clone-indirect-buffer-hook
  手早くインダイレクトバッファーを作成するには、コマンド@kbd{M-x
clone-indirect-buffer}を使う方法があります。これはカレントバッファーをベースバッファーとする、インダイレクトバッファーを作成して選択します。数引数を指定すると、インダイレクトバッファーの名前の入力を求めます。指定しない場合、カレントバッファー名の後ろに@samp{<@var{n}>}を付加した名前を使います。@kbd{C-x
4 c} (@code{clone-indirect-buffer-other-window})は、@kbd{M-x
clone-indirect-buffer}と同様に機能しますが、新しいバッファーを他のウィンドウで選択します。これらの関数はインダイレクトバッファーを作成した後、フック@code{clone-indirect-buffer-hook}を実行します。

  インダイレクトバッファーを作成する、より一般的な方法はコマンド@kbd{M-x
make-indirect-buffer}です。これはバッファー@var{base-buffer}から、名前が@var{indirect-name}のインダイレクトバッファーを作成します。これらの名前は、ミニバッファーを使って入力が求められます。

@node Buffer Convenience
@section Convenience Features and Customization of Buffer Handling

   このセクションではバッファーを切り替えをもっと便利にする、モードと機能をいくつか説明します。

@menu
* Uniquify::                 ディレクトリー部分でバッファー名を一意にする。
* Icomplete::                素早いミニバッファーの選択について。
* Buffer Menus::             バッファーメニューの設定。
@end menu

@node Uniquify
@subsection Making Buffer Names Unique

@cindex unique buffer names
@cindex directories in buffer names
  同じ名前のファイルを複数のバッファーでvisitしているとき、Emacsはバッファーに区別可能な名前をつけなければなりません。デフォルトの方法はファイルをディレクトリーの一部を後ろに追加する方法です。たとえば同時にファイル@file{/foo/bar/mumble/name}と@file{/baz/quux/mumble/name}をvisitしている場合、バッファーの名前は@samp{name<bar/mumble>}と@samp{name<quux/mumble>}になるでしょう。Emacsは名前を一意にするために必要な分だけ、ディレクトリー名の一部を追加します。

@vindex uniquify-buffer-name-style
  オプション@code{uniquify-buffer-name-style}をカスタマイズして、一意なバッファー名を構築するための異なるスタイルを選択することができます。

  命名方法@code{forward}は、バッファー名の先頭部分に、ファイルのディレクトリー名の一部を含めます。この方法を使うとファイル@file{/u/rms/tmp/Makefile}と@file{/usr/projects/zaphod/Makefile}をvisitしているバッファーの名前は、@samp{tmp/Makefile}と@samp{zaphod/Makefile}になるでしょう。

  対照的に命名方法@code{post-forward}は、バッファーを@samp{Makefile|tmp}および@samp{Makefile|zaphod}と名づけます。デフォルトの@code{post-forward-angle-brackets}は、@code{post-forward}と同様ですが、一意なパスを山形カッコ(angle
brackets)で囲います。命名方法@code{reverse}では、@samp{Makefile\tmp}および@samp{Makefile\zaphod}となります。@code{post-forward}と@code{reverse}の重要な違いは、2つのファイルを区別するのに1つのディレクトリ名では不足するときです。@code{reverse}はディレクトリー名を逆順にして命名するので、ファイル@file{/top/middle/file}は@samp{file\middle\top}となります。一方@code{post-forward}はディレクトリー名を正順でファイル名に追加するので@samp{file|top/middle}となります。@code{uniquify-buffer-name-style}が@code{nil}にセットされていると、バッファー名の後ろに単に@samp{<2>}、@samp{<3>}と加えることにより、バッファー名を作成します。

  タイプする前にバッファー名に@emph{注意}すれば、バッファー名にディレクトリー名を付加する方法に重要な違いはありません。しかしルールを知った経験豊富なユーザーは、それほど注意する必要はないでしょう。そして、その場合いずれかのルールでバッファー名が表示されていれば，思い出し利用するのが容易になることでしょう。

@node Icomplete
@subsection Fast minibuffer selection

@findex icomplete-mode
@cindex Icomplete mode

  グローバルなマイナーモードのIcompleteモードは、ミニバッファーで利用可能な補完候補を素早く選択する便利な方法を提供します。これが有効な場合、ミニバッファーでタイプすることにより、すでにタイプした文字にマッチする、利用可能な候補を連続で表示します。

  @kbd{C-j}とタイプすることにより、常にリストの最初の補完候補を選択できます。つまり特定の補完候補を選択するには、まずその候補をリストの先頭にすることです。これを行うには2つの方法があります。1つ目の方法は、補完候補の名前をさらにタイプすることにより、違う候補が含まれないように、希望する補完候補にリストを絞りこむ方法です。もう1つは@kbd{C-.}および@kbd{C-,}を使って、望む候補が先頭にくるまでリストをローテートする方法です。

  @kbd{M-@key{TAB}}は@kbd{C-j}のようにリストの最初の補完候補を選択しますが、ミニバッファーを抜けないので、さらに編集を続けることができます。これはファイル名の入力で通常使われます。@kbd{M-@key{TAB}}により、いくつかのディレクトリー階層をたどることができます。

  Icompleteモードを有効にするには、@kbd{M-x
icomplete-mode}とタイプするか、変数@code{icomplete-mode}を@code{t}にカスタマイズします(@ref{Easy
Customization}を参照してください)。

@node Buffer Menus
@subsection Customizing Buffer Menus

@findex bs-show
@cindex buffer list, customizable
@table @kbd
@item M-x bs-show
@kbd{M-x list-buffers}と同様にバッファーリストを作成しますが、カスタマイズが可能です。
@end table

  @kbd{M-x bs-show}は、通常@kbd{C-x
C-b}で表示されるのと同じようなバッファーリストを表示しますが、カスタマイズが可能です。通常のバッファーリストよりこちらのほうが好ましい場合、このコマンドを@kbd{C-x
C-b}にバインドできます。このバッファーリストをカスタマイズするには、Customグループの@code{bs}を使います(@ref{Easy
Customization}を参照してください)。

@findex msb-mode
@cindex mode, MSB
@cindex MSB mode
@findex mouse-buffer-menu
@kindex C-Down-Mouse-1
  MSBグローバルマイナーモード(``MSB''は``mouse select
buffer(マウス選択バッファー)''が由来)は、カスタマイズ可能なマウスによるBuffer
Menuを提供します。これは通常@kbd{C-Down-Mouse-1}にバインドされている@code{mouse-buffer-menu}と、Buffer
Menuのメニューを置き換えます。メニューはCustomグループ@code{msb}でカスタマイズが可能です。
