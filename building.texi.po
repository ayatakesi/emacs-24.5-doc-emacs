# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-06-25 01:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: building.texi.orig:5
#, no-wrap
msgid "Building"
msgstr ""

#. type: chapter
#: building.texi.orig:6
#, no-wrap
msgid "Compiling and Testing Programs"
msgstr ""

#. type: cindex
#: building.texi.orig:7
#, no-wrap
msgid "building programs"
msgstr ""

#. type: cindex
#: building.texi.orig:8
#, no-wrap
msgid "program building"
msgstr ""

#. type: cindex
#: building.texi.orig:9
#, no-wrap
msgid "running Lisp functions"
msgstr ""

#. type: Plain text
#: building.texi.orig:14
msgid ""
"The previous chapter discusses the Emacs commands that are useful for making "
"changes in programs.  This chapter deals with commands that assist in the "
"process of compiling and testing programs."
msgstr ""

#. type: node
#: building.texi.orig:31 building.texi.orig:33
#, no-wrap
msgid "Compilation"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Compiling programs in languages other than Lisp (C, Pascal, etc.)."
msgstr ""

#. type: section
#: building.texi.orig:31 building.texi.orig:133 building.texi.orig:134
#, no-wrap
msgid "Compilation Mode"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "The mode for visiting compiler errors."
msgstr ""

#. type: node
#: building.texi.orig:31 building.texi.orig:275
#, no-wrap
msgid "Compilation Shell"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Customizing your shell properly for use in the compilation buffer."
msgstr ""

#. type: node
#: building.texi.orig:31 building.texi.orig:331
#, no-wrap
msgid "Grep Searching"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Searching with grep."
msgstr ""

#. type: node
#: building.texi.orig:31 building.texi.orig:416
#, no-wrap
msgid "Flymake"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Finding syntax errors on the fly."
msgstr ""

#. type: node
#: building.texi.orig:31 building.texi.orig:446
#, no-wrap
msgid "Debuggers"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Running symbolic debuggers for non-Lisp programs."
msgstr ""

#. type: node
#: building.texi.orig:31 building.texi.orig:1289
#, no-wrap
msgid "Executing Lisp"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid ""
"Various modes for editing Lisp programs, with different facilities for "
"running the Lisp programs."
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Libraries: Lisp Libraries"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "How Lisp programs are loaded into Emacs."
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Eval: Lisp Eval"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Executing a single Lisp expression in Emacs."
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Interaction: Lisp Interaction"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Executing Lisp in an Emacs buffer."
msgstr ""

#. type: node
#: building.texi.orig:31 building.texi.orig:1563
#, no-wrap
msgid "External Lisp"
msgstr ""

#. type: menuentry
#: building.texi.orig:31
msgid "Communicating through Emacs with a separate Lisp."
msgstr ""

#. type: section
#: building.texi.orig:34
#, no-wrap
msgid "Running Compilations under Emacs"
msgstr ""

#. type: cindex
#: building.texi.orig:35
#, no-wrap
msgid "inferior process"
msgstr ""

#. type: cindex
#: building.texi.orig:36
#, no-wrap
msgid "make"
msgstr ""

#. type: cindex
#: building.texi.orig:37
#, no-wrap
msgid "compilation errors"
msgstr ""

#. type: cindex
#: building.texi.orig:38
#, no-wrap
msgid "error log"
msgstr ""

#. type: Plain text
#: building.texi.orig:43
msgid ""
"Emacs can run compilers for languages such as C and Fortran, feeding the "
"compilation log into an Emacs buffer.  It can also parse the error messages "
"and show you where the errors occurred."
msgstr ""

#. type: item
#: building.texi.orig:45
#, no-wrap
msgid "M-x compile"
msgstr ""

#. type: table
#: building.texi.orig:48
msgid ""
"Run a compiler asynchronously under Emacs, with error messages going to the "
"@file{*compilation*} buffer."
msgstr ""

#. type: item
#: building.texi.orig:48
#, no-wrap
msgid "M-x recompile"
msgstr ""

#. type: table
#: building.texi.orig:51
msgid ""
"Invoke a compiler with the same command as in the last invocation of "
"@kbd{M-x compile}."
msgstr ""

#. type: item
#: building.texi.orig:51
#, no-wrap
msgid "M-x kill-compilation"
msgstr ""

#. type: table
#: building.texi.orig:53
msgid "Kill the running compilation subprocess."
msgstr ""

#. type: findex
#: building.texi.orig:55
#, no-wrap
msgid "compile"
msgstr ""

#. type: Plain text
#: building.texi.orig:63
msgid ""
"To run @code{make} or another compilation command, type @kbd{M-x compile}.  "
"This reads a shell command line using the minibuffer, and then executes the "
"command by running a shell as a subprocess (or @dfn{inferior process}) of "
"Emacs.  The output is inserted in a buffer named @file{*compilation*}.  The "
"current buffer's default directory is used as the working directory for the "
"execution of the command; normally, therefore, compilation takes place in "
"this directory."
msgstr ""

#. type: vindex
#: building.texi.orig:64
#, no-wrap
msgid "compile-command"
msgstr ""

#. type: Plain text
#: building.texi.orig:74
msgid ""
"The default compilation command is @samp{make -k}, which is usually correct "
"for programs compiled using the @command{make} utility (the @samp{-k} flag "
"tells @command{make} to continue compiling as much as possible after an "
"error).  @xref{Top,, Make, make, GNU Make Manual}.  If you have done "
"@kbd{M-x compile} before, the command that you specified is automatically "
"stored in the variable @code{compile-command}; this is used as the default "
"the next time you type @kbd{M-x compile}.  A file can also specify a "
"file-local value for @code{compile-command} (@pxref{File Variables})."
msgstr ""

#. type: Plain text
#: building.texi.orig:85
msgid ""
"Starting a compilation displays the @file{*compilation*} buffer in another "
"window but does not select it.  While the compilation is running, the word "
"@samp{run} is shown in the major mode indicator for the @file{*compilation*} "
"buffer, and the word @samp{Compiling} appears in all mode lines.  You do not "
"have to keep the @file{*compilation*} buffer visible while compilation is "
"running; it continues in any case.  When the compilation ends, for whatever "
"reason, the mode line of the @file{*compilation*} buffer changes to say "
"@samp{exit} (followed by the exit code: @samp{[0]} for a normal exit), or "
"@samp{signal} (if a signal terminated the process)."
msgstr ""

#. type: Plain text
#: building.texi.orig:92
msgid ""
"If you want to watch the compilation transcript as it appears, switch to the "
"@file{*compilation*} buffer and move point to the end of the buffer.  When "
"point is at the end, new compilation output is inserted above point, which "
"remains at the end.  Otherwise, point remains fixed while compilation output "
"is added at the end of the buffer."
msgstr ""

#. type: cindex
#: building.texi.orig:93
#, no-wrap
msgid "compilation buffer, keeping point at end"
msgstr ""

#. type: vindex
#: building.texi.orig:94
#, no-wrap
msgid "compilation-scroll-output"
msgstr ""

#. type: Plain text
#: building.texi.orig:101
msgid ""
"If you change the variable @code{compilation-scroll-output} to a "
"non-@code{nil} value, the @file{*compilation*} buffer scrolls automatically "
"to follow the output.  If the value is @code{first-error}, scrolling stops "
"when the first error appears, leaving point at that error.  For any other "
"non-@code{nil} value, scrolling continues until there is no more output."
msgstr ""

#. type: findex
#: building.texi.orig:102
#, no-wrap
msgid "recompile"
msgstr ""

#. type: Plain text
#: building.texi.orig:109
msgid ""
"To rerun the last compilation with the same command, type @kbd{M-x "
"recompile}.  This reuses the compilation command from the last invocation of "
"@kbd{M-x compile}.  It also reuses the @file{*compilation*} buffer and "
"starts the compilation in its default directory, which is the directory in "
"which the previous compilation was started."
msgstr ""

#. type: findex
#: building.texi.orig:110
#, no-wrap
msgid "kill-compilation"
msgstr ""

#. type: vindex
#: building.texi.orig:111
#, no-wrap
msgid "compilation-always-kill"
msgstr ""

#. type: Plain text
#: building.texi.orig:120
msgid ""
"Starting a new compilation also kills any compilation already running in "
"@file{*compilation*}, as the buffer can only handle one compilation at any "
"time.  However, @kbd{M-x compile} asks for confirmation before actually "
"killing a compilation that is running; to always automatically kill the "
"compilation without asking, change the variable "
"@code{compilation-always-kill} to @code{t}.  You can also kill a compilation "
"process with the command @kbd{M-x kill-compilation}."
msgstr ""

#. type: Plain text
#: building.texi.orig:125
msgid ""
"To run two compilations at once, start the first one, then rename the "
"@file{*compilation*} buffer (perhaps using @code{rename-uniquely}; "
"@pxref{Misc Buffer}), then switch buffers and start the other compilation.  "
"This will create a new @file{*compilation*} buffer."
msgstr ""

#. type: vindex
#: building.texi.orig:126
#, no-wrap
msgid "compilation-environment"
msgstr ""

#. type: Plain text
#: building.texi.orig:132
msgid ""
"You can control the environment passed to the compilation command with the "
"variable @code{compilation-environment}.  Its value is a list of environment "
"variable settings; each element should be a string of the form "
"@code{\"@var{envvarname}=@var{value}\"}.  These environment variable "
"settings override the usual ones."
msgstr ""

#. type: cindex
#: building.texi.orig:136
#, no-wrap
msgid "Compilation mode"
msgstr ""

#. type: cindex
#: building.texi.orig:137
#, no-wrap
msgid "mode, Compilation"
msgstr ""

#. type: cindex
#: building.texi.orig:138
#, no-wrap
msgid "locus"
msgstr ""

#. type: Plain text
#: building.texi.orig:145
msgid ""
"The @file{*compilation*} buffer uses a major mode called Compilation mode.  "
"Compilation mode turns each error message in the buffer into a hyperlink; "
"you can move point to it and type @key{RET}, or click on it with the mouse "
"(@pxref{Mouse References}), to visit the @dfn{locus} of the error message in "
"a separate window.  The locus is the specific position in a file where that "
"error occurred."
msgstr ""

#. type: findex
#: building.texi.orig:146
#, no-wrap
msgid "compile-goto-error"
msgstr ""

#. type: vindex
#: building.texi.orig:147
#, no-wrap
msgid "compilation-auto-jump-to-first-error"
msgstr ""

#. type: Plain text
#: building.texi.orig:152
msgid ""
"If you change the variable @code{compilation-auto-jump-to-first-error} to a "
"non-@code{nil} value, Emacs automatically visits the locus of the first "
"error message that appears in the @file{*compilation*} buffer."
msgstr ""

#. type: Plain text
#: building.texi.orig:157
msgid ""
"Compilation mode provides the following additional commands.  These commands "
"can also be used in @file{*grep*} buffers, where the hyperlinks are search "
"matches rather than error messages (@pxref{Grep Searching})."
msgstr ""

#. type: kindex
#: building.texi.orig:159 building.texi.orig:184
#, no-wrap
msgid "M-g M-n"
msgstr ""

#. type: kindex
#: building.texi.orig:160 building.texi.orig:185
#, no-wrap
msgid "M-g n"
msgstr ""

#. type: kindex
#: building.texi.orig:161 building.texi.orig:186
#, no-wrap
msgid "C-x `"
msgstr ""

#. type: table
#: building.texi.orig:163
msgid "Visit the locus of the next error message or match (@code{next-error})."
msgstr ""

#. type: item
#: building.texi.orig:163
#, no-wrap
msgid "M-g M-p"
msgstr ""

#. type: itemx
#: building.texi.orig:164
#, no-wrap
msgid "M-g p"
msgstr ""

#. type: table
#: building.texi.orig:167
msgid ""
"Visit the locus of the previous error message or match "
"(@code{previous-error})."
msgstr ""

#. type: item
#: building.texi.orig:167
#, no-wrap
msgid "M-n"
msgstr ""

#. type: table
#: building.texi.orig:170
msgid ""
"Move point to the next error message or match, without visiting its locus "
"(@code{compilation-next-error})."
msgstr ""

#. type: item
#: building.texi.orig:170
#, no-wrap
msgid "M-p"
msgstr ""

#. type: table
#: building.texi.orig:173
msgid ""
"Move point to the previous error message or match, without visiting its "
"locus (@code{compilation-previous-error})."
msgstr ""

#. type: item
#: building.texi.orig:173
#, no-wrap
msgid "M-@}"
msgstr ""

#. type: table
#: building.texi.orig:176
msgid ""
"Move point to the next error message or match occurring in a different file "
"(@code{compilation-next-file})."
msgstr ""

#. type: item
#: building.texi.orig:176
#, no-wrap
msgid "M-@{"
msgstr ""

#. type: table
#: building.texi.orig:179
msgid ""
"Move point to the previous error message or match occurring in a different "
"file (@code{compilation-previous-file})."
msgstr ""

#. type: item
#: building.texi.orig:179 building.texi.orig:726
#, no-wrap
msgid "C-c C-f"
msgstr ""

#. type: table
#: building.texi.orig:182
msgid ""
"Toggle Next Error Follow minor mode, which makes cursor motion in the "
"compilation buffer produce automatic source display."
msgstr ""

#. type: findex
#: building.texi.orig:187
#, no-wrap
msgid "next-error"
msgstr ""

#. type: vindex
#: building.texi.orig:188
#, no-wrap
msgid "next-error-highlight"
msgstr ""

#. type: Plain text
#: building.texi.orig:200
msgid ""
"To visit errors sequentially, type @w{@kbd{C-x `}} (@code{next-error}), or "
"equivalently @kbd{M-g M-n} or @kbd{M-g n}.  This command can be invoked from "
"any buffer, not just a Compilation mode buffer.  The first time you invoke "
"it after a compilation, it visits the locus of the first error message.  "
"Each subsequent @w{@kbd{C-x `}} visits the next error, in a similar "
"fashion.  If you visit a specific error with @key{RET} or a mouse click in "
"the @file{*compilation*} buffer, subsequent @w{@kbd{C-x `}} commands advance "
"from there.  When @w{@kbd{C-x `}} finds no more error messages to visit, it "
"signals an error.  @w{@kbd{C-u C-x `}} starts again from the beginning of "
"the compilation buffer, and visits the first locus."
msgstr ""

#. type: Plain text
#: building.texi.orig:203
msgid ""
"@kbd{M-g M-p} or @kbd{M-g p} (@code{previous-error}) iterates through errors "
"in the opposite direction."
msgstr ""

#. type: Plain text
#: building.texi.orig:216
msgid ""
"The @code{next-error} and @code{previous-error} commands don't just act on "
"the errors or matches listed in @file{*compilation*} and @file{*grep*} "
"buffers; they also know how to iterate through error or match lists produced "
"by other commands, such as @kbd{M-x occur} (@pxref{Other Repeating "
"Search}).  If you are already in a buffer containing error messages or "
"matches, those are the ones that are iterated through; otherwise, Emacs "
"looks for a buffer containing error messages or matches amongst the windows "
"of the selected frame, then for one that @code{next-error} or "
"@code{previous-error} previously iterated through, and finally amongst all "
"other buffers.  If the buffer chosen for iterating through is not currently "
"displayed in a window, it will be displayed."
msgstr ""

#. type: vindex
#: building.texi.orig:217
#, no-wrap
msgid "compilation-skip-threshold"
msgstr ""

#. type: Plain text
#: building.texi.orig:224
msgid ""
"By default, the @code{next-error} and @code{previous-error} commands skip "
"less important messages.  The variable @code{compilation-skip-threshold} "
"controls this.  The default value, 1, means to skip anything less important "
"than a warning.  A value of 2 means to skip anything less important than an "
"error, while 0 means not to skip any messages."
msgstr ""

#. type: Plain text
#: building.texi.orig:228
msgid ""
"When Emacs visits the locus of an error message, it momentarily highlights "
"the relevant source line.  The duration of this highlight is determined by "
"the variable @code{next-error-highlight}."
msgstr ""

#. type: vindex
#: building.texi.orig:229
#, no-wrap
msgid "compilation-context-lines"
msgstr ""

#. type: Plain text
#: building.texi.orig:240
msgid ""
"If the @file{*compilation*} buffer is shown in a window with a left fringe "
"(@pxref{Fringes}), the locus-visiting commands put an arrow in the fringe, "
"pointing to the current error message.  If the window has no left fringe, "
"such as on a text terminal, these commands scroll the window so that the "
"current message is at the top of the window.  If you change the variable "
"@code{compilation-context-lines} to an integer value @var{n}, these commands "
"scroll the window so that the current error message is @var{n} lines from "
"the top, whether or not there is a fringe; the default value, @code{nil}, "
"gives the behavior described above."
msgstr ""

#. type: vindex
#: building.texi.orig:241
#, no-wrap
msgid "compilation-error-regexp-alist"
msgstr ""

#. type: vindex
#: building.texi.orig:242
#, no-wrap
msgid "grep-regexp-alist"
msgstr ""

#. type: Plain text
#: building.texi.orig:248
msgid ""
"To parse messages from the compiler, Compilation mode uses the variable "
"@code{compilation-error-regexp-alist} which lists various error message "
"formats and tells Emacs how to extract the locus from each.  A similar "
"variable, @code{grep-regexp-alist}, tells Emacs how to parse output from a "
"@code{grep} command (@pxref{Grep Searching})."
msgstr ""

#. type: findex
#: building.texi.orig:249
#, no-wrap
msgid "compilation-next-error"
msgstr ""

#. type: findex
#: building.texi.orig:250
#, no-wrap
msgid "compilation-previous-error"
msgstr ""

#. type: findex
#: building.texi.orig:251
#, no-wrap
msgid "compilation-next-file"
msgstr ""

#. type: findex
#: building.texi.orig:252
#, no-wrap
msgid "compilation-previous-file"
msgstr ""

#. type: Plain text
#: building.texi.orig:259
msgid ""
"Compilation mode also defines the keys @key{SPC} and @key{DEL} to scroll by "
"screenfuls; @kbd{M-n} (@code{compilation-next-error}) and @kbd{M-p} "
"(@code{compilation-previous-error}) to move to the next or previous error "
"message; and @kbd{M-@{} (@code{compilation-next-file})  and @kbd{M-@}} "
"(@code{compilation-previous-file}) to move to the next or previous error "
"message for a different source file."
msgstr ""

#. type: cindex
#: building.texi.orig:260
#, no-wrap
msgid "Next Error Follow mode"
msgstr ""

#. type: findex
#: building.texi.orig:261
#, no-wrap
msgid "next-error-follow-minor-mode"
msgstr ""

#. type: Plain text
#: building.texi.orig:266
msgid ""
"You can type @kbd{C-c C-f} to toggle Next Error Follow mode.  In this minor "
"mode, ordinary cursor motion in the compilation buffer automatically updates "
"the source buffer, i.e., moving the cursor over an error message causes the "
"locus of that error to be displayed."
msgstr ""

#. type: Plain text
#: building.texi.orig:274
msgid ""
"The features of Compilation mode are also available in a minor mode called "
"Compilation Minor mode.  This lets you parse error messages in any buffer, "
"not just a normal compilation output buffer.  Type @kbd{M-x "
"compilation-minor-mode} to enable the minor mode.  For instance, in an "
"Rlogin buffer (@pxref{Remote Host}), Compilation minor mode automatically "
"accesses remote source files by FTP (@pxref{File Names})."
msgstr ""

#. type: section
#: building.texi.orig:276
#, no-wrap
msgid "Subshells for Compilation"
msgstr ""

#. type: Plain text
#: building.texi.orig:288
msgid ""
"The @kbd{M-x compile} command uses a shell to run the compilation command, "
"but specifies the option for a noninteractive shell.  This means, in "
"particular, that the shell should start with no prompt.  If you find your "
"usual shell prompt making an unsightly appearance in the "
"@file{*compilation*} buffer, it means you have made a mistake in your "
"shell's init file by setting the prompt unconditionally.  (This init file "
"may be named @file{.bashrc}, @file{.profile}, @file{.cshrc}, @file{.shrc}, "
"etc., depending on what shell you use.)  The shell init file should set the "
"prompt only if there already is a prompt.  Here's how to do it in bash:"
msgstr ""

#. type: example
#: building.texi.orig:293
#, no-wrap
msgid ""
"if [ \"$@{PS1+set@}\" = set ]\n"
"then PS1=@dots{}\n"
"fi\n"
msgstr ""

#. type: Plain text
#: building.texi.orig:297
msgid "And here's how to do it in csh:"
msgstr ""

#. type: example
#: building.texi.orig:300
#, no-wrap
msgid "if ($?prompt) set prompt = @dots{}\n"
msgstr ""

#. type: Plain text
#: building.texi.orig:308
msgid ""
"Emacs does not expect a compiler process to launch asynchronous "
"subprocesses; if it does, and they keep running after the main compiler "
"process has terminated, Emacs may kill them or their output may not arrive "
"in Emacs.  To avoid this problem, make the main compilation process wait for "
"its subprocesses to finish.  In a shell script, you can do this using "
"@samp{$!} and @samp{wait}, like this:"
msgstr ""

#. type: example
#: building.texi.orig:313
#, no-wrap
msgid ""
"(sleep 10; echo 2nd)& pid=$!  # @r{Record pid of subprocess}\n"
"echo first message\n"
"wait $pid                     # @r{Wait for subprocess}\n"
msgstr ""

#. type: Plain text
#: building.texi.orig:319
msgid ""
"If the background process does not output to the compilation buffer, so you "
"only need to prevent it from being killed when the main compilation process "
"terminates, this is sufficient:"
msgstr ""

#. type: example
#: building.texi.orig:322
#, no-wrap
msgid "nohup @var{command}; sleep 1\n"
msgstr ""

#. type: ifnottex
#: building.texi.orig:329
msgid ""
"On the MS-DOS ``operating system'', asynchronous subprocesses are not "
"supported, so @kbd{M-x compile} runs the compilation command synchronously "
"(i.e., you must wait until the command finishes before you can do anything "
"else in Emacs).  @xref{MS-DOS}."
msgstr ""

#. type: section
#: building.texi.orig:332
#, no-wrap
msgid "Searching with Grep under Emacs"
msgstr ""

#. type: Plain text
#: building.texi.orig:340
msgid ""
"Just as you can run a compiler from Emacs and then visit the lines with "
"compilation errors, you can also run @command{grep} and then visit the lines "
"on which matches were found.  This works by treating the matches reported by "
"@command{grep} as if they were ``errors''.  The output buffer uses Grep "
"mode, which is a variant of Compilation mode (@pxref{Compilation Mode})."
msgstr ""

#. type: item
#: building.texi.orig:342
#, no-wrap
msgid "M-x grep"
msgstr ""

#. type: itemx
#: building.texi.orig:343
#, no-wrap
msgid "M-x lgrep"
msgstr ""

#. type: table
#: building.texi.orig:346
msgid ""
"Run @command{grep} asynchronously under Emacs, listing matching lines in the "
"buffer named @file{*grep*}."
msgstr ""

#. type: item
#: building.texi.orig:346
#, no-wrap
msgid "M-x grep-find"
msgstr ""

#. type: itemx
#: building.texi.orig:347
#, no-wrap
msgid "M-x find-grep"
msgstr ""

#. type: itemx
#: building.texi.orig:348
#, no-wrap
msgid "M-x rgrep"
msgstr ""

#. type: table
#: building.texi.orig:351
msgid ""
"Run @command{grep} via @code{find}, and collect output in the @file{*grep*} "
"buffer."
msgstr ""

#. type: item
#: building.texi.orig:351
#, no-wrap
msgid "M-x zrgrep"
msgstr ""

#. type: table
#: building.texi.orig:353
msgid "Run @code{zgrep} and collect output in the @file{*grep*} buffer."
msgstr ""

#. type: item
#: building.texi.orig:353
#, no-wrap
msgid "M-x kill-grep"
msgstr ""

#. type: table
#: building.texi.orig:355
msgid "Kill the running @command{grep} subprocess."
msgstr ""

#. type: findex
#: building.texi.orig:357
#, no-wrap
msgid "grep"
msgstr ""

#. type: Plain text
#: building.texi.orig:366
msgid ""
"To run @command{grep}, type @kbd{M-x grep}, then enter a command line that "
"specifies how to run @command{grep}.  Use the same arguments you would give "
"@command{grep} when running it normally: a @command{grep}-style regexp "
"(usually in single-quotes to quote the shell's special characters) followed "
"by file names, which may use wildcards.  If you specify a prefix argument "
"for @kbd{M-x grep}, it finds the tag (@pxref{Tags}) in the buffer around "
"point, and puts that into the default @command{grep} command."
msgstr ""

#. type: Plain text
#: building.texi.orig:370
msgid ""
"Your command need not simply run @command{grep}; you can use any shell "
"command that produces output in the same format.  For instance, you can "
"chain @command{grep} commands, like this:"
msgstr ""

#. type: example
#: building.texi.orig:373
#, no-wrap
msgid "grep -nH -e foo *.el | grep bar | grep toto\n"
msgstr ""

#. type: Plain text
#: building.texi.orig:378
msgid ""
"The output from @command{grep} goes in the @file{*grep*} buffer.  You can "
"find the corresponding lines in the original files using @w{@kbd{C-x `}}, "
"@key{RET}, and so forth, just like compilation errors."
msgstr ""

#. type: Plain text
#: building.texi.orig:384
msgid ""
"Some grep programs accept a @samp{--color} option to output special markers "
"around matches for the purpose of highlighting.  You can make use of this "
"feature by setting @code{grep-highlight-matches} to @code{t}.  When "
"displaying a match in the source buffer, the exact match will be "
"highlighted, instead of the entire source line."
msgstr ""

#. type: findex
#: building.texi.orig:385
#, no-wrap
msgid "grep-find"
msgstr ""

#. type: findex
#: building.texi.orig:386
#, no-wrap
msgid "find-grep"
msgstr ""

#. type: Plain text
#: building.texi.orig:392
msgid ""
"The command @kbd{M-x grep-find} (also available as @kbd{M-x find-grep}) is "
"similar to @kbd{M-x grep}, but it supplies a different initial default for "
"the command---one that runs both @code{find} and @command{grep}, so as to "
"search every file in a directory tree.  See also the @code{find-grep-dired} "
"command, in @ref{Dired and Find}."
msgstr ""

#. type: findex
#: building.texi.orig:393
#, no-wrap
msgid "lgrep"
msgstr ""

#. type: findex
#: building.texi.orig:394
#, no-wrap
msgid "rgrep"
msgstr ""

#. type: findex
#: building.texi.orig:395
#, no-wrap
msgid "zrgrep"
msgstr ""

#. type: Plain text
#: building.texi.orig:404
msgid ""
"The commands @kbd{M-x lgrep} (local grep) and @kbd{M-x rgrep} (recursive "
"grep) are more user-friendly versions of @command{grep} and "
"@code{grep-find}, which prompt separately for the regular expression to "
"match, the files to search, and the base directory for the search.  Case "
"sensitivity of the search is controlled by the current value of "
"@code{case-fold-search}.  The command @kbd{M-x zrgrep} is similar to "
"@kbd{M-x rgrep}, but it calls @command{zgrep} instead of @command{grep} to "
"search the contents of gzipped files."
msgstr ""

#. type: Plain text
#: building.texi.orig:409
msgid ""
"These commands build the shell commands based on the variables "
"@code{grep-template} (for @code{lgrep}) and @code{grep-find-template} (for "
"@code{rgrep}).  The files to search can use aliases defined in the variable "
"@code{grep-files-aliases}."
msgstr ""

#. type: vindex
#: building.texi.orig:410
#, no-wrap
msgid "grep-find-ignored-directories"
msgstr ""

#. type: Plain text
#: building.texi.orig:415
msgid ""
"Directories listed in the variable @code{grep-find-ignored-directories} are "
"automatically skipped by @kbd{M-x rgrep}.  The default value includes the "
"data directories used by various version control systems."
msgstr ""

#. type: section
#: building.texi.orig:417
#, no-wrap
msgid "Finding Syntax Errors On The Fly"
msgstr ""

#. type: cindex
#: building.texi.orig:418
#, no-wrap
msgid "checking syntax"
msgstr ""

#. type: Plain text
#: building.texi.orig:431
msgid ""
"Flymake mode is a minor mode that performs on-the-fly syntax checking for "
"many programming and markup languages, including C, C++, Perl, HTML, and "
"@TeX{}/@LaTeX{}.  It is somewhat analogous to Flyspell mode, which performs "
"spell checking for ordinary human languages in a similar fashion "
"(@pxref{Spelling}).  As you edit a file, Flymake mode runs an appropriate "
"syntax checking tool in the background, using a temporary copy of the "
"buffer.  It then parses the error and warning messages, and highlights the "
"erroneous lines in the buffer.  The syntax checking tool used depends on the "
"language; for example, for C/C++ files this is usually the C compiler.  "
"Flymake can also use build tools such as @code{make} for checking "
"complicated projects."
msgstr ""

#. type: Plain text
#: building.texi.orig:437
msgid ""
"To enable Flymake mode, type @kbd{M-x flymake-mode}.  You can jump to the "
"errors that it finds by using @kbd{M-x flymake-goto-next-error} and @kbd{M-x "
"flymake-goto-prev-error}.  To display any error messages associated with the "
"current line, type @kbd{M-x flymake-display-err-menu-for-current-line}."
msgstr ""

#. type: Plain text
#: building.texi.orig:439
msgid "For more details about using Flymake,"
msgstr ""

#. type: ifnottex
#: building.texi.orig:441
msgid "see @ref{Top, Flymake, Flymake, flymake, The Flymake Manual}."
msgstr ""

#. type: iftex
#: building.texi.orig:444
msgid "see the Flymake Info manual, which is distributed with Emacs."
msgstr ""

#. type: section
#: building.texi.orig:447
#, no-wrap
msgid "Running Debuggers Under Emacs"
msgstr ""

#. type: cindex
#: building.texi.orig:448
#, no-wrap
msgid "debuggers"
msgstr ""

#. type: cindex
#: building.texi.orig:449
#, no-wrap
msgid "GUD library"
msgstr ""

#. type: cindex
#: building.texi.orig:450
#, no-wrap
msgid "GDB"
msgstr ""

#. type: cindex
#: building.texi.orig:451
#, no-wrap
msgid "DBX"
msgstr ""

#. type: cindex
#: building.texi.orig:452
#, no-wrap
msgid "SDB"
msgstr ""

#. type: cindex
#: building.texi.orig:453
#, no-wrap
msgid "XDB"
msgstr ""

#. type: cindex
#: building.texi.orig:454
#, no-wrap
msgid "Perldb"
msgstr ""

#. type: cindex
#: building.texi.orig:455
#, no-wrap
msgid "JDB"
msgstr ""

#. type: cindex
#: building.texi.orig:456
#, no-wrap
msgid "PDB"
msgstr ""

#. type: Plain text
#: building.texi.orig:462
msgid ""
"The GUD (Grand Unified Debugger) library provides an Emacs interface to a "
"wide variety of symbolic debuggers.  It can run the GNU Debugger (GDB), as "
"well as DBX, SDB, XDB, Perl's debugging mode, the Python debugger PDB, and "
"the Java Debugger JDB."
msgstr ""

#. type: Plain text
#: building.texi.orig:466
msgid ""
"Emacs provides a special interface to GDB, which uses extra Emacs windows to "
"display the state of the debugged program.  @xref{GDB Graphical Interface}."
msgstr ""

#. type: Plain text
#: building.texi.orig:470
msgid ""
"Emacs also has a built-in debugger for Emacs Lisp programs.  "
"@xref{Debugging,, The Lisp Debugger, elisp, the Emacs Lisp Reference "
"Manual}."
msgstr ""

#. type: subsection
#: building.texi.orig:478 building.texi.orig:480 building.texi.orig:481
#, no-wrap
msgid "Starting GUD"
msgstr ""

#. type: menuentry
#: building.texi.orig:478
msgid "How to start a debugger subprocess."
msgstr ""

#. type: subsection
#: building.texi.orig:478 building.texi.orig:545 building.texi.orig:546
#, no-wrap
msgid "Debugger Operation"
msgstr ""

#. type: menuentry
#: building.texi.orig:478
msgid "Connection between the debugger and source buffers."
msgstr ""

#. type: subsection
#: building.texi.orig:478 building.texi.orig:614 building.texi.orig:615
#, no-wrap
msgid "Commands of GUD"
msgstr ""

#. type: menuentry
#: building.texi.orig:478
msgid "Key bindings for common commands."
msgstr ""

#. type: subsection
#: building.texi.orig:478 building.texi.orig:762 building.texi.orig:763
#, no-wrap
msgid "GUD Customization"
msgstr ""

#. type: menuentry
#: building.texi.orig:478
msgid "Defining your own commands for GUD."
msgstr ""

#. type: subsection
#: building.texi.orig:478 building.texi.orig:835 building.texi.orig:836
#, no-wrap
msgid "GDB Graphical Interface"
msgstr ""

#. type: menuentry
#: building.texi.orig:478
msgid ""
"An enhanced mode that uses GDB features to implement a graphical debugging "
"environment."
msgstr ""

#. type: Plain text
#: building.texi.orig:485
msgid ""
"There are several commands for starting a debugger subprocess, each "
"corresponding to a particular debugger program."
msgstr ""

#. type: item
#: building.texi.orig:487
#, no-wrap
msgid "M-x gdb"
msgstr ""

#. type: findex
#: building.texi.orig:488
#, no-wrap
msgid "gdb"
msgstr ""

#. type: table
#: building.texi.orig:492
msgid ""
"Run GDB as a subprocess, and interact with it via an IDE-like Emacs "
"interface.  @xref{GDB Graphical Interface}, for more information about this "
"command."
msgstr ""

#. type: item
#: building.texi.orig:493
#, no-wrap
msgid "M-x gud-gdb"
msgstr ""

#. type: findex
#: building.texi.orig:494
#, no-wrap
msgid "gud-gdb"
msgstr ""

#. type: table
#: building.texi.orig:498
msgid ""
"Run GDB, using a GUD interaction buffer for input and output to the GDB "
"subprocess (@pxref{Debugger Operation}).  If such a buffer already exists, "
"switch to it; otherwise, create the buffer and switch to it."
msgstr ""

#. type: table
#: building.texi.orig:501
msgid "The other commands in this list do the same, for other debugger programs."
msgstr ""

#. type: item
#: building.texi.orig:502
#, no-wrap
msgid "M-x perldb"
msgstr ""

#. type: findex
#: building.texi.orig:503
#, no-wrap
msgid "perldb"
msgstr ""

#. type: table
#: building.texi.orig:505
msgid "Run the Perl interpreter in debug mode."
msgstr ""

#. type: item
#: building.texi.orig:506
#, no-wrap
msgid "M-x jdb"
msgstr ""

#. type: findex
#: building.texi.orig:507
#, no-wrap
msgid "jdb"
msgstr ""

#. type: table
#: building.texi.orig:509
msgid "Run the Java debugger."
msgstr ""

#. type: item
#: building.texi.orig:510
#, no-wrap
msgid "M-x pdb"
msgstr ""

#. type: findex
#: building.texi.orig:511
#, no-wrap
msgid "pdb"
msgstr ""

#. type: table
#: building.texi.orig:513
msgid "Run the Python debugger."
msgstr ""

#. type: item
#: building.texi.orig:514
#, no-wrap
msgid "M-x dbx"
msgstr ""

#. type: findex
#: building.texi.orig:515
#, no-wrap
msgid "dbx"
msgstr ""

#. type: table
#: building.texi.orig:517
msgid "Run the DBX debugger."
msgstr ""

#. type: item
#: building.texi.orig:518
#, no-wrap
msgid "M-x xdb"
msgstr ""

#. type: findex
#: building.texi.orig:519
#, no-wrap
msgid "xdb"
msgstr ""

#. type: vindex
#: building.texi.orig:520
#, no-wrap
msgid "gud-xdb-directories"
msgstr ""

#. type: table
#: building.texi.orig:522
msgid "Run the XDB debugger."
msgstr ""

#. type: item
#: building.texi.orig:523
#, no-wrap
msgid "M-x sdb"
msgstr ""

#. type: findex
#: building.texi.orig:524
#, no-wrap
msgid "sdb"
msgstr ""

#. type: table
#: building.texi.orig:526
msgid "Run the SDB debugger."
msgstr ""

#. type: Plain text
#: building.texi.orig:535
msgid ""
"Each of these commands reads a command line to invoke the debugger, using "
"the minibuffer.  The minibuffer's initial contents contain the standard "
"executable name and options for the debugger, and sometimes also a guess for "
"the name of the executable file you want to debug.  Shell wildcards and "
"variables are not allowed in this command line.  Emacs assumes that the "
"first command argument which does not start with a @samp{-} is the "
"executable file name."
msgstr ""

#. type: cindex
#: building.texi.orig:536
#, no-wrap
msgid "remote host, debugging on"
msgstr ""

#. type: Plain text
#: building.texi.orig:544
msgid ""
"Tramp provides a facility for remote debugging, whereby both the debugger "
"and the program being debugged are on the same remote host.  @xref{Running a "
"debugger on a remote host,,, tramp, The Tramp Manual}, for details.  This is "
"separate from GDB's remote debugging feature, where the program and the "
"debugger run on different machines (@pxref{Remote Debugging,, Debugging "
"Remote Programs, gdb, The GNU debugger})."
msgstr ""

#. type: cindex
#: building.texi.orig:547
#, no-wrap
msgid "GUD interaction buffer"
msgstr ""

#. type: Plain text
#: building.texi.orig:553
msgid ""
"The @dfn{GUD interaction buffer} is an Emacs buffer which is used to send "
"text commands to a debugger subprocess, and record its output.  This is the "
"basic interface for interacting with a debugger, used by @kbd{M-x gud-gdb} "
"and other commands listed in"
msgstr ""

#. type: iftex
#: building.texi.orig:555
msgid "the preceding section."
msgstr ""

#. type: ifnottex
#: building.texi.orig:558
msgid "@ref{Starting GUD}."
msgstr ""

#. type: Plain text
#: building.texi.orig:562
msgid ""
"The @kbd{M-x gdb} command extends this interface with additional specialized "
"buffers for controlling breakpoints, stack frames, and other aspects of the "
"debugger state (@pxref{GDB Graphical Interface})."
msgstr ""

#. type: Plain text
#: building.texi.orig:568
msgid ""
"The GUD interaction buffer uses a variant of Shell mode, so the Emacs "
"commands defined by Shell mode are available (@pxref{Shell Mode}).  "
"Completion is available for most debugger commands (@pxref{Completion}), and "
"you can use the usual Shell mode history commands to repeat them."
msgstr ""

#. type: iftex
#: building.texi.orig:570
msgid "See the next section"
msgstr ""

#. type: ifnottex
#: building.texi.orig:573
msgid "@xref{Commands of GUD},"
msgstr ""

#. type: Plain text
#: building.texi.orig:575
msgid "for special commands that can be used in the GUD interaction buffer."
msgstr ""

#. type: Plain text
#: building.texi.orig:586
msgid ""
"As you debug a program, Emacs displays the relevant source files by visiting "
"them in Emacs buffers, with an arrow in the left fringe indicating the "
"current execution line.  (On a text terminal, the arrow appears as "
"@samp{=>}, overlaid on the first two text columns.)  Moving point in such a "
"buffer does not move the arrow.  You are free to edit these source files, "
"but note that inserting or deleting lines will throw off the arrow's "
"positioning, as Emacs has no way to figure out which edited source line "
"corresponds to the line reported by the debugger subprocess.  To update this "
"information, you typically have to recompile and restart the program."
msgstr ""

#. type: cindex
#: building.texi.orig:587
#, no-wrap
msgid "GUD Tooltip mode"
msgstr ""

#. type: cindex
#: building.texi.orig:588
#, no-wrap
msgid "mode, GUD Tooltip"
msgstr ""

#. type: findex
#: building.texi.orig:589
#, no-wrap
msgid "gud-tooltip-mode"
msgstr ""

#. type: vindex
#: building.texi.orig:590
#, no-wrap
msgid "gud-tooltip-echo-area"
msgstr ""

#. type: Plain text
#: building.texi.orig:605
msgid ""
"GUD Tooltip mode is a global minor mode that adds tooltip support to GUD@.  "
"To toggle this mode, type @kbd{M-x gud-tooltip-mode}.  It is disabled by "
"default.  If enabled, you can move the mouse cursor over a variable, a "
"function, or a macro (collectively called @dfn{identifiers}) to show their "
"values in tooltips (@pxref{Tooltips}).  Alternatively, mark an identifier or "
"an expression by dragging the mouse over it, then leave the mouse in the "
"marked area to have the value of the expression displayed in a tooltip.  The "
"GUD Tooltip mode takes effect in the GUD interaction buffer, and in all "
"source buffers with major modes listed in the variable "
"@code{gud-tooltip-modes}.  If the variable @code{gud-tooltip-echo-area} is "
"non-@code{nil}, or if you turned off the tooltip mode, values are shown in "
"the echo area instead of a tooltip."
msgstr ""

#. type: Plain text
#: building.texi.orig:613
msgid ""
"When using GUD Tooltip mode with @kbd{M-x gud-gdb}, displaying an "
"expression's value in GDB can sometimes expand a macro, potentially causing "
"side effects in the debugged program.  For that reason, using tooltips in "
"@code{gud-gdb} is disabled.  If you use the @kbd{M-x gdb} interface, this "
"problem does not occur, as there is special code to avoid side-effects; "
"furthermore, you can display macro definitions associated with an identifier "
"when the program is not executing."
msgstr ""

#. type: Plain text
#: building.texi.orig:619
msgid ""
"GUD provides commands for setting and clearing breakpoints, selecting stack "
"frames, and stepping through the program."
msgstr ""

#. type: kindex
#: building.texi.orig:621 building.texi.orig:622
#, no-wrap
msgid "C-x C-a C-b"
msgstr ""

#. type: table
#: building.texi.orig:624
msgid "Set a breakpoint on the source line that point is on."
msgstr ""

#. type: Plain text
#: building.texi.orig:631
msgid ""
"@kbd{C-x C-a C-b} (@code{gud-break}), when called in a source buffer, sets a "
"debugger breakpoint on the current source line.  This command is available "
"only after starting GUD@.  If you call it in a buffer that is not associated "
"with any debugger subprocess, it signals a error."
msgstr ""

#. type: kindex
#: building.texi.orig:632
#, no-wrap
msgid "C-x C-a @r{(GUD)}"
msgstr ""

#. type: Plain text
#: building.texi.orig:639
msgid ""
"The following commands are available both in the GUD interaction buffer and "
"globally, but with different key bindings.  The keys starting with @kbd{C-c} "
"are available only in the GUD interaction buffer, while those starting with "
"@kbd{C-x C-a} are available globally.  Some of these commands are also "
"available via the tool bar; some are not supported by certain debuggers."
msgstr ""

#. type: item
#: building.texi.orig:641
#, no-wrap
msgid "C-c C-l"
msgstr ""

#. type: kindex
#: building.texi.orig:642
#, no-wrap
msgid "C-c C-l @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:643
#, no-wrap
msgid "C-x C-a C-l"
msgstr ""

#. type: findex
#: building.texi.orig:644
#, no-wrap
msgid "gud-refresh"
msgstr ""

#. type: table
#: building.texi.orig:647
msgid ""
"Display, in another window, the last source line referred to in the GUD "
"interaction buffer (@code{gud-refresh})."
msgstr ""

#. type: item
#: building.texi.orig:648
#, no-wrap
msgid "C-c C-s"
msgstr ""

#. type: kindex
#: building.texi.orig:649
#, no-wrap
msgid "C-c C-s @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:650
#, no-wrap
msgid "C-x C-a C-s"
msgstr ""

#. type: findex
#: building.texi.orig:651
#, no-wrap
msgid "gud-step"
msgstr ""

#. type: table
#: building.texi.orig:655
msgid ""
"Execute the next single line of code (@code{gud-step}).  If the line "
"contains a function call, execution stops after entering the called "
"function."
msgstr ""

#. type: item
#: building.texi.orig:656
#, no-wrap
msgid "C-c C-n"
msgstr ""

#. type: kindex
#: building.texi.orig:657
#, no-wrap
msgid "C-c C-n @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:658
#, no-wrap
msgid "C-x C-a C-n"
msgstr ""

#. type: findex
#: building.texi.orig:659
#, no-wrap
msgid "gud-next"
msgstr ""

#. type: table
#: building.texi.orig:662
msgid ""
"Execute the next single line of code, stepping across function calls without "
"stopping inside the functions (@code{gud-next})."
msgstr ""

#. type: item
#: building.texi.orig:663
#, no-wrap
msgid "C-c C-i"
msgstr ""

#. type: kindex
#: building.texi.orig:664
#, no-wrap
msgid "C-c C-i @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:665
#, no-wrap
msgid "C-x C-a C-i"
msgstr ""

#. type: findex
#: building.texi.orig:666
#, no-wrap
msgid "gud-stepi"
msgstr ""

#. type: table
#: building.texi.orig:668
msgid "Execute a single machine instruction (@code{gud-stepi})."
msgstr ""

#. type: item
#: building.texi.orig:669
#, no-wrap
msgid "C-c C-p"
msgstr ""

#. type: kindex
#: building.texi.orig:670
#, no-wrap
msgid "C-c C-p @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:671
#, no-wrap
msgid "C-x C-a C-p"
msgstr ""

#. type: findex
#: building.texi.orig:672
#, no-wrap
msgid "gud-print"
msgstr ""

#. type: table
#: building.texi.orig:676
msgid ""
"Evaluate the expression at point (@code{gud-print}).  If Emacs does not "
"print the exact expression that you want, mark it as a region first."
msgstr ""

#. type: item
#: building.texi.orig:678
#, no-wrap
msgid "C-c C-r"
msgstr ""

#. type: kindex
#: building.texi.orig:679
#, no-wrap
msgid "C-c C-r @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:680
#, no-wrap
msgid "C-x C-a C-r"
msgstr ""

#. type: findex
#: building.texi.orig:681
#, no-wrap
msgid "gud-cont"
msgstr ""

#. type: table
#: building.texi.orig:685
msgid ""
"Continue execution without specifying any stopping point.  The program will "
"run until it hits a breakpoint, terminates, or gets a signal that the "
"debugger is checking for (@code{gud-cont})."
msgstr ""

#. type: item
#: building.texi.orig:687
#, no-wrap
msgid "C-c C-d"
msgstr ""

#. type: kindex
#: building.texi.orig:688
#, no-wrap
msgid "C-c C-d @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:689
#, no-wrap
msgid "C-x C-a C-d"
msgstr ""

#. type: findex
#: building.texi.orig:690
#, no-wrap
msgid "gud-remove"
msgstr ""

#. type: table
#: building.texi.orig:694
msgid ""
"Delete the breakpoint(s) on the current source line, if any "
"(@code{gud-remove}).  If you use this command in the GUD interaction buffer, "
"it applies to the line where the program last stopped."
msgstr ""

#. type: item
#: building.texi.orig:695
#, no-wrap
msgid "C-c C-t"
msgstr ""

#. type: kindex
#: building.texi.orig:696
#, no-wrap
msgid "C-c C-t @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:697
#, no-wrap
msgid "C-x C-a C-t"
msgstr ""

#. type: findex
#: building.texi.orig:698
#, no-wrap
msgid "gud-tbreak"
msgstr ""

#. type: table
#: building.texi.orig:702
msgid ""
"Set a temporary breakpoint on the current source line, if any "
"(@code{gud-tbreak}).  If you use this command in the GUD interaction buffer, "
"it applies to the line where the program last stopped."
msgstr ""

#. type: item
#: building.texi.orig:703
#, no-wrap
msgid "C-c <"
msgstr ""

#. type: kindex
#: building.texi.orig:704
#, no-wrap
msgid "C-c < @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:705
#, no-wrap
msgid "C-x C-a <"
msgstr ""

#. type: findex
#: building.texi.orig:706
#, no-wrap
msgid "gud-up"
msgstr ""

#. type: table
#: building.texi.orig:709
msgid ""
"Select the next enclosing stack frame (@code{gud-up}).  This is equivalent "
"to the GDB command @samp{up}."
msgstr ""

#. type: item
#: building.texi.orig:710
#, no-wrap
msgid "C-c >"
msgstr ""

#. type: kindex
#: building.texi.orig:711
#, no-wrap
msgid "C-c > @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:712
#, no-wrap
msgid "C-x C-a >"
msgstr ""

#. type: findex
#: building.texi.orig:713
#, no-wrap
msgid "gud-down"
msgstr ""

#. type: table
#: building.texi.orig:716
msgid ""
"Select the next inner stack frame (@code{gud-down}).  This is equivalent to "
"the GDB command @samp{down}."
msgstr ""

#. type: item
#: building.texi.orig:717
#, no-wrap
msgid "C-c C-u"
msgstr ""

#. type: kindex
#: building.texi.orig:718
#, no-wrap
msgid "C-c C-u @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:719
#, no-wrap
msgid "C-x C-a C-u"
msgstr ""

#. type: findex
#: building.texi.orig:720
#, no-wrap
msgid "gud-until"
msgstr ""

#. type: table
#: building.texi.orig:725
msgid ""
"Continue execution to the current line (@code{gud-until}).  The program will "
"run until it hits a breakpoint, terminates, gets a signal that the debugger "
"is checking for, or reaches the line on which the cursor currently sits."
msgstr ""

#. type: kindex
#: building.texi.orig:727
#, no-wrap
msgid "C-c C-f @r{(GUD)}"
msgstr ""

#. type: itemx
#: building.texi.orig:728
#, no-wrap
msgid "C-x C-a C-f"
msgstr ""

#. type: findex
#: building.texi.orig:729
#, no-wrap
msgid "gud-finish"
msgstr ""

#. type: table
#: building.texi.orig:732
msgid ""
"Run the program until the selected stack frame returns or stops for some "
"other reason (@code{gud-finish})."
msgstr ""

#. type: Plain text
#: building.texi.orig:735
msgid "If you are using GDB, these additional key bindings are available:"
msgstr ""

#. type: item
#: building.texi.orig:737
#, no-wrap
msgid "C-x C-a C-j"
msgstr ""

#. type: kindex
#: building.texi.orig:738
#, no-wrap
msgid "C-x C-a C-j @r{(GUD)}"
msgstr ""

#. type: findex
#: building.texi.orig:739
#, no-wrap
msgid "gud-jump"
msgstr ""

#. type: table
#: building.texi.orig:747
msgid ""
"Only useful in a source buffer, @code{gud-jump} transfers the program's "
"execution point to the current line.  In other words, the next line that the "
"program executes will be the one where you gave the command.  If the new "
"execution line is in a different function from the previously one, GDB "
"prompts for confirmation since the results may be bizarre.  See the GDB "
"manual entry regarding @code{jump} for details."
msgstr ""

#. type: key{#1}
#: building.texi.orig:748
#, no-wrap
msgid "TAB"
msgstr ""

#. type: kindex
#: building.texi.orig:749
#, no-wrap
msgid "TAB @r{(GUD)}"
msgstr ""

#. type: findex
#: building.texi.orig:750
#, no-wrap
msgid "gud-gdb-complete-command"
msgstr ""

#. type: table
#: building.texi.orig:753
msgid ""
"With GDB, complete a symbol name (@code{gud-gdb-complete-command}).  This "
"key is available only in the GUD interaction buffer."
msgstr ""

#. type: Plain text
#: building.texi.orig:757
msgid ""
"These commands interpret a numeric argument as a repeat count, when that "
"makes sense."
msgstr ""

#. type: Plain text
#: building.texi.orig:761
msgid ""
"Because @key{TAB} serves as a completion command, you can't use it to enter "
"a tab as input to the program you are debugging with GDB@.  Instead, type "
"@kbd{C-q @key{TAB}} to enter a tab."
msgstr ""

#. type: vindex
#: building.texi.orig:765
#, no-wrap
msgid "gdb-mode-hook"
msgstr ""

#. type: vindex
#: building.texi.orig:766
#, no-wrap
msgid "dbx-mode-hook"
msgstr ""

#. type: vindex
#: building.texi.orig:767
#, no-wrap
msgid "sdb-mode-hook"
msgstr ""

#. type: vindex
#: building.texi.orig:768
#, no-wrap
msgid "xdb-mode-hook"
msgstr ""

#. type: vindex
#: building.texi.orig:769
#, no-wrap
msgid "perldb-mode-hook"
msgstr ""

#. type: vindex
#: building.texi.orig:770
#, no-wrap
msgid "pdb-mode-hook"
msgstr ""

#. type: vindex
#: building.texi.orig:771
#, no-wrap
msgid "jdb-mode-hook"
msgstr ""

#. type: Plain text
#: building.texi.orig:778
msgid ""
"On startup, GUD runs one of the following hooks: @code{gdb-mode-hook}, if "
"you are using GDB; @code{dbx-mode-hook}, if you are using DBX; "
"@code{sdb-mode-hook}, if you are using SDB; @code{xdb-mode-hook}, if you are "
"using XDB; @code{perldb-mode-hook}, for Perl debugging mode; "
"@code{pdb-mode-hook}, for PDB; @code{jdb-mode-hook}, for JDB@.  "
"@xref{Hooks}."
msgstr ""

#. type: Plain text
#: building.texi.orig:783
msgid ""
"The @code{gud-def} Lisp macro (@pxref{Defining Macros,,, elisp, the Emacs "
"Lisp Reference Manual}) provides a convenient way to define an Emacs command "
"that sends a particular command string to the debugger, and set up a key "
"binding for in the GUD interaction buffer:"
msgstr ""

#. type: findex
#: building.texi.orig:784
#, no-wrap
msgid "gud-def"
msgstr ""

#. type: example
#: building.texi.orig:787
#, no-wrap
msgid "(gud-def @var{function} @var{cmdstring} @var{binding} @var{docstring})\n"
msgstr ""

#. type: Plain text
#: building.texi.orig:795
msgid ""
"This defines a command named @var{function} which sends @var{cmdstring} to "
"the debugger process, and gives it the documentation string "
"@var{docstring}.  You can then use the command @var{function} in any "
"buffer.  If @var{binding} is non-@code{nil}, @code{gud-def} also binds the "
"command to @kbd{C-c @var{binding}} in the GUD buffer's mode and to @kbd{C-x "
"C-a @var{binding}} generally."
msgstr ""

#. type: Plain text
#: building.texi.orig:799
msgid ""
"The command string @var{cmdstring} may contain certain @samp{%}-sequences "
"that stand for data to be filled in at the time @var{function} is called:"
msgstr ""

#. type: item
#: building.texi.orig:801
#, no-wrap
msgid "%f"
msgstr ""

#. type: table
#: building.texi.orig:805
msgid ""
"The name of the current source file.  If the current buffer is the GUD "
"buffer, then the ``current source file'' is the file that the program "
"stopped in."
msgstr ""

#. type: item
#: building.texi.orig:806
#, no-wrap
msgid "%l"
msgstr ""

#. type: table
#: building.texi.orig:810
msgid ""
"The number of the current source line.  If the current buffer is the GUD "
"buffer, then the ``current source line'' is the line that the program "
"stopped in."
msgstr ""

#. type: item
#: building.texi.orig:811
#, no-wrap
msgid "%e"
msgstr ""

#. type: table
#: building.texi.orig:815
msgid ""
"In transient-mark-mode the text in the region, if it is active.  Otherwise "
"the text of the C lvalue or function-call expression at or adjacent to "
"point."
msgstr ""

#. type: item
#: building.texi.orig:816
#, no-wrap
msgid "%a"
msgstr ""

#. type: table
#: building.texi.orig:818
msgid "The text of the hexadecimal address at or adjacent to point."
msgstr ""

#. type: item
#: building.texi.orig:819
#, no-wrap
msgid "%p"
msgstr ""

#. type: table
#: building.texi.orig:823
msgid ""
"The numeric argument of the called function, as a decimal number.  If the "
"command is used without a numeric argument, @samp{%p} stands for the empty "
"string."
msgstr ""

#. type: table
#: building.texi.orig:826
msgid ""
"If you don't use @samp{%p} in the command string, the command you define "
"ignores any numeric argument."
msgstr ""

#. type: item
#: building.texi.orig:827
#, no-wrap
msgid "%d"
msgstr ""

#. type: table
#: building.texi.orig:829
msgid "The name of the directory of the current source file."
msgstr ""

#. type: item
#: building.texi.orig:830
#, no-wrap
msgid "%c"
msgstr ""

#. type: table
#: building.texi.orig:833
msgid ""
"Fully qualified class name derived from the expression surrounding point "
"(jdb only)."
msgstr ""

#. type: Plain text
#: building.texi.orig:843
msgid ""
"The command @kbd{M-x gdb} starts GDB in an IDE-like interface, with "
"specialized buffers for controlling breakpoints, stack frames, and other "
"aspects of the debugger state.  It also provides additional ways to control "
"the debugging session with the mouse, such as clicking in the fringe of a "
"source buffer to set a breakpoint there."
msgstr ""

#. type: vindex
#: building.texi.orig:844
#, no-wrap
msgid "gud-gdb-command-name"
msgstr ""

#. type: Plain text
#: building.texi.orig:850
msgid ""
"To run GDB using just the GUD interaction buffer interface, without these "
"additional features, use @kbd{M-x gud-gdb} (@pxref{Starting GUD}).  You must "
"use this if you want to debug multiple programs within one Emacs session, as "
"that is currently unsupported by @kbd{M-x gdb}."
msgstr ""

#. type: Plain text
#: building.texi.orig:854
msgid ""
"Internally, @kbd{M-x gdb} informs GDB that its ``screen size'' is unlimited; "
"for correct operation, you must not change GDB's screen height and width "
"values during the debugging session."
msgstr ""

#. type: subsubsection
#: building.texi.orig:865 building.texi.orig:867 building.texi.orig:868
#, no-wrap
msgid "GDB User Interface Layout"
msgstr ""

#. type: menuentry
#: building.texi.orig:865
msgid "Control the number of displayed buffers."
msgstr ""

#. type: subsubsection
#: building.texi.orig:865 building.texi.orig:919 building.texi.orig:920
#, no-wrap
msgid "Source Buffers"
msgstr ""

#. type: menuentry
#: building.texi.orig:865
msgid "Use the mouse in the fringe/margin to control your program."
msgstr ""

#. type: subsubsection
#: building.texi.orig:865 building.texi.orig:961 building.texi.orig:962
#, no-wrap
msgid "Breakpoints Buffer"
msgstr ""

#. type: menuentry
#: building.texi.orig:865
msgid "A breakpoint control panel."
msgstr ""

#. type: subsubsection
#: building.texi.orig:865 building.texi.orig:1001 building.texi.orig:1002
#, no-wrap
msgid "Threads Buffer"
msgstr ""

#. type: menuentry
#: building.texi.orig:865
msgid "Displays your threads."
msgstr ""

#. type: subsubsection
#: building.texi.orig:865 building.texi.orig:1077 building.texi.orig:1078
#, no-wrap
msgid "Stack Buffer"
msgstr ""

#. type: menuentry
#: building.texi.orig:865
msgid "Select a frame from the call stack."
msgstr ""

#. type: subsubsection
#: building.texi.orig:865 building.texi.orig:1099 building.texi.orig:1100
#, no-wrap
msgid "Other GDB Buffers"
msgstr ""

#. type: menuentry
#: building.texi.orig:865
msgid "Other buffers for controlling the GDB state."
msgstr ""

#. type: subsubsection
#: building.texi.orig:865 building.texi.orig:1144 building.texi.orig:1145
#, no-wrap
msgid "Watch Expressions"
msgstr ""

#. type: menuentry
#: building.texi.orig:865
msgid "Monitor variable values in the speedbar."
msgstr ""

#. type: subsubsection
#: building.texi.orig:865 building.texi.orig:1211 building.texi.orig:1212
#, no-wrap
msgid "Multithreaded Debugging"
msgstr ""

#. type: menuentry
#: building.texi.orig:865
msgid "Debugging programs with several threads."
msgstr ""

#. type: cindex
#: building.texi.orig:869
#, no-wrap
msgid "GDB User Interface layout"
msgstr ""

#. type: findex
#: building.texi.orig:871 building.texi.orig:895
#, no-wrap
msgid "gdb-many-windows"
msgstr ""

#. type: Plain text
#: building.texi.orig:878
msgid ""
"If the variable @code{gdb-many-windows} is @code{nil} (the default), "
"@kbd{M-x gdb} normally displays only the GUD interaction buffer.  However, "
"if the variable @code{gdb-show-main} is also non-@code{nil}, it starts with "
"two windows: one displaying the GUD interaction buffer, and the other "
"showing the source for the @code{main} function of the program you are "
"debugging."
msgstr ""

#. type: Plain text
#: building.texi.orig:881
msgid ""
"If @code{gdb-many-windows} is non-@code{nil}, then @kbd{M-x gdb} displays "
"the following frame layout:"
msgstr ""

#. type: group
#: building.texi.orig:891
#, no-wrap
msgid ""
"+--------------------------------+--------------------------------+\n"
"|   GUD interaction buffer       |   Locals/Registers buffer      |\n"
"|--------------------------------+--------------------------------+\n"
"|   Primary Source buffer        |   I/O buffer for debugged pgm  |\n"
"|--------------------------------+--------------------------------+\n"
"|   Stack buffer                 |   Breakpoints/Threads buffer   |\n"
"+--------------------------------+--------------------------------+\n"
msgstr ""

#. type: findex
#: building.texi.orig:894
#, no-wrap
msgid "gdb-restore-windows"
msgstr ""

#. type: Plain text
#: building.texi.orig:900
msgid ""
"If you ever change the window layout, you can restore the ``many windows'' "
"layout by typing @kbd{M-x gdb-restore-windows}.  To toggle between the many "
"windows layout and a simple layout with just the GUD interaction buffer and "
"a source file, type @kbd{M-x gdb-many-windows}."
msgstr ""

#. type: Plain text
#: building.texi.orig:908
msgid ""
"You may also specify additional GDB-related buffers to display, either in "
"the same frame or a different one.  Select the buffers you want by typing "
"@code{M-x gdb-display-@var{buffertype}-buffer} or @code{M-x "
"gdb-frame-@var{buffertype}-buffer}, where @var{buffertype} is the relevant "
"buffer type, such as @samp{breakpoints}.  You can do the same with the menu "
"bar, with the @samp{GDB-Windows} and @samp{GDB-Frames} sub-menus of the "
"@samp{GUD} menu."
msgstr ""

#. type: Plain text
#: building.texi.orig:918
msgid ""
"When you finish debugging, kill the GUD interaction buffer with @kbd{C-x k}, "
"which will also kill all the buffers associated with the session.  However "
"you need not do this if, after editing and re-compiling your source code "
"within Emacs, you wish to continue debugging.  When you restart execution, "
"GDB automatically finds the new executable.  Keeping the GUD interaction "
"buffer has the advantage of keeping the shell history as well as GDB's "
"breakpoints.  You do need to check that the breakpoints in recently edited "
"source files are still in the right places."
msgstr ""

#. type: cindex
#: building.texi.orig:921
#, no-wrap
msgid "fringes, for debugging"
msgstr ""

#. type: item
#: building.texi.orig:924
#, no-wrap
msgid "@kbd{Mouse-1} (in fringe)"
msgstr ""

#. type: table
#: building.texi.orig:926
msgid "Set or clear a breakpoint on that line."
msgstr ""

#. type: item
#: building.texi.orig:927
#, no-wrap
msgid "@kbd{C-Mouse-1} (in fringe)"
msgstr ""

#. type: table
#: building.texi.orig:929
msgid "Enable or disable a breakpoint on that line."
msgstr ""

#. type: item
#: building.texi.orig:930
#, no-wrap
msgid "@kbd{Mouse-3} (in fringe)"
msgstr ""

#. type: table
#: building.texi.orig:932
msgid "Continue execution to that line."
msgstr ""

#. type: item
#: building.texi.orig:933
#, no-wrap
msgid "@kbd{C-Mouse-3} (in fringe)"
msgstr ""

#. type: table
#: building.texi.orig:935
msgid "Jump to that line."
msgstr ""

#. type: Plain text
#: building.texi.orig:943
msgid ""
"On a graphical display, you can click @kbd{Mouse-1} in the fringe of a "
"source buffer, to set a breakpoint on that line (@pxref{Fringes}).  A red "
"dot appears in the fringe, where you clicked.  If a breakpoint already "
"exists there, the click removes it.  A @kbd{C-Mouse-1} click enables or "
"disables an existing breakpoint; a breakpoint that is disabled, but not "
"unset, is indicated by a gray dot."
msgstr ""

#. type: Plain text
#: building.texi.orig:948
msgid ""
"On a text terminal, or when fringes are disabled, enabled breakpoints are "
"indicated with a @samp{B} character in the left margin of the window.  "
"Disabled breakpoints are indicated with @samp{b}.  (The margin is only "
"displayed if a breakpoint is present.)"
msgstr ""

#. type: Plain text
#: building.texi.orig:960
msgid ""
"A solid arrow in the left fringe of a source buffer indicates the line of "
"the innermost frame where the debugged program has stopped. A hollow arrow "
"indicates the current execution line of a higher-level frame.  If you drag "
"the arrow in the fringe with @kbd{Mouse-1}, that causes execution to advance "
"to the line where you release the button.  Alternatively, you can click "
"@kbd{Mouse-3} in the fringe to advance to that line.  You can click "
"@kbd{C-Mouse-3} in the fringe to jump to that line without executing the "
"intermediate lines.  This command allows you to go backwards, which can be "
"useful for running through code that has already executed, in order to "
"examine its execution in more detail."
msgstr ""

#. type: Plain text
#: building.texi.orig:968
msgid ""
"The GDB Breakpoints buffer shows the breakpoints, watchpoints and "
"catchpoints in the debugger session.  @xref{Breakpoints,,, gdb, The GNU "
"debugger}.  It provides the following commands, which mostly apply to the "
"@dfn{current breakpoint} (the breakpoint which point is on):"
msgstr ""

#. type: key{#1}
#: building.texi.orig:970
#, no-wrap
msgid "SPC"
msgstr ""

#. type: kindex
#: building.texi.orig:971
#, no-wrap
msgid "SPC @r{(GDB Breakpoints buffer)}"
msgstr ""

#. type: findex
#: building.texi.orig:972
#, no-wrap
msgid "gdb-toggle-breakpoint"
msgstr ""

#. type: table
#: building.texi.orig:977
msgid ""
"Enable/disable current breakpoint (@code{gdb-toggle-breakpoint}).  On a "
"graphical display, this changes the color of the dot in the fringe of the "
"source buffer at that line.  The dot is red when the breakpoint is enabled, "
"and gray when it is disabled."
msgstr ""

#. type: item
#: building.texi.orig:978
#, no-wrap
msgid "D"
msgstr ""

#. type: kindex
#: building.texi.orig:979
#, no-wrap
msgid "D @r{(GDB Breakpoints buffer)}"
msgstr ""

#. type: findex
#: building.texi.orig:980
#, no-wrap
msgid "gdb-delete-breakpoint"
msgstr ""

#. type: table
#: building.texi.orig:982
msgid "Delete the current breakpoint (@code{gdb-delete-breakpoint})."
msgstr ""

#. type: key{#1}
#: building.texi.orig:983
#, no-wrap
msgid "RET"
msgstr ""

#. type: kindex
#: building.texi.orig:984
#, no-wrap
msgid "RET @r{(GDB Breakpoints buffer)}"
msgstr ""

#. type: findex
#: building.texi.orig:985
#, no-wrap
msgid "gdb-goto-breakpoint"
msgstr ""

#. type: table
#: building.texi.orig:988
msgid ""
"Visit the source line for the current breakpoint "
"(@code{gdb-goto-breakpoint})."
msgstr ""

#. type: item
#: building.texi.orig:989
#, no-wrap
msgid "Mouse-2"
msgstr ""

#. type: kindex
#: building.texi.orig:990
#, no-wrap
msgid "Mouse-2 @r{(GDB Breakpoints buffer)}"
msgstr ""

#. type: table
#: building.texi.orig:992
msgid "Visit the source line for the breakpoint you click on."
msgstr ""

#. type: vindex
#: building.texi.orig:994
#, no-wrap
msgid "gdb-show-threads-by-default"
msgstr ""

#. type: Plain text
#: building.texi.orig:1000
msgid ""
"When @code{gdb-many-windows} is non-@code{nil}, the GDB Breakpoints buffer "
"shares its window with the GDB Threads buffer.  To switch from one to the "
"other click with @kbd{Mouse-1} on the relevant button in the header line.  "
"If @code{gdb-show-threads-by-default} is non-@code{nil}, the GDB Threads "
"buffer is the one shown by default."
msgstr ""

#. type: findex
#: building.texi.orig:1004
#, no-wrap
msgid "gdb-select-thread"
msgstr ""

#. type: Plain text
#: building.texi.orig:1011
msgid ""
"The GDB Threads buffer displays a summary of the threads in the debugged "
"program.  @xref{Threads, Threads, Debugging programs with multiple threads, "
"gdb, The GNU debugger}.  To select a thread, move point there and press "
"@key{RET} (@code{gdb-select-thread}), or click on it with @kbd{Mouse-2}.  "
"This also displays the associated source buffer, and updates the contents of "
"the other GDB buffers."
msgstr ""

#. type: Plain text
#: building.texi.orig:1014
msgid ""
"You can customize variables under @code{gdb-buffers} group to select fields "
"included in GDB Threads buffer."
msgstr ""

#. type: vindex
#: building.texi.orig:1016 building.texi.orig:1017
#, no-wrap
msgid "gdb-thread-buffer-verbose-names"
msgstr ""

#. type: table
#: building.texi.orig:1019
msgid "Show long thread names like @samp{Thread 0x4e2ab70 (LWP 1983)}."
msgstr ""

#. type: vindex
#: building.texi.orig:1020 building.texi.orig:1021
#, no-wrap
msgid "gdb-thread-buffer-arguments"
msgstr ""

#. type: table
#: building.texi.orig:1023
msgid "Show arguments of thread top frames."
msgstr ""

#. type: vindex
#: building.texi.orig:1024 building.texi.orig:1025
#, no-wrap
msgid "gdb-thread-buffer-locations"
msgstr ""

#. type: table
#: building.texi.orig:1027
msgid "Show file information or library names."
msgstr ""

#. type: vindex
#: building.texi.orig:1028 building.texi.orig:1029
#, no-wrap
msgid "gdb-thread-buffer-addresses"
msgstr ""

#. type: table
#: building.texi.orig:1031
msgid "Show addresses for thread frames in threads buffer."
msgstr ""

#. type: Plain text
#: building.texi.orig:1035
msgid ""
"To view information for several threads simultaneously, use the following "
"commands from the GDB Threads buffer."
msgstr ""

#. type: item
#: building.texi.orig:1037
#, no-wrap
msgid "d"
msgstr ""

#. type: kindex
#: building.texi.orig:1038
#, no-wrap
msgid "d @r{(GDB threads buffer)}"
msgstr ""

#. type: findex
#: building.texi.orig:1039
#, no-wrap
msgid "gdb-display-disassembly-for-thread"
msgstr ""

#. type: table
#: building.texi.orig:1042
msgid ""
"Display disassembly buffer for the thread at current line "
"(@code{gdb-display-disassembly-for-thread})."
msgstr ""

#. type: item
#: building.texi.orig:1043
#, no-wrap
msgid "f"
msgstr ""

#. type: kindex
#: building.texi.orig:1044
#, no-wrap
msgid "f @r{(GDB threads buffer)}"
msgstr ""

#. type: findex
#: building.texi.orig:1045
#, no-wrap
msgid "gdb-display-stack-for-thread"
msgstr ""

#. type: table
#: building.texi.orig:1048
msgid ""
"Display the GDB Stack buffer for the thread at current line "
"(@code{gdb-display-stack-for-thread})."
msgstr ""

#. type: item
#: building.texi.orig:1049
#, no-wrap
msgid "l"
msgstr ""

#. type: kindex
#: building.texi.orig:1050
#, no-wrap
msgid "l @r{(GDB threads buffer)}"
msgstr ""

#. type: findex
#: building.texi.orig:1051
#, no-wrap
msgid "gdb-display-locals-for-thread"
msgstr ""

#. type: table
#: building.texi.orig:1054
msgid ""
"Display the GDB Locals buffer for the thread at current line "
"(@code{gdb-display-locals-for-thread})."
msgstr ""

#. type: item
#: building.texi.orig:1055
#, no-wrap
msgid "r"
msgstr ""

#. type: kindex
#: building.texi.orig:1056
#, no-wrap
msgid "r @r{(GDB threads buffer)}"
msgstr ""

#. type: findex
#: building.texi.orig:1057
#, no-wrap
msgid "gdb-display-registers-for-thread"
msgstr ""

#. type: table
#: building.texi.orig:1060
msgid ""
"Display the GDB Registers buffer for the thread at current line "
"(@code{gdb-display-registers-for-thread})."
msgstr ""

#. type: Plain text
#: building.texi.orig:1065
msgid ""
"Their upper-case counterparts, @kbd{D}, @kbd{F} ,@kbd{L} and @kbd{R}, "
"display the corresponding buffer in a new frame."
msgstr ""

#. type: Plain text
#: building.texi.orig:1072
msgid ""
"When you create a buffer showing information about some specific thread, it "
"becomes bound to that thread and keeps showing actual information while you "
"debug your program.  The mode indicator for each GDB buffer shows the number "
"of thread it is showing information about.  The thread number is also "
"included in the buffer name of bound buffers."
msgstr ""

#. type: Plain text
#: building.texi.orig:1076
msgid ""
"Further commands are available in the GDB Threads buffer which depend on the "
"mode of GDB that is used for controlling execution of your program.  "
"@xref{Multithreaded Debugging}."
msgstr ""

#. type: Plain text
#: building.texi.orig:1084
msgid ""
"The GDB Stack buffer displays a @dfn{call stack}, with one line for each of "
"the nested subroutine calls (@dfn{stack frames}) in the debugger session.  "
"@xref{Backtrace,, Backtraces, gdb, The GNU debugger}."
msgstr ""

#. type: findex
#: building.texi.orig:1085
#, no-wrap
msgid "gdb-frames-select"
msgstr ""

#. type: Plain text
#: building.texi.orig:1092
msgid ""
"On graphical displays, the selected stack frame is indicated by an arrow in "
"the fringe.  On text terminals, or when fringes are disabled, the selected "
"stack frame is displayed in reverse contrast.  To select a stack frame, move "
"point in its line and type @key{RET} (@code{gdb-frames-select}), or click "
"@kbd{Mouse-2} on it.  Doing so also updates the Locals buffer"
msgstr ""

#. type: ifnottex
#: building.texi.orig:1094
msgid "(@pxref{Other GDB Buffers})."
msgstr ""

#. type: iftex
#: building.texi.orig:1097
msgid "(described in the next section)."
msgstr ""

#. type: item
#: building.texi.orig:1103
#, no-wrap
msgid "Locals Buffer"
msgstr ""

#. type: table
#: building.texi.orig:1108
msgid ""
"This buffer displays the values of local variables of the current frame for "
"simple data types (@pxref{Frame Info, Frame Info, Information on a frame, "
"gdb, The GNU debugger}).  Press @key{RET} or click @kbd{Mouse-2} on the "
"value if you want to edit it."
msgstr ""

#. type: table
#: building.texi.orig:1114
msgid ""
"Arrays and structures display their type only.  With GDB 6.4 or later, you "
"can examine the value of the local variable at point by typing @key{RET}, or "
"with a @kbd{Mouse-2} click.  With earlier versions of GDB, use @key{RET} or "
"@kbd{Mouse-2} on the type description (@samp{[struct/union]} or "
"@samp{[array]}).  @xref{Watch Expressions}."
msgstr ""

#. type: item
#: building.texi.orig:1115
#, no-wrap
msgid "Registers Buffer"
msgstr ""

#. type: findex
#: building.texi.orig:1116
#, no-wrap
msgid "toggle-gdb-all-registers"
msgstr ""

#. type: table
#: building.texi.orig:1122
msgid ""
"This buffer displays the values held by the registers (@pxref{Registers,,, "
"gdb, The GNU debugger}).  Press @key{RET} or click @kbd{Mouse-2} on a "
"register if you want to edit its value.  With GDB 6.4 or later, recently "
"changed register values display with @code{font-lock-warning-face}."
msgstr ""

#. type: item
#: building.texi.orig:1123
#, no-wrap
msgid "Assembler Buffer"
msgstr ""

#. type: table
#: building.texi.orig:1128
msgid ""
"The assembler buffer displays the current frame as machine code.  An arrow "
"points to the current instruction, and you can set and remove breakpoints as "
"in a source buffer.  Breakpoint icons also appear in the fringe or margin."
msgstr ""

#. type: item
#: building.texi.orig:1129
#, no-wrap
msgid "Memory Buffer"
msgstr ""

#. type: table
#: building.texi.orig:1137
msgid ""
"The memory buffer lets you examine sections of program memory "
"(@pxref{Memory, Memory, Examining memory, gdb, The GNU debugger}).  Click "
"@kbd{Mouse-1} on the appropriate part of the header line to change the "
"starting address or number of data items that the buffer displays.  "
"Alternatively, use @kbd{S} or @kbd{N} respectively.  Click @kbd{Mouse-3} on "
"the header line to select the display format or unit size for these data "
"items."
msgstr ""

#. type: Plain text
#: building.texi.orig:1143
msgid ""
"When @code{gdb-many-windows} is non-@code{nil}, the locals buffer shares its "
"window with the registers buffer, just like breakpoints and threads "
"buffers. To switch from one to the other, click with @kbd{Mouse-1} on the "
"relevant button in the header line."
msgstr ""

#. type: cindex
#: building.texi.orig:1146
#, no-wrap
msgid "Watching expressions in GDB"
msgstr ""

#. type: findex
#: building.texi.orig:1148
#, no-wrap
msgid "gud-watch"
msgstr ""

#. type: kindex
#: building.texi.orig:1149
#, no-wrap
msgid "C-x C-a C-w @r{(GUD)}"
msgstr ""

#. type: Plain text
#: building.texi.orig:1155
msgid ""
"If you want to see how a variable changes each time your program stops, move "
"point into the variable name and click on the watch icon in the tool bar "
"(@code{gud-watch}) or type @kbd{C-x C-a C-w}.  If you specify a prefix "
"argument, you can enter the variable name in the minibuffer."
msgstr ""

#. type: Plain text
#: building.texi.orig:1165
msgid ""
"Each watch expression is displayed in the speedbar (@pxref{Speedbar}).  "
"Complex data types, such as arrays, structures and unions are represented in "
"a tree format.  Leaves and simple data types show the name of the expression "
"and its value and, when the speedbar frame is selected, display the type as "
"a tooltip.  Higher levels show the name, type and address value for pointers "
"and just the name and type otherwise.  Root expressions also display the "
"frame address as a tooltip to help identify the frame in which they were "
"defined."
msgstr ""

#. type: Plain text
#: building.texi.orig:1171
msgid ""
"To expand or contract a complex data type, click @kbd{Mouse-2} or press "
"@key{SPC} on the tag to the left of the expression.  Emacs asks for "
"confirmation before expanding the expression if its number of immediate "
"children exceeds the value of the variable @code{gdb-max-children}."
msgstr ""

#. type: kindex
#: building.texi.orig:1172
#, no-wrap
msgid "D @r{(GDB speedbar)}"
msgstr ""

#. type: findex
#: building.texi.orig:1173
#, no-wrap
msgid "gdb-var-delete"
msgstr ""

#. type: Plain text
#: building.texi.orig:1176
msgid ""
"To delete a complex watch expression, move point to the root expression in "
"the speedbar and type @kbd{D} (@code{gdb-var-delete})."
msgstr ""

#. type: kindex
#: building.texi.orig:1177
#, no-wrap
msgid "RET @r{(GDB speedbar)}"
msgstr ""

#. type: findex
#: building.texi.orig:1178
#, no-wrap
msgid "gdb-edit-value"
msgstr ""

#. type: Plain text
#: building.texi.orig:1183
msgid ""
"To edit a variable with a simple data type, or a simple element of a complex "
"data type, move point there in the speedbar and type @key{RET} "
"(@code{gdb-edit-value}).  Or you can click @kbd{Mouse-2} on a value to edit "
"it.  Either way, this reads the new value using the minibuffer."
msgstr ""

#. type: vindex
#: building.texi.orig:1184
#, no-wrap
msgid "gdb-show-changed-values"
msgstr ""

#. type: Plain text
#: building.texi.orig:1191
msgid ""
"If you set the variable @code{gdb-show-changed-values} to non-@code{nil} "
"(the default value), Emacs uses @code{font-lock-warning-face} to highlight "
"values that have recently changed and @code{shadow} face to make variables "
"which have gone out of scope less noticeable.  When a variable goes out of "
"scope you can't edit its value."
msgstr ""

#. type: vindex
#: building.texi.orig:1192
#, no-wrap
msgid "gdb-delete-out-of-scope"
msgstr ""

#. type: Plain text
#: building.texi.orig:1198
msgid ""
"If the variable @code{gdb-delete-out-of-scope} is non-@code{nil} (the "
"default value), Emacs automatically deletes watch expressions which go out "
"of scope.  Sometimes, when re-entering the same function, it may be useful "
"to set this value to @code{nil} so that you don't need to recreate the watch "
"expression."
msgstr ""

#. type: vindex
#: building.texi.orig:1199
#, no-wrap
msgid "gdb-use-colon-colon-notation"
msgstr ""

#. type: Plain text
#: building.texi.orig:1204
msgid ""
"If the variable @code{gdb-use-colon-colon-notation} is non-@code{nil}, Emacs "
"uses the @samp{@var{function}::@var{variable}} format.  This allows the user "
"to display watch expressions which share the same variable name.  The "
"default value is @code{nil}."
msgstr ""

#. type: vindex
#: building.texi.orig:1205
#, no-wrap
msgid "gdb-speedbar-auto-raise"
msgstr ""

#. type: Plain text
#: building.texi.orig:1210
msgid ""
"To automatically raise the speedbar every time the display of watch "
"expressions updates, set @code{gdb-speedbar-auto-raise} to non-@code{nil}.  "
"This can be useful if you are debugging with a full screen Emacs frame."
msgstr ""

#. type: cindex
#: building.texi.orig:1213
#, no-wrap
msgid "Multithreaded debugging in GDB"
msgstr ""

#. type: cindex
#: building.texi.orig:1214
#, no-wrap
msgid "Non-stop debugging in GDB"
msgstr ""

#. type: Plain text
#: building.texi.orig:1225
msgid ""
"In GDB's @dfn{all-stop mode}, whenever your program stops, all execution "
"threads stop.  Likewise, whenever you restart the program, all threads start "
"executing.  @xref{All-Stop Mode, , All-Stop Mode, gdb, The GNU debugger}.  "
"For some multi-threaded targets, GDB supports a further mode of operation, "
"called @dfn{non-stop mode}, in which you can examine stopped program threads "
"in the debugger while other threads continue to execute freely.  "
"@xref{Non-Stop Mode, , Non-Stop Mode, gdb, The GNU debugger}.  Versions of "
"GDB prior to 7.0 do not support non-stop mode, and it does not work on all "
"targets."
msgstr ""

#. type: vindex
#: building.texi.orig:1226
#, no-wrap
msgid "gdb-non-stop-setting"
msgstr ""

#. type: Plain text
#: building.texi.orig:1234
msgid ""
"The variable @code{gdb-non-stop-setting} determines whether Emacs runs GDB "
"in all-stop mode or non-stop mode.  The default is @code{t}, which means it "
"tries to use non-stop mode if that is available.  If you change the value to "
"@code{nil}, or if non-stop mode is unavailable, Emacs runs GDB in all-stop "
"mode.  The variable takes effect when Emacs begins a debugging session; if "
"you change its value, you should restart any active debugging session."
msgstr ""

#. type: vindex
#: building.texi.orig:1235
#, no-wrap
msgid "gdb-switch-when-another-stopped"
msgstr ""

#. type: Plain text
#: building.texi.orig:1240
msgid ""
"When a thread stops in non-stop mode, Emacs usually switches to that "
"thread.  If you don't want Emacs to do this switch if another stopped thread "
"is already selected, change the variable "
"@code{gdb-switch-when-another-stopped} to @code{nil}."
msgstr ""

#. type: vindex
#: building.texi.orig:1241
#, no-wrap
msgid "gdb-switch-reasons"
msgstr ""

#. type: Plain text
#: building.texi.orig:1246
msgid ""
"Emacs can decide whether or not to switch to the stopped thread depending on "
"the reason which caused the stop.  Customize the variable "
"@code{gdb-switch-reasons} to select the stop reasons which will cause a "
"thread switch."
msgstr ""

#. type: vindex
#: building.texi.orig:1247
#, no-wrap
msgid "gdb-stopped-functions"
msgstr ""

#. type: Plain text
#: building.texi.orig:1250
msgid ""
"The variable @code{gdb-stopped-functions} allows you to execute your "
"functions whenever some thread stops."
msgstr ""

#. type: Plain text
#: building.texi.orig:1253
msgid ""
"In non-stop mode, you can switch between different modes for GUD execution "
"control commands."
msgstr ""

#. type: vindex
#: building.texi.orig:1254
#, no-wrap
msgid "gdb-gud-control-all-threads"
msgstr ""

#. type: item
#: building.texi.orig:1256
#, no-wrap
msgid "Non-stop/A"
msgstr ""

#. type: table
#: building.texi.orig:1265
msgid ""
"When @code{gdb-gud-control-all-threads} is @code{t} (the default value), "
"interruption and continuation commands apply to all threads, so you can halt "
"or continue all your threads with one command using @code{gud-stop-subjob} "
"and @code{gud-cont}, respectively.  The @samp{Go} button is shown on the "
"toolbar when at least one thread is stopped, whereas @samp{Stop} button is "
"shown when at least one thread is running."
msgstr ""

#. type: item
#: building.texi.orig:1266
#, no-wrap
msgid "Non-stop/T"
msgstr ""

#. type: table
#: building.texi.orig:1272
msgid ""
"When @code{gdb-gud-control-all-threads} is @code{nil}, only the current "
"thread is stopped/continued.  @samp{Go} and @samp{Stop} buttons on the GUD "
"toolbar are shown depending on the state of current thread."
msgstr ""

#. type: Plain text
#: building.texi.orig:1276
msgid ""
"You can change the current value of @code{gdb-gud-control-all-threads} from "
"the tool bar or from @samp{GUD->GDB-MI} menu."
msgstr ""

#. type: Plain text
#: building.texi.orig:1278
msgid "Stepping commands always apply to the current thread."
msgstr ""

#. type: Plain text
#: building.texi.orig:1283
msgid ""
"In non-stop mode, you can interrupt/continue your threads without selecting "
"them.  Hitting @kbd{i} in threads buffer interrupts thread under point, "
"@kbd{c} continues it, @kbd{s} steps through.  More such commands may be "
"added in the future."
msgstr ""

#. type: Plain text
#: building.texi.orig:1288
msgid ""
"Note that when you interrupt a thread, it stops with the @samp{signal "
"received} reason.  If that reason is included in your "
"@code{gdb-switch-reasons} (it is by default), Emacs will switch to that "
"thread."
msgstr ""

#. type: section
#: building.texi.orig:1290
#, no-wrap
msgid "Executing Lisp Expressions"
msgstr ""

#. type: Plain text
#: building.texi.orig:1296
msgid ""
"Emacs has major modes for several variants of Lisp.  They use the same "
"editing commands as other programming language modes (@pxref{Programs}).  In "
"addition, they provide special commands for executing Lisp expressions."
msgstr ""

#. type: cindex
#: building.texi.orig:1298 building.texi.orig:1427
#, no-wrap
msgid "Emacs Lisp mode"
msgstr ""

#. type: table
#: building.texi.orig:1301
msgid ""
"The mode for editing Emacs Lisp source files.  It defines @kbd{C-M-x} to "
"evaluate the current top-level Lisp expression.  @xref{Lisp Eval}."
msgstr ""

#. type: item
#: building.texi.orig:1302
#, no-wrap
msgid "Lisp Interaction mode"
msgstr ""

#. type: table
#: building.texi.orig:1306
msgid ""
"The mode for an interactive Emacs Lisp session.  It defines @kbd{C-j} to "
"evaluate the expression before point and insert its value in the buffer.  "
"@xref{Lisp Interaction}."
msgstr ""

#. type: cindex
#: building.texi.orig:1307 building.texi.orig:1565
#, no-wrap
msgid "Lisp mode"
msgstr ""

#. type: table
#: building.texi.orig:1311
msgid ""
"The mode for editing source files of programs that run in Lisps other than "
"Emacs Lisp.  It defines @kbd{C-M-x} to evaluate the current top-level "
"expression in an external Lisp.  @xref{External Lisp}."
msgstr ""

#. type: item
#: building.texi.orig:1312
#, no-wrap
msgid "Inferior Lisp mode"
msgstr ""

#. type: table
#: building.texi.orig:1315
msgid ""
"The mode for an interactive session with an external Lisp which is being run "
"as a subprocess (or @dfn{inferior process}) of Emacs."
msgstr ""

#. type: ifnottex
#: building.texi.orig:1317
msgid "@xref{External Lisp}."
msgstr ""

#. type: cindex
#: building.texi.orig:1319 building.texi.orig:1606
#, no-wrap
msgid "Scheme mode"
msgstr ""

#. type: table
#: building.texi.orig:1321
msgid "Like Lisp mode, but for Scheme programs."
msgstr ""

#. type: item
#: building.texi.orig:1322
#, no-wrap
msgid "Inferior Scheme mode"
msgstr ""

#. type: table
#: building.texi.orig:1324
msgid "Like Inferior Lisp mode, but for Scheme."
msgstr ""

#. type: node
#: building.texi.orig:1326
#, no-wrap
msgid "Lisp Libraries"
msgstr ""

#. type: section
#: building.texi.orig:1327
#, no-wrap
msgid "Libraries of Lisp Code for Emacs"
msgstr ""

#. type: cindex
#: building.texi.orig:1328
#, no-wrap
msgid "libraries"
msgstr ""

#. type: cindex
#: building.texi.orig:1329
#, no-wrap
msgid "loading Lisp code"
msgstr ""

#. type: Plain text
#: building.texi.orig:1333
msgid ""
"Emacs Lisp code is stored in files whose names conventionally end in "
"@file{.el}.  Such files are automatically visited in Emacs Lisp mode."
msgstr ""

#. type: cindex
#: building.texi.orig:1334
#, no-wrap
msgid "byte code"
msgstr ""

#. type: Plain text
#: building.texi.orig:1341
msgid ""
"Emacs Lisp code can be compiled into byte-code, which loads faster, takes up "
"less space, and executes faster.  By convention, compiled Emacs Lisp code "
"goes in a separate file whose name ends in @samp{.elc}.  For example, the "
"compiled code for @file{foo.el} goes in @file{foo.elc}.  @xref{Byte "
"Compilation,, Byte Compilation, elisp, the Emacs Lisp Reference Manual}."
msgstr ""

#. type: findex
#: building.texi.orig:1342
#, no-wrap
msgid "load-file"
msgstr ""

#. type: Plain text
#: building.texi.orig:1348
msgid ""
"To @dfn{load} an Emacs Lisp file, type @kbd{M-x load-file}.  This command "
"reads a file name using the minibuffer, and executes the contents of that "
"file as Emacs Lisp code.  It is not necessary to visit the file first; this "
"command reads the file directly from disk, not from an existing Emacs "
"buffer."
msgstr ""

#. type: findex
#: building.texi.orig:1349
#, no-wrap
msgid "load"
msgstr ""

#. type: findex
#: building.texi.orig:1350
#, no-wrap
msgid "load-library"
msgstr ""

#. type: vindex
#: building.texi.orig:1351
#, no-wrap
msgid "load-prefer-newer"
msgstr ""

#. type: cindex
#: building.texi.orig:1352
#, no-wrap
msgid "load path for Emacs Lisp"
msgstr ""

#. type: Plain text
#: building.texi.orig:1372
msgid ""
"If an Emacs Lisp file is installed in the Emacs Lisp @dfn{load path} "
"(defined below), you can load it by typing @kbd{M-x load-library}, instead "
"of using @kbd{M-x load-file}.  The @kbd{M-x load-library} command prompts "
"for a @dfn{library name} rather than a file name; it searches through each "
"directory in the Emacs Lisp load path, trying to find a file matching that "
"library name.  If the library name is @samp{@var{foo}}, it tries looking for "
"files named @file{@var{foo}.elc}, @file{@var{foo}.el}, and "
"@file{@var{foo}}.  The default behavior is to load the first file found.  "
"This command prefers @file{.elc} files over @file{.el} files because "
"compiled files load and run faster.  If it finds that @file{@var{lib}.el} is "
"newer than @file{@var{lib}.elc}, it issues a warning, in case someone made "
"changes to the @file{.el} file and forgot to recompile it, but loads the "
"@file{.elc} file anyway.  (Due to this behavior, you can save unfinished "
"edits to Emacs Lisp source files, and not recompile until your changes are "
"ready for use.)  If you set the option @code{load-prefer-newer} to a "
"non-@code{nil} value, however, then rather than the procedure described "
"above, Emacs loads whichever version of the file is newest."
msgstr ""

#. type: Plain text
#: building.texi.orig:1377
msgid ""
"Emacs Lisp programs usually load Emacs Lisp files using the @code{load} "
"function.  This is similar to @code{load-library}, but is lower-level and "
"accepts additional arguments.  @xref{How Programs Do Loading,,, elisp, the "
"Emacs Lisp Reference Manual}."
msgstr ""

#. type: vindex
#: building.texi.orig:1378
#, no-wrap
msgid "load-path"
msgstr ""

#. type: Plain text
#: building.texi.orig:1389
msgid ""
"The Emacs Lisp load path is specified by the variable @code{load-path}.  Its "
"value should be a list of directory names (strings).  These directories are "
"searched, in the specified order, by the @kbd{M-x load-library} command, the "
"lower-level @code{load} function, and other Emacs functions that find Emacs "
"Lisp libraries.  A list entry in @code{load-path} can also have the special "
"value @code{nil}, which stands for the current default directory, but it is "
"almost always a bad idea to use this.  (If you find yourself wishing that "
"@code{nil} were in the list, most likely what you really want is to use "
"@kbd{M-x load-file}.)"
msgstr ""

#. type: Plain text
#: building.texi.orig:1397
msgid ""
"The default value of @code{load-path} is a list of directories where the "
"Lisp code for Emacs itself is stored.  If you have libraries of your own in "
"another directory, you can add that directory to the load path.  Unlike most "
"other variables described in this manual, @code{load-path} cannot be changed "
"via the Customize interface (@pxref{Easy Customization}), but you can add a "
"directory to it by putting a line like this in your init file (@pxref{Init "
"File}):"
msgstr ""

#. type: example
#: building.texi.orig:1400
#, no-wrap
msgid "(add-to-list 'load-path \"/path/to/my/lisp/library\")\n"
msgstr ""

#. type: cindex
#: building.texi.orig:1402
#, no-wrap
msgid "autoload"
msgstr ""

#. type: Plain text
#: building.texi.orig:1409
msgid ""
"Some commands are @dfn{autoloaded}; when you run them, Emacs automatically "
"loads the associated library first.  For instance, the @kbd{M-x compile} "
"command (@pxref{Compilation}) is autoloaded; if you call it, Emacs "
"automatically loads the @code{compile} library first.  In contrast, the "
"command @kbd{M-x recompile} is not autoloaded, so it is unavailable until "
"you load the @code{compile} library."
msgstr ""

#. type: vindex
#: building.texi.orig:1410
#, no-wrap
msgid "help-enable-auto-load"
msgstr ""

#. type: Plain text
#: building.texi.orig:1417
msgid ""
"Automatic loading can also occur when you look up the documentation of an "
"autoloaded command (@pxref{Name Help}), if the documentation refers to other "
"functions and variables in its library (loading the library lets Emacs "
"properly set up the hyperlinks in the @file{*Help*} buffer).  To disable "
"this feature, change the variable @code{help-enable-auto-load} to "
"@code{nil}."
msgstr ""

#. type: vindex
#: building.texi.orig:1418
#, no-wrap
msgid "load-dangerous-libraries"
msgstr ""

#. type: cindex
#: building.texi.orig:1419
#, no-wrap
msgid "Lisp files byte-compiled by XEmacs"
msgstr ""

#. type: Plain text
#: building.texi.orig:1424
msgid ""
"By default, Emacs refuses to load compiled Lisp files which were compiled "
"with XEmacs, a modified versions of Emacs---they can cause Emacs to crash.  "
"Set the variable @code{load-dangerous-libraries} to @code{t} if you want to "
"try loading them."
msgstr ""

#. type: node
#: building.texi.orig:1425
#, no-wrap
msgid "Lisp Eval"
msgstr ""

#. type: section
#: building.texi.orig:1426
#, no-wrap
msgid "Evaluating Emacs Lisp Expressions"
msgstr ""

#. type: cindex
#: building.texi.orig:1428
#, no-wrap
msgid "mode, Emacs Lisp"
msgstr ""

#. type: cindex
#: building.texi.orig:1429
#, no-wrap
msgid "evaluation, Emacs Lisp"
msgstr ""

#. type: findex
#: building.texi.orig:1431
#, no-wrap
msgid "emacs-lisp-mode"
msgstr ""

#. type: Plain text
#: building.texi.orig:1434
msgid ""
"Emacs Lisp mode is the major mode for editing Emacs Lisp.  Its mode command "
"is @kbd{M-x emacs-lisp-mode}."
msgstr ""

#. type: Plain text
#: building.texi.orig:1441
msgid ""
"Emacs provides several commands for evaluating Emacs Lisp expressions.  You "
"can use these commands in Emacs Lisp mode, to test your Emacs Lisp code as "
"it is being written.  For example, after re-writing a function, you can "
"evaluate the function definition to make it take effect for subsequent "
"function calls.  These commands are also available globally, and can be used "
"outside Emacs Lisp mode."
msgstr ""

#. type: kindex
#: building.texi.orig:1443 building.texi.orig:1465
#, no-wrap
msgid "M-:"
msgstr ""

#. type: table
#: building.texi.orig:1446
msgid ""
"Read a single Emacs Lisp expression in the minibuffer, evaluate it, and "
"print the value in the echo area (@code{eval-expression})."
msgstr ""

#. type: kindex
#: building.texi.orig:1446 building.texi.orig:1474
#, no-wrap
msgid "C-x C-e"
msgstr ""

#. type: table
#: building.texi.orig:1449
msgid ""
"Evaluate the Emacs Lisp expression before point, and print the value in the "
"echo area (@code{eval-last-sexp})."
msgstr ""

#. type: item
#: building.texi.orig:1449
#, no-wrap
msgid "@kbd{C-M-x} @r{(in Emacs Lisp mode)}"
msgstr ""

#. type: kbd{#1}
#: building.texi.orig:1450
#, no-wrap
msgid "M-x eval-defun"
msgstr ""

#. type: table
#: building.texi.orig:1453
msgid ""
"Evaluate the defun containing or after point, and print the value in the "
"echo area (@code{eval-defun})."
msgstr ""

#. type: kbd{#1}
#: building.texi.orig:1453
#, no-wrap
msgid "M-x eval-region"
msgstr ""

#. type: table
#: building.texi.orig:1455
msgid "Evaluate all the Emacs Lisp expressions in the region."
msgstr ""

#. type: kbd{#1}
#: building.texi.orig:1455
#, no-wrap
msgid "M-x eval-buffer"
msgstr ""

#. type: table
#: building.texi.orig:1457
msgid "Evaluate all the Emacs Lisp expressions in the buffer."
msgstr ""

#. type: kindex
#: building.texi.orig:1462
#, no-wrap
msgid "M-@key{colon}"
msgstr ""

#. type: findex
#: building.texi.orig:1467
#, no-wrap
msgid "eval-expression"
msgstr ""

#. type: Plain text
#: building.texi.orig:1473
msgid ""
"@kbd{M-:} (@code{eval-expression}) reads an expression using the minibuffer, "
"and evaluates it.  (Before evaluating the expression, the current buffer "
"switches back to the buffer that was current when you typed @kbd{M-:}, not "
"the minibuffer into which you typed the expression.)"
msgstr ""

#. type: findex
#: building.texi.orig:1475
#, no-wrap
msgid "eval-last-sexp"
msgstr ""

#. type: Plain text
#: building.texi.orig:1481
msgid ""
"The command @kbd{C-x C-e} (@code{eval-last-sexp}) evaluates the Emacs Lisp "
"expression preceding point in the buffer, and displays the value in the echo "
"area.  When the result of an evaluation is an integer, it is displayed "
"together with the value in other formats (octal, hexadecimal, and "
"character)."
msgstr ""

#. type: Plain text
#: building.texi.orig:1490
msgid ""
"If @kbd{M-:} or @kbd{C-x C-e} is given a prefix argument, it inserts the "
"value into the current buffer at point, rather than displaying it in the "
"echo area.  If the prefix argument is zero, any integer output is inserted "
"together with its value in other formats (octal, hexadecimal, and "
"character).  Such a prefix argument also prevents abbreviation of the output "
"according to the variables @code{eval-expression-print-level} and "
"@code{eval-expression-print-length} (see below)."
msgstr ""

#. type: kindex
#: building.texi.orig:1491
#, no-wrap
msgid "C-M-x @r{(Emacs Lisp mode)}"
msgstr ""

#. type: findex
#: building.texi.orig:1492
#, no-wrap
msgid "eval-defun"
msgstr ""

#. type: Plain text
#: building.texi.orig:1506
msgid ""
"The @code{eval-defun} command is bound to @kbd{C-M-x} in Emacs Lisp mode.  "
"It evaluates the top-level Lisp expression containing or following point, "
"and prints the value in the echo area.  In this context, a top-level "
"expression is referred to as a ``defun'', but it need not be an actual "
"@code{defun} (function definition).  In particular, this command treats "
"@code{defvar} expressions specially.  Normally, evaluating a @code{defvar} "
"expression does nothing if the variable it defines already has a value.  But "
"this command unconditionally resets the variable to the initial value "
"specified by the @code{defvar}; this is convenient for debugging Emacs Lisp "
"programs.  @code{defcustom} and @code{defface} expressions are treated "
"similarly.  Note that the other commands documented in this section do not "
"have this special feature."
msgstr ""

#. type: Plain text
#: building.texi.orig:1510
msgid ""
"With a prefix argument, @kbd{C-M-x} instruments the function definition for "
"Edebug, the Emacs Lisp Debugger.  @xref{Instrumenting, Instrumenting for "
"Edebug,, elisp, the Emacs Lisp Reference Manual}."
msgstr ""

#. type: findex
#: building.texi.orig:1511
#, no-wrap
msgid "eval-region"
msgstr ""

#. type: findex
#: building.texi.orig:1512
#, no-wrap
msgid "eval-buffer"
msgstr ""

#. type: Plain text
#: building.texi.orig:1516
msgid ""
"The command @kbd{M-x eval-region} parses the text of the region as one or "
"more Lisp expressions, evaluating them one by one.  @kbd{M-x eval-buffer} is "
"similar but evaluates the entire buffer."
msgstr ""

#. type: vindex
#: building.texi.orig:1517
#, no-wrap
msgid "eval-expression-print-level"
msgstr ""

#. type: vindex
#: building.texi.orig:1518
#, no-wrap
msgid "eval-expression-print-length"
msgstr ""

#. type: vindex
#: building.texi.orig:1519
#, no-wrap
msgid "eval-expression-debug-on-error"
msgstr ""

#. type: Plain text
#: building.texi.orig:1528
msgid ""
"The options @code{eval-expression-print-level} and "
"@code{eval-expression-print-length} control the maximum depth and length of "
"lists to print in the result of the evaluation commands before abbreviating "
"them.  Supplying a zero prefix argument to @code{eval-expression} or "
"@code{eval-last-sexp} causes lists to be printed in full.  "
"@code{eval-expression-debug-on-error} controls whether evaluation errors "
"invoke the debugger when these commands are used; its default is @code{t}."
msgstr ""

#. type: node
#: building.texi.orig:1529
#, no-wrap
msgid "Lisp Interaction"
msgstr ""

#. type: section
#: building.texi.orig:1530
#, no-wrap
msgid "Lisp Interaction Buffers"
msgstr ""

#. type: findex
#: building.texi.orig:1532
#, no-wrap
msgid "lisp-interaction-mode"
msgstr ""

#. type: Plain text
#: building.texi.orig:1537
msgid ""
"When Emacs starts up, it contains a buffer named @file{*scratch*}, which is "
"provided for evaluating Emacs Lisp expressions interactively.  Its major "
"mode is Lisp Interaction mode.  You can also enable Lisp Interaction mode by "
"typing @kbd{M-x lisp-interaction-mode}."
msgstr ""

#. type: findex
#: building.texi.orig:1538
#, no-wrap
msgid "eval-print-last-sexp"
msgstr ""

#. type: kindex
#: building.texi.orig:1539
#, no-wrap
msgid "C-j @r{(Lisp Interaction mode)}"
msgstr ""

#. type: Plain text
#: building.texi.orig:1547
msgid ""
"In the @file{*scratch*} buffer, and other Lisp Interaction mode buffers, "
"@kbd{C-j} (@code{eval-print-last-sexp}) evaluates the Lisp expression before "
"point, and inserts the value at point.  Thus, as you type expressions into "
"the buffer followed by @kbd{C-j} after each expression, the buffer records a "
"transcript of the evaluated expressions and their values.  All other "
"commands in Lisp Interaction mode are the same as in Emacs Lisp mode."
msgstr ""

#. type: vindex
#: building.texi.orig:1548
#, no-wrap
msgid "initial-scratch-message"
msgstr ""

#. type: Plain text
#: building.texi.orig:1554
msgid ""
"At startup, the @file{*scratch*} buffer contains a short message, in the "
"form of a Lisp comment, that explains what it is for.  This message is "
"controlled by the variable @code{initial-scratch-message}, which should be "
"either a string, or @code{nil} (which means to suppress the message)."
msgstr ""

#. type: findex
#: building.texi.orig:1555
#, no-wrap
msgid "ielm"
msgstr ""

#. type: Plain text
#: building.texi.orig:1562
msgid ""
"An alternative way of evaluating Emacs Lisp expressions interactively is to "
"use Inferior Emacs Lisp mode, which provides an interface rather like Shell "
"mode (@pxref{Shell Mode}) for evaluating Emacs Lisp expressions.  Type "
"@kbd{M-x ielm} to create an @file{*ielm*} buffer which uses this mode.  For "
"more information, see that command's documentation."
msgstr ""

#. type: section
#: building.texi.orig:1564
#, no-wrap
msgid "Running an External Lisp"
msgstr ""

#. type: cindex
#: building.texi.orig:1566
#, no-wrap
msgid "mode, Lisp"
msgstr ""

#. type: cindex
#: building.texi.orig:1567
#, no-wrap
msgid "Common Lisp"
msgstr ""

#. type: Plain text
#: building.texi.orig:1573
msgid ""
"Lisp mode is the major mode for editing programs written in general-purpose "
"Lisp dialects, such as Common Lisp.  Its mode command is @kbd{M-x "
"lisp-mode}.  Emacs uses Lisp mode automatically for files whose names end in "
"@file{.l}, @file{.lsp}, or @file{.lisp}."
msgstr ""

#. type: findex
#: building.texi.orig:1574
#, no-wrap
msgid "run-lisp"
msgstr ""

#. type: vindex
#: building.texi.orig:1575
#, no-wrap
msgid "inferior-lisp-program"
msgstr ""

#. type: kindex
#: building.texi.orig:1576
#, no-wrap
msgid "C-x C-z"
msgstr ""

#. type: Plain text
#: building.texi.orig:1584
msgid ""
"You can run an external Lisp session as a subprocess or @dfn{inferior "
"process} of Emacs, and pass expressions to it to be evaluated.  To begin an "
"external Lisp session, type @kbd{M-x run-lisp}.  This runs the program named "
"@command{lisp}, and sets it up so that both input and output go through an "
"Emacs buffer named @file{*inferior-lisp*}.  To change the name of the Lisp "
"program run by @kbd{M-x run-lisp}, change the variable "
"@code{inferior-lisp-program}."
msgstr ""

#. type: Plain text
#: building.texi.orig:1591
msgid ""
"The major mode for the @file{*lisp*} buffer is Inferior Lisp mode, which "
"combines the characteristics of Lisp mode and Shell mode (@pxref{Shell "
"Mode}).  To send input to the Lisp session, go to the end of the "
"@file{*lisp*} buffer and type the input, followed by @key{RET}.  Terminal "
"output from the Lisp session is automatically inserted in the buffer."
msgstr ""

#. type: kindex
#: building.texi.orig:1592
#, no-wrap
msgid "C-M-x @r{(Lisp mode)}"
msgstr ""

#. type: findex
#: building.texi.orig:1593
#, no-wrap
msgid "lisp-eval-defun"
msgstr ""

#. type: Plain text
#: building.texi.orig:1603
msgid ""
"When you edit a Lisp program in Lisp mode, you can type @kbd{C-M-x} "
"(@code{lisp-eval-defun}) to send an expression from the Lisp mode buffer to "
"a Lisp session that you had started with @kbd{M-x run-lisp}.  The expression "
"sent is the top-level Lisp expression at or following point.  The resulting "
"value goes as usual into the @file{*inferior-lisp*} buffer.  Note that the "
"effect of @kbd{C-M-x} in Lisp mode is thus very similar to its effect in "
"Emacs Lisp mode (@pxref{Lisp Eval}), except that the expression is sent to a "
"different Lisp environment instead of being evaluated in Emacs."
msgstr ""

#. type: findex
#: building.texi.orig:1604
#, no-wrap
msgid "scheme-mode"
msgstr ""

#. type: findex
#: building.texi.orig:1605
#, no-wrap
msgid "run-scheme"
msgstr ""

#. type: cindex
#: building.texi.orig:1607
#, no-wrap
msgid "mode, Scheme"
msgstr ""

#. type: kindex
#: building.texi.orig:1608
#, no-wrap
msgid "C-M-x @r{(Scheme mode)}"
msgstr ""

#. type: Plain text
#: building.texi.orig:1614
msgid ""
"The facilities for editing Scheme code, and for sending expressions to a "
"Scheme subprocess, are very similar.  Scheme source files are edited in "
"Scheme mode, which can be explicitly enabled with @kbd{M-x scheme-mode}.  "
"You can initiate a Scheme session by typing @kbd{M-x run-scheme} (the buffer "
"for interacting with Scheme is named @file{*scheme*}), and send expressions "
"to it by typing @kbd{C-M-x}."
msgstr ""
