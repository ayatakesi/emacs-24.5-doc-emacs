@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2001-2015 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Fixit
@chapter Commands for Fixing Typos
@cindex typos, fixing
@cindex mistakes, correcting

  このチャプターでは、編集中に間違いに気付いたときに便利なコマンドを説明します。これらのコマンドの中でもっとも基本的なのは、undoコマンド@kbd{C-/}です(これは@kbd{C-x
u}と@kbd{C-_}にもバインドされています)。これは1つのコマンドやコマンドの一部(@code{query-replace}の場合など)、または連続するいくつかの文字の挿入を取り消します。連続して@kbd{C-/}を繰り返すと、前へ前へと変更を取り消し、undo情報が利用できる限界までさかのぼって、変更を取り消します。

  ここで説明するコマンドとは別に、@key{DEL}
(@code{delete-backward-char})のような削除コマンドでもテキストを消去できます。これらのコマンドは、このマニュアルの前のチャプターで説明しています。@ref{Erasing}を参照してください。

@menu
* Undo::                     Undoコマンド。
* Transpose::                2つの文字、単語、行、リスト、...の入れ替え。
* Fixing Case::              最後に入力した文字の大文字小文字を訂正する。
* Spelling::                 単語またはファイル全体へのスペルチェッカーの適用。
@end menu

@node Undo
@section Undo
@cindex undo
@cindex changes, undoing

  @dfn{undo(取り消し)}コマンドは、バッファーのテキストにたいする最後の変更を無効にします。バッファーはそれぞれ変更を個別に記録しており、undoコマンドは常にカレントバッファーに適用されます。バッファーのレコードにより、バッファーにたいするすべての変更をundoできます。通常、個々の変種コマンドは、undoレコードに個別のエントリーを作成しますが、@code{query-replace}のようないくつかのコマンドは、undo操作に柔軟性をもたせるために、コマンドによる変更を複数のエントリーに分割します。連続した文字の挿入コマンドは、undo操作の冗長性をなくすために、通常1つのundoレコードにまとめられます。

@table @kbd
@item C-/
@itemx C-x u
@itemx C-_
カレントバッファーのundoレコードの、1エントリーでundoします(@code{undo})。
@end table

@kindex C-x u
@kindex C-_
@kindex C-/
@findex undo
  undoを開始するには、@kbd{C-/}(またはエイリアスの@kbd{C-_}か@kbd{C-x
u})をタイプします@footnote{@kbd{C-/}以外に、@code{undo}コマンドは@kbd{C-x
u}にもバインドされています。なぜならこれは初心者が記憶するのが簡単だからです。@samp{u}は``undo''に由来しています。このコマンドは@kbd{C-_}にもバインドされています。なぜならいくつかのテキスト端末では、@kbd{C-/}とタイプすることにより、@kbd{C-_}が入力されるからです。}。これは一番最近のバッファーにたいする変更を取り消して、バッファーが変更される前の位置にポイントを戻します。連続して@kbd{C-/}(またはそれのエイリアス)を繰り返すと、現在のバッファーにたいする変更を、前へ前へとさかのぼって取り消します。すでに記録されている変更がすべて取り消されているとき、undoコマンドはエラーをシグナルします。

@cindex redo
@findex undo-only
  undo以外のコマンドは、undoコマンドの順序性を損ないます。undo以外のコマンドを開始した時点から、undoしてきた一連のundoコマンド全体が、1つの変更としてundoレコードとして記録されます。したがってundoした変更を再適用するには、undoの順序性を損なわないような@kbd{C-f}のようなコマンドをタイプしてから、@kbd{C-/}でundoコマンドをundoします。

  以前のundoコマンドを再実行せずにundoを再開したいときは、かわりに@kbd{M-x
undo-only}を使います。これは@code{undo}と同様ですが、すでにundoした変更を再実行しません。

  バッファーをうっかり変更してしまったのに気付いたら、モードラインのアスタリスクが表示されなくなるまで@kbd{C-/}を繰り返しタイプするのが、もっとも簡単な復旧方法です。undoコマンドによりモードラインのアスタリスクが消えたとき、それはバッファーの内容がファイルを最後に読み込んだとき、または保存したときと同じ内容だということを意味します。バッファーを意図して変更したか覚えていないときは、@kbd{C-/}を1回タイプします。最後の変更がundoされたのを確認して、それが意図した変更なのか確かめます。もしそれが意図しない変更だったならundoしたままにします。意図した変更だった場合、上で説明した方法で変更を再実行します。

@cindex selective undo
@kindex C-u C-/
  アクティブなリージョンがあるとき、@code{undo}は@dfn{選択的なundo(selective
undo)}を行います。これはバッファー全体ではなく、リージョンにたいして一番最近の変更をundoします。しかしTransient
Markモードがオフのとき(@ref{Disabled Transient
Mark}を参照してください)、@kbd{C-/}は、リージョンではなく、常にバッファー全体を操作します。この場合@code{undo}コマンドにプレフィクス引数を指定（@kbd{C-u
C-/})することにより、選択的なundoができます。同じリージョンにたいしてさらに変更をundoしたいときは、@code{undo}コマンドを繰り返します(プレフィクス引数は必要ありません)。

  undoレコードを作らない、特別なバッファーがいくつかあります。それは名前がスペースで始まるバッファーです。これらのバッファーはEmacsにより内部的に使用されており、通常ユーザーが閲覧したり編集しないテキストを保持します。

@vindex undo-limit
@vindex undo-strong-limit
@vindex undo-outer-limit
@cindex undo limit
  バッファーにたいするundo情報が大きくなりすぎたとき、Emacsは一番古いレコードを、時々(@dfn{ガベージコレクション(garbage
collection)の間})廃棄します。変数@code{undo-limit}、@code{undo-strong-limit}、@code{undo-outer-limit}をセットすることにより、どれだけのundo情報を保持するか指定することができます。これらの値はバイト数で指定します。

  変数@code{undo-limit}は、ソフトリミットをセットします。Emacsはこのサイズに達するまでのコマンドのundoデータを保持します。制限を超えることもあり得ますが、これを超える古いデータは保持しません。デフォルト値は80000です。変数@code{undo-strong-limit}は、厳密なリミット(stricter
limit)をセットします。この制限を超えるような以前のコマンド(一番最近のコマンドではない)は記憶されません。@code{undo-strong-limit}のデフォルト値は120000です。

  これらの変数の値にかかわらず、一番最近の変更はundo情報が@code{undo-outer-limit}(通常は12,000,000)より大きくならない限り、廃棄されることはありません。もしこれを超えるような場合、Emacsはundoデータを廃棄して、それにたいする警告を発します。これは一番最近のコマンドをundoできない唯一の状況です。これが発生した場合、将来同じことが起こらないように@code{undo-outer-limit}の値を増やすことができます。しかしコマンドがそのような大きなundoデータを作るとは考えられない場合、それは多分バグなので、それを報告すべきです。@ref{Bugs,,
Reporting Bugs}を参照してください。

@node Transpose
@section Transposing Text

@table @kbd
@item C-t
2つの文字を入れ替えます(@code{transpose-chars})。
@item M-t
2つの単語を入れ替えます(@code{transpose-words})。
@item C-M-t
バランスのとれた2つの式を入れ替えます(@code{transpose-sexps})。
@item C-x C-t
2つの行を入れ替えます(@code{transpose-lines})。
@end table

@kindex C-t
@findex transpose-chars
  2つの文字を入れ違いに入力してしまう間違いはよくありますが、それらが隣接しているときは@kbd{C-t}(@code{transpose-chars})コマンドで訂正できます。通常@kbd{C-t}はポイントの左右にある文字を入れ替えます。行末でこのコマンドを使う場合、最後の文字と改行を入れ替えるのはおそらく無意味なので、@kbd{C-t}は行末の2文字を入れ替えます。このような入れ違いミスにすぐ気付いたときは、@kbd{C-t}だけで訂正できます。すぐに間違いに気付かなかった場合、@kbd{C-t}をタイプする前に、入れ替えて入力してしまった文字の間にカーソルを移動しなければなりません。単語の最後の文字とスペースを入れ替えて入力してしまった場合、そこに戻るには単語移動コマンドが良い方法です。それ以外では、逆向きの検索(@kbd{C-r})が最善な方法の場合があります。@ref{Search}を参照してください。

@kindex C-x C-t
@findex transpose-lines
@kindex M-t
@findex transpose-words
@c Don't index C-M-t and transpose-sexps here, they are indexed in
@c programs.texi, in the "List Commands" node.
@c @kindex C-M-t
@c @findex transpose-sexps
  @kbd{M-t}は、ポイントの前にある単語と、後にある単語を入れ替えます(@code{transpose-words})。このコマンドはポイントより後方、またはポイントがある単語を前方に移動して、ポイントをその後に移動します。文字の間にある区切り文字は移動しません。たとえば@w{@samp{FOO,
BAR}}は、@samp{@w{BAR FOO,}}ではなく、@w{@samp{BAR, FOO}}に入れ替わります。

  @kbd{C-M-t}
(@code{transpose-sexps})も似ていますが、これは2つの式(@ref{Expressions}を参照してください)を入れ替えます。そして@kbd{C-x
C-t}
(@code{transpose-lines})は、行を入れ替えます。これらは@kbd{M-t}と同様に動作しますが、入れ替えを行うテキスト単位が異なります。

  入れ替えコマンドに数引数を指定すると、反復回数になります。これは入れ替えコマンドに、ポイントより前(またはポイントがある)の移動させる文字(または単語、式、行)を、何文字(または単語、式、行)後に移動させるか指示します。たとえば@kbd{C-u
3
C-t}は、ポイントの前にある文字を3文字後ろに移動します。つまり@samp{f@point{}oobar}は@samp{oobf@point{}ar}に変更されます。これは@kbd{C-t}を3回繰り返したのと同じです@kbd{C-u
- 4 M-t}はポイントの前にある単語を、後方に単語4つ分移動します。@kbd{C-u -
C-M-t}は、引数を指定しない@kbd{C-M-t}の効果を取り消します。

  数引数0には特別な意味が割り当てられています(繰り返し回数としては、0に意味がありません)。これはポイントの後ろで終わる文字(または単語、式、行)を、マーク位置で終わる文字(または単語、式、行)と入れ替えます。

@node Fixing Case
@section Case Conversion

@table @kbd
@item M-- M-l
最後に入力した単語を小文字に変換します。@kbd{Meta--}はメタとマイナスであることに注意して下さい。
@item M-- M-u
最後に入力した単語をすべて大文字に変換します。
@item M-- M-c
最後に入力した単語の先頭を大文字、それ以外を小文字に変換します。
@end table

@kindex M-@t{-} M-l
@kindex M-@t{-} M-u
@kindex M-@t{-} M-c
  単語の大文字小文字を間違えてタイプするのは、とても一般的な間違えです。そのため、単語の大文字小文字の変換コマンド@kbd{M-l}、@kbd{M-u}、@kbd{M-c}に負の数引数を指定すると、カーソルを移動しないという特性があります。最後に入力した単語のタイプミスに気付いたら、単に大文字小文字を変換して、タイプを続けることができます。@ref{Case}を参照してください。

@node Spelling
@section Checking and Correcting Spelling
@cindex spelling, checking and correcting
@cindex checking spelling
@cindex correcting spelling

  このセクションでは、1つの単語、またはバッファーの一部のスペルをチェックするコマンドを説明します。これらのコマンドはAspell、Ispell、Hunspellのようなスペルチェッカープログラムがインストールされている場合だけ機能します。これらのプログラムはEmacsの一部ではありませんが、GNU/Linuxまたは他のフリーなオペレーティングシステムには、通常1つはインストールされています。
@ifnottex
@ref{Top, Aspell,, aspell, The Aspell Manual}を参照してください。
@end ifnottex

@table @kbd
@item M-$
ポイントがある単語スペルの、チェックと訂正をします(@code{ispell-word})。リージョンがアクティブのときは、リージョンに含まれるすべての単語にたいして行います。
@item M-x ispell
バッファーにある単語スペルの、チェックと訂正をします。リージョンがアクティブのときは、リージョンに含まれるすべての単語にたいして行います。
@item M-x ispell-buffer
バッファーにある単語スペルの、チェックと訂正をします。
@item M-x ispell-region
リージョンにある単語スペルの、チェックと訂正をします。
@item M-x ispell-message
メールメッセージのドラフト(引用部分を除く)にたいして、単語スペルのチェックと訂正をします。
@item M-x ispell-change-dictionary @key{RET} @var{dict} @key{RET}
Aspell/Ispell/Hunspellのプロセスを再起動して、@var{dict}を辞書として使用させます。
@item M-x ispell-kill-ispell
Aspell/Ispell/Hunspellのサブプロセスをkillします。
@item M-@key{TAB}
@itemx @key{ESC} @key{TAB}
ポイントの前にある単語を、スペル辞書をもとに補完します(@code{ispell-complete-word})。
@item M-x flyspell-mode
スペルミスした単語をハイライトする、Flyspellモードを有効にします。
@item M-x flyspell-prog-mode
コメントと文字列にたいして、Flyspellモードを有効にします。
@end table

@kindex M-$
@findex ispell-word
  ポイントの前または周囲にある単語スペルをチェックしたり訂正するには、@kbd{M-$}
(@code{ispell-word})をタイプします。リージョンがアクティブのときは、リージョン内のすべての単語スペルをチェックします。@ref{Mark}を参照してください(Transient
Markモードがオフのとき、@kbd{M-$}はリージョンを無視して、常にポイントの前または周囲の単語にたいして動作します。@ref{Disabled
Transient Mark}を参照してください)。

@findex ispell
@findex ispell-buffer
@findex ispell-region
@cindex spell-checking the active region
  同様に、コマンド@kbd{M-x
ispell}はリージョンがアクティブのときはリージョン、それ以外のときはバッファー全体にたいして、スペルチェックを行います。コマンド@kbd{M-x
ispell-buffer}および@kbd{M-x
ispell-region}は、スペルチェックをバッファー全体にたいして行うのか、リージョンにたいして行うかを明示します。このコマンドはバッファー全体をチェックしますが、インデントされているテキストと、以前のメッセージの引用と思われるテキストはチェックしません。@ref{Sending
Mail}を参照してください。

  これらのコマンドは、正しくないと思われる単語に出会うと、それをどうするかを尋ねます。通常は番号が振られた``近い単語(near-misses)''(正しくないと思われる単語に似た単語)のリストを表示します。これにたいして1文字をタイプして応答しなければなりません。以下は有効な応答文字です。

@table @kbd
@item @var{数字}
今回だけは近い単語の一覧で単語を置き換えます。近い単語には番号が振られており、選択するにはその番号をタイプします。

@item @key{SPC}
その単語を間違いと判断することは変更しませんが、その単語をここでは変更せずスキップします。

@item r @var{new} @key{RET}
今回は単語を@var{new}で置き換えます(置換文字列にスペルエラーがないか再スキャンされます)。

@item R @var{new} @key{RET}
単語を@var{new}で置き換え、@code{query-replace}を実行します。これによりバッファーの他の箇所の間違えを置換できます(置換にスペルエラーがないか再スキャンされます)。

@item a
正しくないと思われる単語を正しいものとして受け入れますが、それは今回の編集セッションに限られます。

@item A
正しくないと思われる単語を正しいものとして受け入れますが、それは今回の編集セッションとそのバッファーに限られます。

@item i
この単語をプライベートな辞書ファイルに挿入するので、今後(将来のセッションを含めて)Aspell/Ispell/Hunspellはその単語を正しく認識します。

@item m
@kbd{i}と同様ですが、辞書の補完情報も指定できます。

@item u
この単語の小文字バージョンを、プライベートな辞書ファイルに挿入します。

@item l @var{word} @key{RET}
@var{word}にマッチする単語を辞書から探します。これらの単語は``近い単語''の新しいリストになるので、置換で数字をタイプして選択できるようになります。@var{word}にはワイルドカードとして@samp{*}を使うことができます。

@item C-g
@itemx X
対話的なスペルチェックを終了します(ポイントはチェックされた単語の位置に残されます)。@kbd{C-u M-$}でチェックを再開できます。

@item x
対話的なスペルチェックを終了します(ポイントはチェックを開始したときの位置に戻ります)。

@item q
対話的なスペルチェックを終了して、スペルチェッカーのサブプロセスをkillします。

@item ?
オプションの一覧を表示します。
@end table

@findex ispell-complete-word
  Textモードおよびそれに関連するモードでは、@kbd{M-@key{TAB}}
(@code{ispell-complete-word})で、スペル訂正にもとづくバッファー内補完を行います。単語の最初の部分を入力してから@kbd{M-@key{TAB}}をタイプすると、補完一覧が表示されます(ウィンドウマネージャーが@kbd{M-@key{TAB}}を横取りしてしまう場合は、@kbd{@key{ESC}
@key{TAB}}または@kbd{C-M-i}をタイプします)。補完対象には番号か文字が振られているので、その番号か文字をタイプして選択します。

@cindex @code{ispell} program
@findex ispell-kill-ispell
  1度プロセスが開始されれば、Aspell/Ispell/Hunspellのサブプロセスは待機状態で実行を続けるので、一連のスペルチェックコマンドは素早く完了します。プロセスを終了させたいときは@kbd{M-x
ispell-kill-ispell}を使います。スペルの訂正を行うとき以外プロセスがCPU時間を使うことはないので、これは通常必要ありません。

@vindex ispell-dictionary
@vindex ispell-local-dictionary
@vindex ispell-personal-dictionary
@findex ispell-change-dictionary
  Ispell/Aspell/Hunspellは、スペルを2つの辞書から探します。それは標準辞書と個人用辞書です。標準辞書は変数@code{ispell-local-dictionary}で指定されます。これが@code{nil}のときは、変数@code{ispell-dictionary}で指定されます。両方が@code{nil}のとき、スペルプログラムは既定の辞書を使います。コマンド@kbd{M-x
ispell-change-dictionary}は、バッファーにたいする標準辞書をセットしてからサブプロセスを再起動することにより、これにより異なる標準辞書を使うことができます。個人用の辞書は、変数@code{ispell-personal-dictionary}で指定します。これが@code{nil}のとき、スペルプログラムは個人辞書を既定の場所から探します。

@vindex ispell-complete-word-dict
  単語の補完には別の辞書が使われます。変数@code{ispell-complete-word-dict}は、この辞書のファイル名を指定します。補完辞書はメインの辞書として使うことができず、追加の情報ももたないので、別のものでなければなりません。補完辞書のないスペルチェック辞書をもつ言語もいくつかあります。

@cindex Flyspell mode
@cindex mode, Flyspell
@findex flyspell-mode
  Flyspellモードは、タイプした単語のスペルを自動的にチェックするマイナーモードです。認識できない単語を見つけると、その単語をハイライトします。@kbd{M-x
flyspell-mode}とタイプすると、カレントバッファーのFlyspellモードを切り替えます。すべてのTextバッファーでFlyspellモードを有効にするには、@code{text-mode-hook}に、@code{flyspell-mode}を追加します。@ref{Hooks}を参照してください。

  Flyspellモードでスペルミスした単語がハイライトされているときは、それを@kbd{Mouse-2}でクリックすることにより、利用可能な訂正とアクションのメニューを表示できます。手入力により、自分の好きな方法で単語を訂正することもできます。

@findex flyspell-prog-mode
  Flyspell
Progモードは通常のFlyspellモードと同じように機能しますが、コメントと文字列に含まれた単語だけをチェックします。この機能はプログラムを編集する場合に便利です。@kbd{M-x
flyspell-prog-mode}をタイプして、現在のバッファーにたいするこのモードの有効と無効を切り替えます。すべてのプログラミングに関連したモードでこのモードを有効にするには、@code{prog-mode-hook}に@code{flyspell-prog-mode}を追加します(@ref{Hooks}を参照してください)。
