@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 1999-2015 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Files
@chapter File Handling
@cindex files

  オペレーティングシステムは@dfn{ファイル}にデータを永続化するので、Emacsで編集するテキストの大部分はファイルから読み込んで、最終的にファイルに格納します。

  ファイルを編集するには、Emacsにファイルを読み込み、ファイルのテキストを含むバッファーを準備するよう、指示しなければなりません。これを、ファイルの@dfn{visit(訪問)}と呼びます。編集コマンドは直接バッファーのテキスト、つまりEmacs内部のコピーに適用されます。変更がファイルに反映されるのは、バッファーをファイルに@dfn{保存(save)}したときだけです。

  ファイルのvisitや保存に加え、Emacsはファイルの削除、コピー、名前の変更、ファイルへの追加、ファイルの複数バージョンの保持、ディレクトリーの操作を行うことができます。

@menu
* File Names::               ファイル名引数をタイプ、編集する方法。
* Visiting::                 ファイルをvisitしてEmacsが編集する準備をする。
* Saving::                   保存して変更を永続化する。
* Reverting::                保存されていないすべての変更を取り消して前の状態に戻す。
@ifnottex
* Autorevert:: 非ファイルバッファーの自動リバートについて。
@end ifnottex
* Auto Save::                定期的な自動保存によりデータを失うことから守る。
* File Aliases::             1つのファイルにたいする複数の名前を処理する。
* Directories::              ファイルディレクトリーの削除、作成、一覧。
* Comparing Files::          2つのファイルの異なる部分を探す。
* Diff Mode::                ファイルの異なる部分を編集するモード。
* Misc File Ops::            ファイルにたいして行うその他のコマンド。
* Compressed Files::         圧縮されたファイルへのアクセス。
* File Archives::            tar、zip、jar、...などのアーカイブファイルにたいする操作。
* Remote Files::             他のマシンにあるファイルへのアクセス。
* Quoted File Names::        ファイル名に含まれる特別な文字のクォート。
* File Name Cache::          補完のための、よく使うファイルの一覧。
* File Conveniences::        ファイルを探すための便利な機能。
* Filesets::                 複数ファイルの処理。
@end menu

@node File Names
@section File Names
@cindex file names

@cindex default file name
  ファイルを操作するEmacsコマンドの多くは、ミニバッファー(@ref{Minibuffer File}を)を使って、ファイル名の指定を求めます。

  ミニバッファーでは、通常の補完およびヒストリーコマンドを使うことができます(@ref{Minibuffer}を参照してください)。ファイル名の補完では、ファイル名の拡張子が変数@code{completion-ignored-extensions}に含まれているファイルは無視されます(@ref{Completion
Options}を参照してください)。またほとんどのコマンドは、ファイルの読み込みにおいて、``確認をともなう寛大な補完(permissive
completion with
confirmation)''を使います。この補完では、存在しないファイル名が許されますが、存在しないファイル名の入力を完了するために@key{RET}をタイプすると、Emacsは@samp{[Confirm]}を表示し、この確認に同意するために2番目の@key{RET}をタイプしなければなりません。詳細については、@ref{Completion
Exit}を参照してください。

@cindex default directory
@vindex default-directory
@vindex insert-default-directory
  それぞれのバッファーは、バッファーローカルな変数@code{default-directory}に、@dfn{デフォルトのディレクトリー}を格納しています。ミニバッファーを使ってファイル名を読み取るとき、通常Emacsはミニバッファーの初期内容として、デフォルトディレクトリーを挿入します。変数@code{insert-default-directory}を@code{nil}に変更することにより、この挿入を抑制できます。常にEmacsは任意の相対パスで指定されたファイル名を、デフォルトディレクトリーにたいする相対パスとみなします。たとえばディレクトリーを指定しないファイル名は、デフォルトディレクトリーのファイルを指定します。

@findex cd
@findex pwd
  ファイルをvisitするとき、Emacsはvisitしているバッファーの@code{default-directory}に、そのファイルのディレクトリーをセットします。@kbd{C-x
b}のようなコマンドを通じて、ファイルをvisitしていないバッファーを新たに作成すると、通常そのバッファーのデフォルトディレクトリーは、現在のバッファーのデフォルトディレクトリーをコピーします。現在のバッファーの@code{default-directory}の値を見るために、@kbd{M-x
pwd}コマンドを使用できます。@kbd{M-x
cd}コマンドはディレクトリー名の入力を求め、バッファーの@code{default-directory}もそのディレクトリーをセットします(これを行うことによりバッファーのファイル名は変更されません)。

  例として、ファイル@file{/u/rms/gnu/gnu.tasks}をvisitしているとします。このときデフォルトディレクトリーは@file{/u/rms/gnu/}にセットされます。ファイル名を読み取るコマンドを呼び出して、ミニバッファーでディレクトリー名を省略して単に@samp{foo}と入力すると、これはファイル@file{/u/rms/gnu/foo}を指定したことになります。@samp{../.login}と入力すると@file{/u/rms/.login}、@samp{new/foo}と入力すると@file{/u/rms/gnu/new/foo}を指定したことになります。

  ミニバッファーにファイル名をタイプするとき、2つのショートカットを使うことができます。2つのスラッシュは、``2番目のスラッシュの前にあるすべてを無視する''と解釈されます。そして@samp{~/}は、ユーザーのホームディレクトリーと解釈されます。@ref{Minibuffer
File}を参照してください。

@cindex environment variables in file names
@cindex expansion of environment variables
@cindex @code{$} in file names
  @anchor{File Names with $}文字@samp{$}は、ファイル名を置き換える環境変数の代用として使われます。環境変数の名前は、@samp{$}の後ろのすべての英数字から構成されます。@samp{$}の後ろの、大カッコ(braces)に囲まれた変数名も使用できます。たとえばシェルコマンド@command{export
FOO=rms/hacks}は、名前が@env{FOO}の環境変数をセットするために使われます。すると@file{/u/$FOO/test.c}と@file{/u/$@{FOO@}/test.c}はどちらも、@file{/u/rms/hacks/test.c}の省略形となります。環境変数が定義されていないときは、何の置き換えも発生せず、文字@samp{$}はそれ自身を意味します。環境変数は、それがEmacsの開始前に適用されたときだけ、Emacsに影響を与えることに注意してください。

  @samp{$}により環境変数が展開されるようなとき、名前に@samp{$}を含むファイルにアクセスする場合は、@samp{$$}とタイプします。1つの@samp{$}が環境変数を展開するのと同時に、2つのペアは1つの@samp{$}に変換されます。かわりにファイル名を@samp{/:}でクォートすることもできます(@ref{Quoted
File Names}を参照してください)。名前が文字@samp{~}で始まるファイル名も、@samp{/:}でクォートするべきです。

  ファイル名に非@acronym{ASCII}文字を含めることができます。@ref{File Name Coding}を参照してください。

@node Visiting
@section Visiting Files
@cindex visiting files
@cindex open file

@table @kbd
@item C-x C-f
ファイルをvisitします(@code{find-file})。
@item C-x C-r
変更を許さない閲覧用として、ファイルをvisitします(@code{find-file-read-only})。
@item C-x C-v
最後にvisitしたファイルとは異なるファイルを、かわりにvisitします(@code{find-alternate-file})。
@item C-x 4 f
別のウィンドウでファイルをvisitします(@code{find-file-other-window})。選択されたウィンドウに表示されているものは変更しません。
@item C-x 5 f
新しいフレームでファイルをvisitします(@code{find-file-other-frame})。選択されたフレームに表示されているものは変更しません。
@item M-x find-file-literally
内容を変換せずにファイルをvisitします。
@end table

@cindex files, visiting and saving
@cindex saving files
  ファイルを@dfn{Visiting(訪問)}するとは、そのファイル内容をEmacsのバッファーに読み込むことを意味するので、それを編集することができます。Emacsはvisitするファイルごとに、新しいバッファーを作成します。

@kindex C-x C-f
@findex find-file
  ファイルをvisitするには、@kbd{C-x C-f}
(@code{find-file})とタイプして、visitしたいファイルの名前をミニバッファーで入力します。ミニバッファーでは、@kbd{C-g}をタイプして、コマンドを中止することができます。ミニバッファーでのファイル名の入力についての詳細は、@ref{File
Names}を参照してください。

  ファイルは存在するが、システムが読み込みを許さない場合、エコーエリアにエラーメッセージが表示されます。それ以外の場合、スクリーンに新しいテキストが表示され、モードラインバッファー名が表示されることで、@kbd{C-x
C-f}が成功したことを知ることができます。通常Emacsは、ファイル名からディレクトリー名を省いて、バッファー名を作ります。たとえば@file{/usr/rms/emacs.tex}という名前のファイルは、バッファー名@samp{emacs.tex}となります。その名前のバッファーがすでにある場合、Emacsは一意な名前を作ります。通常の方法はディレクトリー名にもとづく接尾辞の追加です(たとえば@samp{<rms>}、@samp{<tmp>}など)が、違う方法を選択することもできます。@ref{Uniquify}を参照してください。

@cindex creating files
  新しいファイルを作成するには、同じコマンド@kbd{C-x C-f}を使ってvisitするだけです。Emacsはエコーエリアに@samp{(New
file)}と表示しますが、他の点では既存の空のファイルをvisitしたのと同じく振る舞います。

@cindex modified (buffer)
  ファイルをvisitした後で編集コマンドにより行われた変更は、Emacsのバッファーに反映されます。バッファーを@dfn{保存(save)}するまでは、visitしているファイルに影響はありません。バッファーが保存されていない変更を含むとき、そのバッファーが@dfn{変更されている(modified)}といいます。これはバッファーを保存しなければ、その変更が失われることを意味します。モードラインの左余白の近くに2つのアスタリスクが表示され、バッファーが変更されていることを示します。

  すでにEmacsがvisitしているファイルをvisitした場合、@kbd{C-x
C-f}は他のコピーを作らず既存のバッファーに切り替えます。切り替えを行う前に、最後にvisitまたは保存した後にファイルが変更されているか確認します。もしファイルが変更されているとき、Emacsはそれの再読み込みを提案します。

@vindex large-file-warning-threshold
@cindex file, warning when size is large
@cindex size of file, warning when visiting
@cindex maximum buffer size exceeded, error message
  @code{large-file-warning-threshold}
(デフォルトは10000000で、これは約10MB)より大きなファイルのvisitを試みると、Emacsは最初に確認を求めます。@kbd{y}を応えることにより、ファイルのvisitを続けます。しかしEmacsは、Emacsバッファーの最大サイズ(Emacsが割り当てられるメモリー量の制限と、Emacsが扱える整数により制限されます)を超えるバッファーは、visitできないことに注意してください。この場合、Emacsは最大バッファーサイズを超えた旨を知らせるエラーメッセージを表示します。

@cindex wildcard characters in file names
@vindex find-file-wildcards
  ファイル名にシェル形式のワイルドカード文字が含まれている場合、Emacsはそれにマッチするすべてのファイルをvisitします。(大文字小文字を区別しないファイルシステムでは、Emacsは大文字小文字に関係なくワイルドカードをマッチします)。ワイルドカードには@samp{?}、@samp{*}および@samp{[@dots{}]}シーケンスが含まれます。ミニバッファーでワイルドカード@samp{?}をファイル名に入力するには、@kbd{C-q
?}とタイプする必要があります。ワイルドカード文字を実際に名前に含むファイルをvisitする方法についての情報は、@ref{Quoted File
Names}を参照してください。@code{find-file-wildcards}をカスタマイズして、ワイルドカード機能を無効にすることができます。

@kindex C-x C-v
@findex find-alternate-file
  無意識に間違ったファイル名をタイプして違うファイルをvisitした場合、@kbd{C-x C-v}
(@code{find-alternate-file})で実際に望むファイルをvisitできます。@kbd{C-x C-v}は@kbd{C-x
C-f}と似ていますが、これは現在のバッファーをkillします(変更されている場合は最初に保存するか確認を求めます)。@kbd{C-x
C-v}がvisitするファイルの名前を読み取るときは、ミニバッファーにデフォルトのファイル名全体を挿入して、ポイントをディレクトリー名の後に置きます。これは名前を少し間違えた場合などに便利です。

@vindex find-file-run-dired
  実際はディレクトリーであるファイルを``visit''したとき、EmacsはEmacsのディレクトリーブラウザーのDiredを呼び出します。@ref{Dired}を参照してください。この振る舞いは、変数@code{find-file-run-dired}を@code{nil}にセットすることにより無効にできます。この場合、ディレクトリーをvisitするとエラーになります。

  実際には他のファイルの集まりであるような@dfn{アーカイブファイル(file
archives)}の場合、アーカイブされたメンバーを操作できる、Diredに似た環境を呼び出す特別なモードでvisitします。これらの機能については、@ref{File
Archives}を参照してください。

  オペレーティングシステムが変更を許していない、または読み取り専用にしているファイルをvisitした場合、Emacsもバッファーを読み取り専用にするので、保存すると問題を起こすような変更を防ぐことができます。@kbd{C-x
C-q} (@code{read-only-mode})で、バッファーを書き込み可能にできます。@ref{Misc Buffer}を参照してください。

@kindex C-x C-r
@findex find-file-read-only
  予期せぬ入力による変更を防ぐために、読み込み専用でファイルをvisitしたい場合は、@kbd{C-x C-f}のかわりにコマンド@kbd{C-x
C-r} (@code{find-file-read-only})でvisitします。

@kindex C-x 4 f
@findex find-file-other-window
  @kbd{C-x 4 f} (@code{find-file-other-window})は@kbd{C-x
C-f}と同様ですが、指定したファイルを含むバッファーは、別のウィンドウで選択されます。@kbd{C-x 4
f}の前に選択されていたウィンドウは、すでに表示していたのと同じバッファーの表示を続けます。1つのウィンドウしか表示されていないときにこのコマンドを使うと、これはウィンドウを2つに分割し、1つのウィンドウには前に表示されていたのと同じバッファー、別の1つには新しい要求されたファイルを表示します。@ref{Windows}を参照してください。

@kindex C-x 5 f
@findex find-file-other-frame
  @kbd{C-x 5 f}
(@code{find-file-other-frame})も同様ですが、新しいフレームををオープンするか、指定したファイルをすでに表示している既存のフレームを選択します。@ref{Frames}を参照してください。

@cindex file selection dialog
  グラフィカルなディスプレーでは、ファイルをvisitする追加の方法が２つあります。1つ目は、Emacsが適したGUIツールキットによりビルドされているとき、マウスによるコマンドの呼び出し(メニューバーやツールバーのクリックによる)は、ミニバッファーでファイル名の入力を求める代わりに、そのツールキット標準の``ファイル選択(File
Selection)''ダイアログを表示します。GNU/LinuxおよびUnixプラットフォームでは、GTK、LessTif、Motifツールキットとともに構築されていると、Emacsはこれを行います。MS-WindowsとMacでは、GUIバージョンのデフォルトにより行われます。これをカスタマイズする情報については、@ref{Dialog
Boxes}を参照してください。

  2つ目は、Emacsはの``ドラッグアンドドロップ(drag and
drop)''サポートで、通常のEmacsウィンドウにファイルをドロップすることにより、そのウィンドウでファイルをvisitします。例外としてDiredバッファーを表示しているウィンドウにファイルをドロップすると、表示されているディレクトリーにファイルを移動またはコピーします。詳細については@ref{Drag
and Drop}と@ref{Misc Dired Features}を参照してください。

  テキスト端末、およびGUIツールキットなしでビルドされているグラフィカルなディスプレーでは、メニューバーの``File''メニューから、``Visit
New File''アイテムを選択することにより、ファイルをvisitできます。

  文字エンコーディングと使用されている改行規則を検知するために、Emacsは自動的に内容をスキャンします。そして、それらをEmacsの内部エンコーディングとバッファーの改行規則に変換します。バッファーを保存するとき、Emacsは逆の変換を行い、元のエンコーディングと改行規則でファイルをディスクに書き込みます。@ref{Coding
Systems}を参照してください。

@findex find-file-literally
  ファイルにたいして特別なエンコーディングや変換を行わずに、非@acronym{ASCII}文字のシーケンスとして編集したいときは、@kbd{M-x
find-file-literally}コマンドを使います。これは@kbd{C-x C-f}と同様ですが、フォーマット変換(@ref{Format
Conversion,, Format Conversion, elisp, the Emacs Lisp Reference
Manual}を参照してください)、文字コード変換(@ref{Coding
Systems}を参照してください)、自動解凍(@ref{Compressed
Files}を参照してください)を行わず、@code{require-final-newline}による最後の改行も追加しません(@ref{Customize
Save}を参照してください)。同じファイルをすでに通常(非リテラル)の方法でvisitしている場合、このコマンドはそれをリテラル(そのままの文字の列)としてvisitするかを尋ねます。

@vindex find-file-hook
@vindex find-file-not-found-functions
  2つの特別なフック変数により、ファイルをvisitする操作を変更して拡張することができます。存在しないファイルをvisitすることにより、@code{find-file-not-found-functions}の関数が実行されます。この変数は関数のリストを保有し、それらはどれか1つが非@code{nil}を返すまで、(引数を指定せずに)1つずつ呼び出されます。これはノーマルフックではないため、その事実を示すために名前の最後が@samp{-hook}ではなく、@samp{-functions}で終わっています。

  ファイルが存在するしないにかかわらず、ファイルをvisitするのに成功すると、引数なしで関数@code{find-file-hook}を呼び出します。この変数はノーマルフックです。ファイルが存在しない場合、最初に@code{find-file-not-found-functions}を実行します。@ref{Hooks}を参照してください。

  ファイルを編集するために自動的にメジャーモードを指定し(@ref{Choosing
Modes}を参照してください)、そのファイルのために特別なローカル変数を定義する方法がいくつかあります(@ref{File
Variables}を参照してください)。

@node Saving
@section Saving Files

  Emacsでのバッファーの@dfn{保存(Saving)}は、バッファーの内容を、そのバッファーによりvisitされているファイルに書き戻すことを意味します。

@menu
* Save Commands::            ファイルを保存するコマンド。
* Backup::                   Emacsがファイルの古いバージョンを保存する方法。
* Customize Save::           ファイルの保存のカスタマイズ。
* Interlocking::             Emacsが2人のユーザーによる1つのファイルへの同時編集から保護する方法。
* Shadowing: File Shadowing.  ファイルを自動的に"shadows"コピーする。
* Time Stamps::              Emacsによる保存されたファイルのタイムスタンプの更新。
@end menu

@node Save Commands
@subsection Commands for Saving Files

  ファイルの保存と書き込みに関するコマンドが、いくつかあります。

@table @kbd
@item C-x C-s
現在のバッファーを、そのファイルに保存します(@code{save-buffer})。
@item C-x s
任意、またはすべてのバッファーを、それらのファイルに保存します(@code{save-some-buffers})。
@item M-~
現在のバッファーが変更されたことを忘れます(@code{not-modified})。プレフィクス引数(@kbd{C-u})を指定すると、現在のバッファーを変更済みとマークします。
@item C-x C-w
現在のバッファーを、指定したファイル名で保存します(@code{write-file})。
@item M-x set-visited-file-name
現在のバッファーが保存される場所で、ファイル名を変更します。
@end table

@kindex C-x C-s
@findex save-buffer
  ファイルを保存して変更を永続化させたいときは、@kbd{C-x C-s}
(@code{save-buffer})とタイプします。保存が完了すると、@kbd{C-x C-s}は以下のようなメッセージを表示します:

@example
Wrote /u/rms/gnu/gnu.tasks
@end example

@noindent
現在のバッファーが変更されていない(新規作成されたとき、または最後に変更されたときから変更していない)場合、保存しても意味がないので実際の保存は行われません。かわりに@kbd{C-x
C-s}は、エコーエリアに以下のようなメッセージを表示します:

@example
(No changes need to be saved)
@end example

@kbd{C-u C-x
C-s}のようにプレフィクス引数を指定すると、Emacsはそのバッファーを次回の保存が行われるときバックアップするようマークします。@ref{Backup}を参照してください。

@kindex C-x s
@findex save-some-buffers
  コマンド@kbd{C-x s}
(@code{save-some-buffers})は、任意、またはすべての変更されたバッファーの保存を提案します。これはバッファーごとに何を行うか尋ねます。使用できる応答は、@code{query-replace}と同様です。

@table @kbd
@item y
このバッファーを保存し、残りのバッファーについて尋ねます。
@item n
このバッファーは保存せずに、残りのバッファーについて尋ねます。
@item !
@c following generates acceptable underfull hbox
このバッファーを保存し、残りのバッファーを尋ねることなくすべて保存します。
@item @key{RET}
これ以上の保存をせずに、@code{save-some-buffers}を終了します。
@item .
このバッファーを保存したら、他のバッファーをどうするか尋ねることなく、@code{save-some-buffers}を終了します。
@item C-r
現在尋ねられているバッファーを閲覧します。Viewモードから抜けると、再び@code{save-some-buffers}はどうするか尋ねます。
@item d
そのバッファーに対応するファイルとDiffをとり、どのような変更を保存するのか確認できます。これはコマンド@code{diff-buffer-with-file}
(@ref{Comparing Files}を参照してください)を呼び出します。
@item C-h
これらのオプションについての、ヘルプメッセージを表示します。
@end table

  Emacsを終了するキーシーケンス@kbd{C-x C-c}は、@code{save-some-buffers}を呼び出すので、同じ質問をします。

@kindex M-~
@findex not-modified
  バッファーを変更したが変更を保存したくないとき、保存されるのを防ぐためにできることがいくつかあります(それ以外の@kbd{C-x
s}または@kbd{C-x C-c}で間違って保存してしまうのはあなたの責任です)。まずできることは、@kbd{M-~}
(@code{not-modified})とタイプすることで、これはバッファーが変更されているというマークをクリアーします。これを行うと、保存コマンドに、バッファーが保存を必要しないと信じこませることができます(@samp{~}は数学のシンボルで、`not(否定)'として使われることがあります。したがって@kbd{M-~}はメタと`not'になります。)。かわりにファイルからテキストを読み込むことにより、ファイルをvisitまたは保存された後に行った、すべての変更を取り消すことができます。これは@dfn{リバート(reverting:
復元)}と呼ばれます。@ref{Reverting}を参照してください(undoコマンド@kbd{C-x
u}を繰り返すことにより、変更がすべての変更を取り消すこともできますが、リバートの方が簡単です)。

@findex set-visited-file-name
  @kbd{M-x
set-visited-file-name}は、現在のバッファーがvisitしているファイルの名前を変更します。このコマンドはミニバッファーを使って、新しいファイル名を読み取ります。その後に、そのバッファーがそのファイル名のファイルをvisitしているとマークし、バッファー名も合わせて変更します。@code{set-visited-file-name}は、新しくvisitするファイルへの保存はしません。これは後で保存するときのために、Emacs内のレコードを変更するだけです。これはバッファーを``変更されている(modified)''とマークするので、そのバッファーでの@emph{将来}の@kbd{C-x
C-s}で、保存が行われます。

@kindex C-x C-w
@findex write-file
  バッファーにたいして、違うファイルをvisitしているとマークしてすぐに保存したい場合は、@kbd{C-x C-w}
(@code{write-file})を使います。このコマンドは、@code{set-visited-file-name}の後すぐに@kbd{C-x
C-s}をするのと同じですが、@kbd{C-x
C-w}はファイルが存在するとき確認を求める点が異なります。ファイルをvisitしていないバッファーでの@kbd{C-x C-s}は、@kbd{C-x
C-w}と同じ効果をもちます。したがってファイル名を読み取り、バッファーがそのファイルをvisitしているとマークした後、バッファー内容をそのファイルに保存します。ファイルをvisitしていないバッファーのデフォルトファイル名は、バッファー名と、バッファーのデフォルトディレクトリーから合成されます(@ref{File
Names}を参照してください)。

  新しいファイル名が何らかのメジャーモードに関連する場合、大抵は@kbd{C-x
C-w}によりそのメジャーモードへの切り替えが行われます。コマンド@code{set-visited-file-name}もこれを行います。@ref{Choosing
Modes}を参照してください。

  Emacsがファイルを保存する際、ディスクの最新バージョンのファイル日付を確認して、それがEmacsが最後に読み込み、または書き込みしたときと異なる場合、Emacsはその事実をユーザーに知らせます。なぜならそれはおそらく同時編集による問題を示しており、それをすぐにユーザーに知らせる必要があるからです。@ref{Interlocking,,
Simultaneous Editing}を参照してください。

@node Backup
@subsection Backup Files
@cindex backup file
@vindex make-backup-files
@vindex vc-make-backup-files

  ほとんどのオペレーティングシステムでは、ファイルを書き換えるとファイルに入っていたそれまでの記録は、自動的に破棄されます。したがって、Emacsでファイルを保存すると、ファイルの古い内容は捨てられます。しかし実際に保存する前に、Emacsが慎重に古い内容を@dfn{バックアップ(backup)}ファイルと呼ばれる別のファイルにコピーすれば、古い内容は失われません。

  Emacsは最初にバッファーからファイルに保存されたときだけ、バックアップファイルを作成します。その後ファイルを何回保存しようと、バックアップは変更されません。しかしバッファーをkillしてから、そのファイルを再びvisitすると、新しいバックアップファイルが作成されます。

  ほとんどのファイルにたいして、変数@code{make-backup-files}はバックアップファイルを作るかを決定します。ほとんどのオペレーティングシステムでは、デフォルト値は@code{t}なので、Emacsはバックアップファイルを書き込みます。

  バージョンコントロールシステム(version control system: @ref{Version
Control}を参照してください)で管理されているファイルにたいして、バックアップファイルを作るかは、変数@code{vc-make-backup-files}により決定されます。バージョンコントロールシステムに以前のバージョンがある場合、バックアップファイルを作るのは不必要なので、デフォルト値は@code{nil}です。
@iftex
@ref{General VC Options,,,emacs-xtra, Specialized Emacs Features}を参照してください。
@end iftex
@ifnottex
@xref{General VC Options}を参照してください。
@end ifnottex

  選択できるオプションは、Emacsにファイルごとに1つのバックアップを作らせる方法と、編集するファイルごとに番号がついた、一連のファイルを作る方法があります。@ref{Backup
Names}を参照してください。

@vindex backup-enable-predicate
@vindex temporary-file-directory
@vindex small-temporary-file-directory
  変数@code{backup-enable-predicate}のデフォルト値は、一時的なファイルのために使われるディレクトリー(変数@code{temporary-file-directory}または@code{small-temporary-file-directory}で指定されます)のファイルは、バックアップしないような値になっています。

  前に保存されたバッファーにたいしても、バッファーから他のバックアップファイルを作るよう、Emacsに明示的に指示することができます。バッファーを@kbd{C-u
C-x C-s}で保存すると、この保存したバージョンが、次にバックアップするときのバックアップになります。@kbd{C-u C-u C-x
C-s}はバッファーを保存しますが、最初に元のファイル内容を新しいバックアップファイルとします。@kbd{C-u C-u C-u C-x
C-s}は両方を行います。まず前の内容でバックアップを作成し、次回に保存したときは、今回保存したものをバックアップにします。

@menu
* Names: Backup Names.       バックアップファイルの命名方法。
* Deletion: Backup Deletion.  Emacsによる余分な番号つきバックアップの削除。
* Copying: Backup Copying.   コピーとリネームによるバックアップの作成。
@end menu

@node Backup Names
@subsubsection Single or Numbered Backups

  Emacsのバックアップファイル作成では、バックアップの名前は通常、編集されるファイル名の後ろに@samp{~}をつけて作成されます。したがって@file{eval.c}のバックアップファイルは、@file{eval.c~}になります。

  アクセスコントロールによりEmacsが通常の名前でバックアップファイルを書き込めない場合、@file{~/.emacs.d/%backup%~}というバックアップファイルに書き込みます。この1つのファイルしか存在しないので、一番最近作られたバックアップだけが利用可能です。

  Emacsは@dfn{番号つきバックアップファイル(numbered backup
files)}を作ることもできます。番号つきバックアップファイルの名前は、元のファイル名の後ろに@samp{.~}と番号と@samp{~}をつけたものです。したがって@file{eval.c}のバックアップファイルは、@file{eval.c.~1~}、@file{eval.c.~2~}、...、@file{eval.c.~259~}、...となります。

@vindex version-control
  変数@code{version-control}は、単一のバックアップファイルを作るか、複数の番号つきバックアップファイルを作るかを決定します。有効な値は以下のとおりです:

@table @code
@item nil
すでに番号つきバックアップのあるファイルにたいしては、番号つきバックアップを作ります。それ以外は単独のバックアップをつくります。これがデフォルトです。
@item t
番号つきバックアップを作ります。
@item never
番号つきバックアップをつくらず、常に単一のバックアップを作ります。
@end table

@noindent
この変数をセットする通常の方法は、initファイルやcustomizationバッファーを通じて、グローバルにセットする方法です。しかし特定のバッファーにローカルに@code{version-control}をセットして、そのバッファーのバックアップ作成を制御することができます(@ref{Locals}を参照してください)。特定のファイルをvisitするとき、常にEmacsに@code{version-control}をローカルにセットさせることができます(@ref{File
Variables}を参照してください)。Rmailモードのようないくつかのモードは、この変数をセットします。

@cindex @env{VERSION_CONTROL} environment variable
  さまざまなGNUユーティリティーにたいして、何をすべきか指示する環境変数@env{VERSION_CONTROL}をセットすると、Emacsも開始時にこの環境変数にしたがって、Lisp変数@code{version-control}をセットします。環境変数の値が@samp{t}または@samp{numbered}のときは、@code{version-control}は@code{t}になります。値が@samp{nil}または@samp{existing}のときは、@code{version-control}は@code{nil}になります。もし@samp{never}または@samp{simple}のときは、@code{version-control}は@code{never}になります。

@vindex backup-directory-alist
  変数@code{backup-directory-alist}をカスタマイズして、指定したパターンにマッチする特定のファイルにたいして、指定したディレクトリーにバックアップを作成させることができます。この変数は単独、または複数の番号つきバックアップの両方に適用されます。典型的な使い方は、要素@code{("."
.
@var{dir})}を追加することにより、すべてのバックアップを絶対パス@var{dir}に作る方法です。異なるディレクトリーにある同じ名前のファイルによる、バックアップファイルの名前の衝突を避けるため、Emacsはバックアップファイルの名前を変更します。@code{("."
.
".~")}を追加すると、これは元のファイルがあるディレクトリーに、非表示の@file{.~}というディレクトリーを作って、そこにバックアップを作成します。Emacsはバックアップを作るため、必要ならディレクトリーを作成します。

@vindex make-backup-file-name-function
  変数@code{make-backup-file-name-function}に適切なLisp関数をセットすることにより、Emacsがバックアップファイル名を作る通常の方法をオーバーライドできます。

@node Backup Deletion
@subsubsection Automatic Deletion of Backups

  ディスク容量の過度な消費を防ぐため、Emacsは自動的に番号つきバックアップを削除することができます。一般的にEmacsは一番古いバックアップと、一番新しいバックアップをいくつか保持し、その間にあるバックアップを削除します。これは新しいバックアップが作られる度に行なわれます。

@vindex kept-old-versions
@vindex kept-new-versions
  2つの変数@code{kept-old-versions}および@code{kept-new-versions}が、この削除を制御します。これらの変数の値は順に、削除せずに残す一番古い番号(小さい番号)のバックアップと、一番新しい番号(大きい番号)で、新しいバックアップが作られる度に評価されます。中間のバックアップ(一番古いものと一番新しいものを除いたもの)は、余分なバージョンで、これらのバックアップは削除されます。これらの変数の値は余分なバージョンを削除するとき、つまり新しいバックアップが作られた直後に使われます。新しく作られたバックアップは、@code{kept-new-versions}のカウントに含まれます。デフォルトでは、両方の変数の値は2です。

@vindex delete-old-versions
  @code{delete-old-versions}が@code{t}のとき、Emacsは何も尋ねずに余分なバックアップファイルを削除します。@code{nil}(デフォルト)のとき、Emacsは余分なバージョンのバックアップを削除するか尋ねます。他の値の場合、Emacsはバックアップの自動削除をしません。

  Diredの@kbd{.}(ピリオド)コマンドでも、古いバージョンを削除できます。@ref{Dired Deletion}を参照してください。

@node Backup Copying
@subsubsection Copying vs.@: Renaming

  バックアップファイルは、古いファイルをコピーまたはリネームすることで作ることができます。コピーとリネームは、古いファイルが複数の名前をもつ場合(ハードリンクされている場合)に、異なる効果をもちます。古いファイルがバックアップファイルにリネームされた場合、ハードリンクされた別の名前で参照されるファイルは、バックアップファイルとなります。かわりに古いファイルをコピーすると、ハードリンクされた別の名前で参照されるファイルは、編集中のファイルのままで、それらの名前でアクセスする内容は新しい内容となります。

  バックアップファイルを作る方法は、編集中のファイルの所有者とグループにも影響します。コピーが使われた場合、それらは変化しません。リネームが使われた場合、そのユーザーがファイルの所有者となり、ファイルのグループはデフォルト(オペレーティングシステムごとにグループのデフォルトは異なります)のグループになります。

@vindex backup-by-copying
@vindex backup-by-copying-when-linked
@vindex backup-by-copying-when-mismatch
@vindex backup-by-copying-when-privileged-mismatch
@cindex file ownership, and backup
@cindex backup, and user-id
  リネームとコピーの選択は、以下の変数により行われます:

@itemize
@item
変数@code{backup-by-copying}が非@code{nil}(デフォルトは@code{nil})の場合、コピーが使用されます。

@item
上記以外の場合、変数@code{backup-by-copying-when-linked}が非@code{nil}(デフォルトは@code{nil})で、ファイルが複数の名前をもつ場合は、コピーが使用されます。

@item
上記以外の場合、変数@code{backup-by-copying-when-mismatch}が非@code{nil}(デフォルトは@code{t})で、リネームによりファイルの所有者かグループが変更される場合は、コピーが使用されます。

@code{backup-by-copying-when-mismatch}を@code{nil}に変更すると、Emacsはファイルの所有者のユーザーIDの数字をチェックします。もしこの数字が@code{backup-by-copying-when-privileged-mismatch}の値より大きい場合、@code{backup-by-copying-when-mismatch}が非@code{nil}であるかのように振る舞います。

@item
上記以外の場合、リネームがデフォルトの選択となります。
@end itemize

  ファイルがバージョンコントロールシステムで管理されている場合(@ref{Version
Control}を参照してください)、通常、Emacsは普通の方法でそのファイルのバックアップを作りません。しかしチェックインとチェックアウトは、バックアップを作るのと似たところがあります。これらの操作は通常ハードリンクをこわし、同じファイルにたいする別のファイル名でのvisitを切断します。Emacsにできることはありません。バージョンコントロールシステムがこれを行うのです。

@node Customize Save
@subsection Customizing Saving of Files

@vindex require-final-newline
  変数@code{require-final-newline}の値が@code{t}のとき、ファイルの保存または書き込みにより、ファイルの終端に改行がないときは、何も尋ねずに改行を追加します。値が@code{visit}の場合、Emacsはファイルをvisitした直後に、終端に改行がないファイルの改行を追加します(これによりバッファーは変更されたとマークされます。undoはできません)。値が@code{visit-save}の場合、Emacsはそのような改行をvisitと保存のときに追加します。値が@code{nil}の場合、Emacsはファイルの終端を変更しません。それ以外の非@code{nil}値は、改行を追加するか尋ねることを意味します。デフォルトは@code{nil}です。

@vindex mode-require-final-newline
  ファイルの終端に常に改行があると想定する、特定の種類のファイルのためにデザインされたメジャーモードがいくつかあります。そのようなメジャーモードは、変数@code{require-final-newline}に、変数@code{mode-require-final-newline}の値(デフォルトは@code{t})をセットします。後者の変数の値をセットすることにより、これらのモードが終端の改行を取り扱う方法を制御できます。

@vindex write-region-inhibit-fsync
  通常プログラムがファイルに書き込むとき、オペレーティングシステムはデータをディスクにコミットする前に、ファイルのデータをメインメモリーにキャッシュします。これにより大幅にパフォーマンスを向上できます。たとえばラップトップを使っている場合、ファイルを書き込む度にディスクをスピンアップ(spin-up)しなくて済みます。しかし、キャッシュをディスクにコミットする前にオペレーティングシステムがクラッシュすることにより、データを失うリスクもあります。

  このリスクを減少させるため、Emacsはファイルを保存した後に@code{fsync}システムコールを呼び出すことができます。@code{fsync}により、データを失うリスクを皆無にすることはできません。その理由の一部は、多くのシステムは@code{fsync}を正しく実装していないことであり、他の理由の一部はEmacsのファイル保存手段は通常ディレクトリー更新に頼っており、これは@code{fsync}が正しく実装されていても、クラッシュを生き延びることはできないでしょう。

  @code{write-region-inhibit-fsync}変数は、ファイルを保存した後にEmacsが@code{fsync}を呼び出すかを制御します。この変数のデフォルト値は、Emacsを対話的に使用しているときは@code{nil}、バッチモードの時は@code{t}です。

  Emacsは自動保存ファイルの書き込みに@code{fsync}を使うことはありません。なぜなら、それらのファイルのデータは、いずれにせよ失われるものだからです。

@node Interlocking
@subsection Protection against Simultaneous Editing

@cindex file dates
@cindex simultaneous editing
  同時編集(Simultaneous
editing)は、2人のユーザーが同じファイルをvisitして、両者が変更と保存を行ったときに発生します。これが発生していることを誰も知らせなければ、最初に保存したユーザーは、後で自分の変更が失われていることに気付くでしょう。

  いくつかのシステムでは、Emacsは2番目のユーザーがファイルの変更を開始すると、すぐに警告を発します。また、すべてのシステムにおいて、Emacsはファイルを保存するときにチェックして、他のユーザーの変更を上書きすることを警告します。ファイルを保存するかわりに適切な訂正アクションをとることにより、他のユーザーの変更を失わなわずに済みます。

@findex ask-user-about-lock
@cindex locking files
  ファイルをvisitしているEmacsバッファーで最初の変更を行うとき、Emacsはファイルが@dfn{ロック(locked)}されていることを記録します(これは同じディレクトリーにある、特別な内容の、特別な名前のシンボリックリンク@footnote{システムがシンボリックリンクをサポートしていなければ、通常のファイルが使われます。}を作ることにより行われます)。変更を保存したとき、Emacsはロックを解除します。このアイデアは、ファイルをvisitしているEmacsバッファーに保存されていない変更があるとき、ファイルはロックされているとするものです。

@vindex create-lockfiles
  変数@code{create-lockfiles}を@code{nil}にセットすることにより、ロックファイルの作成を抑制することができます。@strong{警告:}これにより、この機能が提供する利点を失うことになります。

@cindex collision
  他のユーザーによりロックされているファイルをvisitしているバッファーの変更を開始すると、@dfn{衝突(collision)}が起こります。Emacsが衝突を検知すると、Lisp関数@code{ask-user-about-lock}を呼び出して、何を行うか尋ねます。カスタマイズのためにこの関数を再定義できます。この関数の標準定義は、ユーザーに質問をして、3つの有効な応えを受け取ります。

@table @kbd
@item s
ロックを横取りします。すでにファイルを変更したユーザーはロックを失い、あなたがロックを取得します。
@item p
続行します。他のユーザーがロックしている如何にかかわらずファイルの編集を続けます。
@item q
終了します。これはエラー(@code{file-locked})を引き起こし、バッファーの内容は変更されません。あなたが試みた修正は実際には行われません。
@end table

  Emacsまたはオペレーティングシステムがクラッシュすると、偽のロックファイルが残ることがあり、このような偽のロックファイルによる警告を受けることがあります。偽の衝突だと確信できるときは、Emacsにとにかく実行させる@kbd{p}を使います。

  ロックはファイル名にもとづいて機能するので、ファイルが複数の名前を持っていて、2人のユーザーがそれぞれ別のファイル名で同時編集を行うことを、Emacsが防ぐことはできないことに注意してください。

  ロックファイルに書き込みできない状況がいくつかあります。たとえばシステム権限不足や他の理由により、Emacsがロックファイルが作成できない場合です。このような場合でも保存を試みたときに、ファイルの最終変更日時をチェックすることにより、Emacsは衝突を検知できます。最後にEmacsがvisitまたは保存したときからファイルが変更されているとき、それは他の何らかの手段によりファイルが変更されたことを示し、Emacsが保存を行うことによりそれらが失われることを意味します。そのようなときEmacsは警告メッセージを表示して、保存する前に確認を求めます。保存するときは@kbd{yes}、保存を取り消すときは@kbd{no}または@kbd{C-g}と応えてください。

  すでに同時編集が発生しているとき、バッファーとファイルを比較する方法の1つは、@kbd{M-x
diff-buffer-with-file}コマンドです。@ref{Comparing Files}を参照してください。

@node File Shadowing
@subsection Shadowing Files
@cindex shadow files
@cindex file shadows
@findex shadow-initialize

@table @kbd
@item M-x shadow-initialize
ファイルのシャドーイング(shadowing)をセットアップします。
@item M-x shadow-define-literal-group
サイト間で共有される単一のファイルを定義します。
@item M-x shadow-define-regexp-group
ファイルのグループがマッチするすべてのファイルを、ホスト間で共有するようにします。
@item M-x shadow-define-cluster @key{RET} @var{name} @key{RET}
shadowファイルのクラスター@var{name}を定義します。
@item M-x shadow-copy-files
すべての保留中のshadowファイルをコピーします。
@item M-x shadow-cancel
ファイルにたいするshadow指示を取り消します。
@end table

特定のファイルと等しい@dfn{shadow}コピーを１つ以上の場所、ことによると異なるマシン間で保持するように計画できます。これを行うにはまず、@dfn{shadowファイルグループ}をセットアップしなければなりません。これはリストにあるサイト間で共有される同じ名前のファイルのセットです。ファイルグループは永続的で、将来のEmacsセッションでも、現在のセッションと同様に適用されます。一度グループをセットアップすると、Emacsを終了する度に、編集したファイルをグループの他のファイルにコピーします。@kbd{M-x
shadow-copy-files}をタイプすることにより、Emacsを終了せずにコピーすることもできます。

shadowファイルグループをセットアップするには、@kbd{M-x shadow-define-literal-group}または@kbd{M-x
shadow-define-regexp-group}を使います。詳細な情報は、これらの関数のドキュメント文字列を参照してください。

ファイルをshadowにコピーする前に、Emacsは確認を求めます。``no''を応えることにより、その時だけはコピーを回避できます。特定のファイルにたいして今後もshadowingを取り消したい場合、@kbd{M-x
shadow-cancel}を使うことにより、shadowファイルグループを削除または変更します。

@dfn{shadowクラスター}は、ディレクトリーを共有するホストのグループなので、それらのコピーは、そのディレクトリーにあるすべてのファイルを更新するのに充分です。shadowクラスターはそれぞれ名前を持ち、プライマリーホスト(コピーを行うホスト)のネットワークアドレスと、プライマリーホスト以外でクラスターに含めるホストを選択するための正規表現を指定します。@kbd{M-x
shadow-define-cluster}によりshadowクラスターを定義できます。

@node Time Stamps
@subsection Updating Time Stamps Automatically
@cindex time stamps
@cindex modification dates
@cindex locale, date format

ファイルにタイムスタンプを書き込むことができます。これによりファイルを編集・保存する度に、タイムスタンプが自動的に更新されます。タイムスタンプは、ファイルの最初の8行になければならず、以下のような形式、

@example
Time-stamp: <>
@end example

@noindent
または以下のような形式です:

@example
Time-stamp: " "
@end example

@findex time-stamp
  その後、フック@code{before-save-hook}に関数@code{time-stamp}を追加します(@ref{Hooks}を参照してください)。ファイルを保存するとき、この関数は現在の日時で自動的にタイムスタンプを更新します。コマンド@kbd{M-x
time-stamp}を使って、手動でタイムスタンプを更新することもできます。その他のカスタマイズとしては、Custom
groupの@code{time-stamp}を参照してください。タイムスタンプの書式は、localeのセッティングに従うことに注意して下さい(@ref{Environment}を参照してください)。

@node Reverting
@section Reverting a Buffer
@findex revert-buffer
@cindex drastic changes
@cindex reread a file

  ファイルをvisitしているバッファーにたいして、広範な変更をした後に気が変わったときは、@dfn{リバート(revert:
復元)}することにより。変更をファイルの保存されたバージョンに戻すことができます。間違えてリバートしてしまうことにより、大量の作業結果を失うこともあり得るので、Emacsは最初に確認を求めます。

  @code{revert-buffer}コマンドは、ファイルが少ししか変更されていないときは、前にポイントがあったテキスト部分とだいたい同じ位置にポイントを置くよう試みます。しかし広範な変更を行っていた場合、ポイントは大きく異なる場所に置かれることになります。

  リバートはバッファーを``not
modified(変更されていない)''とマークします。また、バッファーのundoヒストリーもクリアーされます(@ref{Undo}を参照してください)。したがってリバートはundoできません。再び気を変えても、undoコマンドを使ってリバートした変更を元にもどすことはできません。

  ファイルに関連付けられていない、Diredバッファーのようなバッファーでも、リバートすることができます。それらの場合、リバートはその内容を再計算することを意味します。@kbd{C-x
b}で明示的に作成したバッファーは、リバートできません。リバートを試みると@code{revert-buffer}はエラーを報告します。

@vindex revert-without-query
  自動的かつ頻繁に変更されるファイル、たとえば実行を続けるプロセスのログ出力などを編集しているとき、Emacsが確認なしにリバートできたら便利でしょう。このような振る舞いをさせるには、変数@code{revert-without-query}に正規表現のリストをセットします。ファイル名がそれらの正規表現の1つにマッチしたとき、@code{find-file}および@code{revert-buffer}は、バッファーが変更されていないときは、ファイルが変更される度に自動的にリバートします(もしテキストを編集していた場合、変更を放棄するのはおそらく正しくありません)。

@cindex Global Auto-Revert mode
@cindex mode, Global Auto-Revert
@cindex Auto-Revert mode
@cindex mode, Auto-Revert
@findex global-auto-revert-mode
@findex auto-revert-mode
@findex auto-revert-tail-mode
@vindex auto-revert-interval
  Emacsにバッファーを定期的にリバートするよう、指示することもできます。特定のバッファーにたいしてこれを行うには、@kbd{M-x
auto-revert-mode}とタイプして、マイナーモードのAuto-Revertモードを有効にします。これは現在のバッファーを5秒ごとに自動的にリバートします。リバートの間隔は@code{auto-revert-interval}で変更できます。すべてのバッファーにたいして同じことを行うには、@kbd{M-x
global-auto-revert-mode}とタイプして、Global
Auto-Revertモードを有効にします。これらのマイナーモードはリモートのファイルにたいするチェックやリバートはしません。なぜならそれは通常とても遅いからです。

  Auto-Revertモードの1つの使い方は、システムログのようなファイルを``tail''することです。これにより、それらのファイルにたいする、他のプログラムによる変更を、継続的に表示できます。これを行うには、ポイントをバッファーの最後に移動します。そうすればファイル内容が変更されても、ポイントはその位置に留まります。しかし、ファイルがファイルの終端方向に向かって変更されるだけだと確信できるときは、かわりにAuto-Revert
Tailモード(@code{auto-revert-tail-mode})を使います。このモードは、これをより効果的に行います。Auto-Revert
Tailモードは、リモートのファイルにたいしても機能します。

  バージョンコントロールシステムの下にあるファイルを、以前のバージョンにリバーとするコマンドについては、@ref{VC
Undo}を参照してください。バージョンコントロールシステムの下にあるファイルをvisitしているときの自動リバートの特性については、@ref{VC
Mode Line}を参照してください。

@ifnottex
@include arevert-xtra.texi
@end ifnottex

@node Auto Save
@section Auto-Saving: Protection Against Disasters
@cindex Auto Save mode
@cindex mode, Auto Save
@cindex crashes

  Emacsは定期的に、visitしているファイルを、実際に使っているファイルを変更せずに、別のファイルに自動的に保存するときがあります。これは@dfn{自動保存(auto-saving)}と呼ばれます。これはシステムがクラッシュしたとき、失われてしまう作業をある程度以下に制限するためのものです。

  Emacsが自動保存するときだと決定すると、各バッファーを判断して、それらのバッファーの自動保存が有効で、最後に自動保存されてから変更されている場合は、自動保存します。ファイルが実際に自動保存されている場合は、自動保存の間、エコーエリアに@samp{Auto-saving...}というメッセージが表示されます。自動保存の間のエラーはキャッチされるので、ユーザーがタイプして実行したコマンドに、干渉することはありません。

@menu
* Files: Auto Save Files.    ファイルを保存するまでの間、自動保存された変更が実際に保存されるファイル。
* Control: Auto Save Control.  自動保存をいつ、どのような間隔で行うかの制御。
* Recover::                  自動保存ファイルからのテキストの復旧。
@end menu

@node Auto Save Files
@subsection Auto-Save Files

  自動保存は通常、visitしているファイルへの保存はしません。なぜなら永続化したくない変更を保存するのは、好ましくないからです。そのかわりに、自動保存は@dfn{auto-saveファイル}と呼ばれる別のファイルに保存し、visitしているファイルへの変更は、保存を明示的に要求したとき(@kbd{C-x
C-s}など)に行います。

  auto-saveファイルの名前は通常、visitしているファイル名の前後に@samp{#}をつけて作られます。したがって@file{foo.c}というファイルをvisitしているバッファーは、@file{#foo.c#}というファイルに自動保存されます。ファイルをvisitしていないバッファーのほとんどは、明示的に要求した場合だけ自動保存されます。それらのバッファーが自動保存されるとき、auto-saveファイル名は、バッファー名の前後に@samp{#}をつけて、その後ろに数字と文字を付け加えて一意な名前にします。たとえば送信メッセージを作成する@file{*mail*}バッファーは、@file{#*mail*#704juu}のような名前のファイルに、自動保存されます。Emacsの一部(関数@code{make-auto-save-file-name}および@code{auto-save-file-name-p})を違った方法で再プログラムしない限り、auto-saveファイル名はこの方法で作成されますバッファーの自動保存に使われるファイル名は、そのバッファーの自動保存をオンにしたときに計算されます。

@cindex auto-save for remote files
@vindex auto-save-file-name-transforms
  変数@code{auto-save-file-name-transforms}は、auto-saveファイル名をある程度制御することを許します。これに一連の正規表現を指定して置換することにより、auto-saveファイル名を変更します。デフォルト値は、リモートのファイル(@ref{Remote
Files}を参照してください)を、ローカルマシンの一時ディレクトリーのauto-saveファイルに変換します。

  大きなバッファーから大量のテキストを削除したとき、そのバッファーにたいする自動保存は一時的にオフになります。これは、もしテキストをうっかり削除してしまった場合、それがauto-saveファイルに含まれていて、そこから探せる方が便利だからです。これが発生した後、再び自動保存を有効にするには、バッファーを@kbd{C-x
C-s}で保存するか、@kbd{C-u 1 M-x auto-save-mode}を使います。

@vindex auto-save-visited-file-name
  別のauto-saveファイルにするのではなく、visitしているファイルに自動保存したいときは、変数@code{auto-save-visited-file-name}を非@code{nil}値にセットします。このモードでは、自動保存と明示的な保存に実際の違いはありません。

@vindex delete-auto-save-files
  バッファーのauto-saveファイルは、そのバッファーをvisitしているファイルに保存したとき削除されます(変数@code{delete-auto-save-files}を@code{nil}にセットすることにより、これを禁じることができます)。@kbd{C-x
C-w}または@code{set-visited-file-name}で、visitされているファイル名を変更することにより、あたらしくvisitされているファイル名にもとづいてauto-saveファイル名はリネームされます。

@node Auto Save Control
@subsection Controlling Auto-Saving

@vindex auto-save-default
@findex auto-save-mode
  ファイルをvisitする度に、そのファイルバッファーの自動保存は、オンになります(バッチモードでは異なります。@ref{Initial
Options}を参照してください)。この変数のデフォルトは@code{t}なので、ファイルをvisitしているバッファーの自動保存は通常、常に行われます。現在のバッファーの自動保存を切り替えるには、@kbd{M-x
auto-save-mode}とタイプします。Auto Saveモードはバッファーローカルに動作するマイナーモードです(@ref{Minor
Modes}を参照してください)。

@vindex auto-save-interval
  Emacsは最後に自動保存されてから何文字タイプしたかにもとづいて、定期的に自動保存を行います。変数@code{auto-save-interval}は、自動保存と自動保存の間に何文字タイプされたかを指定します。デフォルトは300です。Emacsは小さすぎる値は受け付けません。@code{auto-save-interval}を20より小さな値にカスタマイズした場合、Emacsは20と指定されたかのように振る舞います。

@vindex auto-save-timeout
  自動保存はタイピングをストップしたときも行われます。デフォルトでは30秒アイドル状態が続くと実行されます。(このときEmacsはガベージコレクションも実行します;
@ref{Garbage Collection,,, elisp, The Emacs Lisp Reference
Manual}を参照してください)。この間隔を変更するには、変数@code{auto-save-timeout}をカスタマイズします。実際の実行間隔は、現在のバッファーの大きさに応じて長くなります。これは、自動保存が実感できるほど時間がかかるような大きなバッファーを編集しているときは、それをなるべく無くすようにする狙いです。アイドル状態のときの自動保存は、2つの事を達成します。最初に、端末を少しの間離れるときなどに、すべての作業の保存を保証します。次に、実際にタイプしているときは自動保存を避けます。

  Emacsは、致命的なエラーが発生したときも自動保存を行います。これには@samp{kill
%emacs}のようなコマンドによるEmacsジョブのkill、電話回線やネットワーク回線の切断が含まれます。

@findex do-auto-save
  コマンド@kbd{M-x do-auto-save}により、明示的に自動保存を行うことができます。

@node Recover
@subsection Recovering Data from Auto-Saves

@findex recover-file
  コマンド@kbd{M-x recover-file @key{RET} @var{file}
@key{RET}}により、auto-saveファイルの内容を使って、失われたデータを復旧できます。これは@var{file}をvisitして、(確認を求めた後で)auto-saveファイル@file{#@var{file}#}の内容をリストアします。その後@kbd{C-x
C-s}で復旧したテキストを、@var{file}自身に保存できます。たとえばファイル@file{foo.c}を、そのauto-saveファイル@file{#foo.c#}で復旧するには、以下のようにします:

@example
M-x recover-file @key{RET} foo.c @key{RET}
yes @key{RET}
C-x C-s
@end example

  @kbd{M-x
recover-file}は確認を求める前に、指定したファイルとauto-saveファイルのあるディレクトリー一覧を表示するので、ファイルのサイズや日付を確認できます。auto-saveの方が古い場合、@kbd{M-x
recover-file}はそれを読み込むように提案しません。

@findex recover-session
  Emacsまたはコンピューターがクラッシュしたとき、@kbd{M-x
recover-session}コマンドで編集していたすべてのファイルを、それらのauto-saveファイルで復旧できます。これは最初に中断されたセッションの記録された一覧を表示します。ポイントを移動して選択してから、@kbd{C-c
C-c}をタイプします。

  @code{recover-session}は、そのセッションの間に編集されていた各ファイルについて、ファイルを復旧するか尋ねます。@kbd{y}と応えると@code{recover-file}を呼び出し、通常の方法で復旧を行います。これは元のファイルとauto-saveファイルの日付を表示して、ファイルの復旧を行うかもう1度尋ねます。

  @code{recover-session}が完了すると、復旧を選択したファイルがEmacsバッファーに表示されます。実際にファイル自体を復旧するためには、これらを保存するのが唯一の方法です。

@vindex auto-save-list-file-prefix
  Emacsは中断されたセッションについての情報を、ディレクトリー@file{~/.emacs.d/auto-save-list/}の、@file{.saves-@var{pid}-@var{hostname}}という名前のファイルに記録します。@code{auto-save-list-file-prefix}を@code{nil}にセットすると、復旧用にセッションが記録されなくなります。

@node File Aliases
@section File Name Aliases
@cindex symbolic links (visiting)
@cindex hard links (visiting)

  シンボリックリンクとハードリンクは、同じファイルを参照するためにいくつかの名前を使うことを可能にします。ハードリンクは、ファイルを直接参照する他の名前です。それらすべての名前は同じように有効で、それらの間に優先順位はありません。対照的にシンボリックリンクは、ある種の定義されたエイリアス(別名)です。@file{foo}が@file{bar}へのシンボリックリンクの場合、そのファイルをどちらの名前でも参照できますが、@file{bar}が実際の名前で、@file{foo}はエイリアスに過ぎません。シンボリックリンクがディレクトリーを指すときは、さらに複雑なケースが発生します。

@vindex find-file-existing-other-name
@vindex find-file-suppress-same-file-warnings
  Emacsがすでに異なる名前でvisitしている場合、通常はエコーエリアにメッセージを表示して、そのファイルをvisitしている既存のバッファーを使います。これはハードリンクおよびシンボリックリンクをサポートしているシステム、または長いファイル名を切り詰めるシステムで長い名前のファイルを使っている場合、またはファイル名の大文字小文字を区別しないシステムで発生します。変数@code{find-file-suppress-same-file-warnings}を非@code{nil}値にセットすることにより、メッセージを表示しないようにできます。変数@code{find-file-existing-other-name}を@code{nil}にセットすれば、この機能全体を無効にできます。その場合、同じファイルを異なる名前でvisitすると、それぞれのファイル名で別々のバッファーが使われます。

@vindex find-file-visit-truename
@cindex truenames of files
@cindex file truenames
  変数@code{find-file-visit-truename}が非@code{nil}の場合、バッファー用に記録されるファイル名は、指定した名前ではなく、ファイルの@dfn{本当の名前}(これはすべてのシンボリックリンクを対象の名前で置き換えて作られます)が使われます。@code{find-file-visit-truename}をセットするは、@code{find-file-existing-other-name}にも暗に影響します。

@cindex directory name abbreviation
@vindex directory-abbrev-alist
  シンボリックリンクを通じてアクセスされるようなディレクトリーにたいしては通常、優先的に``リンクされた''名前をEmacsに表示させたいときがあります。これを行うには@code{directory-abbrev-alist}をカスタマイズします。このリストの各要素は@code{(@var{from}
.
@var{to})}という書式です。これはディレクトリー名に@var{from}が出現したときは常に、@var{from}を@var{to}で置き換えることを意味します。文字列@var{from}は正規表現です(@ref{Regexps}を参照してください)。正規表現はディレクトリー名の最初の文字にマッチさせる必要があるので、@samp{\`}で始まります(埋め込みの改行をサポートするディレクトリー名の場合は、@samp{^}で無効にします)。@var{to}には同じディレクトリーを指す、絶対パスによる普通のディレクトリー名を指定する必要があります。文字列@var{to}でホームディレクトリーを指定するのに、@samp{~}を使用しないでください。Emacsはこれらの変換を個別に行います。以下は通常シンボリックリンク@file{/fsf}でアクセスされる、@file{/home/fsf}を指定する例です:

@example
(("\\`/home/fsf" . "/fsf"))
@end example

@node Directories
@section File Directories

@cindex file directory
@cindex directory listing
  ファイルシステムは、ファイルを@dfn{ディレクトリー}にグループ化します。@dfn{ディレクトリーリスト}は、ディレクトリーに含まれるファイルのリストです。Emacsはディレクトリーを作成および削除するコマンドを提供し、簡単な形式(ファイル名のみ)、および詳細な形式(サイズ、日付、作成者を含む)のディレクトリーリストを作成します。EmacsにはDiredと呼ばれるディレクトリーブラウザーも含まれています。詳細は@ref{Dired}を参照してください。

@table @kbd
@item C-x C-d @var{dir-or-pattern} @key{RET}
簡単なディレクトリーリストを表示します(@code{list-directory})。
@item C-u C-x C-d @var{dir-or-pattern} @key{RET}
詳細なディレクトリーリストを表示します。
@item M-x make-directory @key{RET} @var{dirname} @key{RET}
@var{dirname}という名前の新しいディレクトリーを作成します。
@item M-x delete-directory @key{RET} @var{dirname} @key{RET}
@var{dirname}という名前のディレクトリーを削除します。もし空でない場合、それらを再帰的に削除するか尋ねます。
@end table

@findex list-directory
@kindex C-x C-d
  ディレクトリーリストを表示するコマンドは、@kbd{C-x C-d}
(@code{list-directory})です。これはミニバッファーを使って、リストを表示するディレクトリーと、リストするファイルを指定するワイルドカードが含まれたパターンの両方により、ファイル名を読み取ります。たとえば

@example
C-x C-d /u2/emacs/etc @key{RET}
@end example

@noindent
これはディレクトリー@file{/u2/emacs/etc}のファイルをリストします。以下はファイル名のパターンを指定する例です。

@example
C-x C-d /u2/emacs/src/*.c @key{RET}
@end example

  通常、@kbd{C-x
C-d}は名前だけを含む、簡単なディレクトリーリストを表示します。数引数(値は関係なし)は、サイズ、日付、所有者を含む詳細な一覧を作成するよう指示します。

@vindex list-directory-brief-switches
@vindex list-directory-verbose-switches
  ディレクトリーリストのテキストは、主に下位プロセスとして@code{ls}を実行することにより取得されます。2つのEmacs変数が、@code{ls}に指定するスイッチを制御します。@code{list-directory-brief-switches}には、簡単な一覧に使うためのスイッチを文字列で指定します(デフォルトは@code{"-CF"})。@code{list-directory-verbose-switches}には、詳細な一覧に使うためのスイッチを文字列で指定します(デフォルトは@code{"-l"})。

@vindex directory-free-space-program
@vindex directory-free-space-args
  詳細なディレクトリー一覧では、Emacsはディレクトリーが含まれるディスクの空き容量についての情報を追加します。これは@code{directory-free-space-program}で指定されたプログラムに、@code{directory-free-space-args}で指定された引数を指定して実行します。

  コマンド@kbd{M-x
delete-directory}は、ミニバッファーを使ってディレクトリー名の入力を求め、空のときはディレクトリーを削除します。ディレクトリーが空でない場合、再帰的に削除するか確認を求めます。``Trash(ごみ箱)''(または``Recycle
Bin'')の機能をもつシステムでは、変数@code{delete-by-moving-to-trash}を@code{t}に変更することにより、指定したディレクトリーを無条件に削除するかわりに、ごみ箱に移動します。ごみ箱の使い方についての情報は、@ref{Misc
File Ops}を参照してください。

@node Comparing Files
@section Comparing Files
@cindex comparing files

@findex diff
@vindex diff-switches
@c Note that the actual name of the info file is diffutils.info,
@c but it adds a dir entry for diff too.
@c On older systems, only "info diff" works, not "info diffutils".
  コマンド@kbd{M-x
diff}は、ミニバッファーを使って2つのファイル名の入力を求め、@file{*diff*}という名前のバッファーに、2つのファイルの違いを表示します。これは@command{diff}プログラムに、変数@code{diff-switches}で指定されたオプションを指定して実行することにより機能します。@code{diff-switches}には文字列を指定します。デフォルトはcontext出力形式を指定する@code{"-c"}です。プログラムについての情報は、@ref{Top,,
Diff, diff, Comparing and Merging Files}を参照してください。

  @code{diff}コマンドの出力は、Diffモードと呼ばれるメジャーモードを使って表示されます。@ref{Diff Mode}を参照してください。

@findex diff-backup
  コマンド@kbd{M-x
diff-backup}は指定したファイルと、そのファイルの一番最近のバックアップを比較します。バックアップファイル名を指定したときは、@code{diff-backup}は指定されたバックアップファイルと、それの元となるファイルを比較します。それ以外の点は@kbd{M-x
diff}と同じです。

@findex diff-buffer-with-file
  コマンド@kbd{M-x
diff-buffer-with-file}は指定されたバッファーと、それに対応するファイルを比較します。これはバッファーを保存すると、ファイルにどのような変更がされるかを表示します。

@findex compare-windows
  コマンド@kbd{M-x
compare-windows}は現在のウィンドウと、次のウィンドウを比較します(Emacsのウィンドウについての詳細は、@ref{Windows}を参照してください)。比較はそれぞれのウィンドウのポイント位置から、それぞれのバッファーのポイントの初期位置を、対応するバッファーのマークリングにpushした後に開始されます。それから各ウィンドウのポイントを1文字ずつ前方に移動していきます。文字がマッチしなくなるとコマンドは終了します。

  コマンドを開始したとき、2つのウィンドウのポイントの後ろのテキストがマッチしない場合、@kbd{M-x
compare-windows}は2つのウィンドウでマッチするテキストが見つかるまでポイントを進めてから終了します。したがって@kbd{M-x
compare-windows}を繰り返し使うと、毎回1つのマッチする範囲をスキップするか、次の開始点を探します。

@vindex compare-ignore-case
@vindex compare-ignore-whitespace
  数引数を指定すると、@code{compare-windows}は空白文字の違いを無視します。変数@code{compare-ignore-case}が非@code{nil}の場合、大文字小文字の違いを無視して比較します。変数@code{compare-ignore-whitespace}が非@code{nil}の場合、@code{compare-windows}は通常空白文字の違いを無視して、数引数が指定されたときはそれをオフにします。

@cindex Smerge mode
@findex smerge-mode
@cindex failed merges
@cindex merges, failed
@cindex comparing 3 files (@code{diff3})
  @kbd{M-x
smerge-mode}を使って、Smergeモードに切り替えることができます。これは@command{diff3}プログラムの出力を編集するマイナーモードです。これは通常、バージョン管理システムと、バージョン管理システムの外での``update''をマージするとき、ファイルへの変更が競合して失敗した結果です。Smergeモードは特定の変更を選択することにより、競合を解決するコマンドを提供します。

@iftex
ファイルをマージする強力なインターフェースを提供するEmerge機能については、
@end iftex
@ifnottex
ファイルをマージする強力なインターフェースを提供するEmerge機能については、
@end ifnottex
@ref{Emerge}を参照してください。

@node Diff Mode
@section Diff Mode
@cindex Diff mode
@findex diff-mode
@cindex patches, editing

  Diffモードは、@kbd{M-x
diff}や他の同様なコマンドの出力のために使用されるメジャーモードです。この種の出力は@dfn{patch}と呼ばれます。なぜならそれが特定の変更を自動的に適用するために、@command{patch}コマンドに渡されるからです。手動でDiffモードを選択するには、@kbd{M-x
diff-mode}とタイプします。

@cindex hunk, diff
  パッチに指定された変更は、@dfn{hunk(欲張り)}にグループ化されます。これは変更された行を１行以上含むテキストと、それに隣接するテキストです。hunksには変更のコンテキストを提供するために、変更されていない行も含むことができます。それぞれのhunkには@dfn{hunkヘッダー}が前についていて、これはhunkが出現する古い方の行番号と、新しい行番号が指定されます。Diffモードは実際のhunkの内容と区別するため、hunkヘッダーをハイライトします。

@vindex diff-update-on-the-fly
  他のバッファーと同様に、Diffモードのバッファーを編集することができます(もし読み込み専用の場合、最初にそれを書き込み可にする必要があります。@ref{Misc
Buffer}を参照してください)。hunkを変更すると、Diffモードはpatchを``正しい''状態に保つために、hunkヘッダーの行番号を自動的に修正しようと試みます。自動的な行番号の修正を無効にするには、変数@code{diff-update-on-the-fly}を@code{nil}に変更してください。

  DiffモードはCompilationモードと同様に、各hunkを``エラーメッセージ''として扱います。したがって@kbd{C-x
'}のようなコマンドを使って、対応するソースの位置をvisitすることができます。

  それに加えてDiffモードは、移動、操作、patchの一部を適用するために、以下のコマンドを提供します:

@table @kbd
@item M-n
@findex diff-hunk-next
次のhunkが開始される位置に移動します(@code{diff-hunk-next})。

@findex diff-auto-refine-mode
@cindex mode, Diff Auto-Refine
@cindex Diff Auto-Refine mode
このコマンドには副作用があります。これは移動先のhunkを@dfn{refines(不純物を取り除く)}して、よりよい粒度で変更をハイライトします。この機能を無効にするには@kbd{M-x
diff-auto-refine-mode}とタイプして、マイナーモードのDiff
Auto-Refineモードをオフに切り替えます。デフォルトでDiff
Auto-Refineモードを無効にするには、以下をinitファイルに追加します(@ref{Hooks}を参照してください):

@example
(add-hook 'diff-mode-hook
          (lambda () (diff-auto-refine-mode -1)))
@end example

@item M-p
@findex diff-hunk-prev
前のhunkが開始される位置に移動します(@code{diff-hunk-prev})。これは@kbd{M-n}と同様、Diff
Auto-Refineモードが無効でなければ、移動先のhunkをrefiningする副作用があります。

@item M-@}
@findex diff-file-next
複数ファイルへのpatchで、次のファイルが開始される位置に移動します(@code{diff-file-next})。

@item M-@{
@findex diff-file-prev
複数ファイルへのpatchで、前のファイルが開始される位置に移動します(@code{diff-file-prev})。

@item M-k
@findex diff-hunk-kill
ポイントがある位置のhunkをkillします(@code{diff-hunk-kill})。

@item M-K
@findex diff-file-kill
複数ファイルへのpatchで、現在のファイル部分をkillします(@code{diff-file-kill})。

@item C-c C-a
@findex diff-apply-hunk
@cindex patches, applying
このhunkを対象ファイルに適用します(@code{diff-apply-hunk})。プレフィクス引数@kbd{C-u}を指定すると、このhunkを復元します。

@item C-c C-b
@findex diff-refine-hunk
ポイント位置のhunkの変更を、よりよい粒度でハイライトします(@code{diff-refine-hunk})。これにより変更された各行について実際に変更された箇所を確実に見ることができます。

@item C-c C-c
@findex diff-goto-source
このhunkに対応するソースファイルの行へジャンプします(@code{diff-goto-source})。

@item C-c C-e
@findex diff-ediff-patch
このパッチでEdiffセッションを開始します。@ref{Top, Ediff, Ediff, ediff, The Ediff
Manual}を参照してください。

@item C-c C-n
@findex diff-restrict-view
表示を現在のhunkに制限します(@code{diff-restrict-view})。@ref{Narrowing}を参照してください。プレフィクス引数@kbd{C-u}を指定すると、複数ファイルへのpatchで、表示を現在のファイルに制限します。制限を解除するには、@kbd{C-x
n w} (@code{widen})を使います。

@item C-c C-r
@findex diff-reverse-direction
バッファー全体の比較方向を逆転します(@code{diff-reverse-direction})。

@item C-c C-s
@findex diff-split-hunk
ポイント位置でhunkを分割します(@code{diff-split-hunk})。これは手動でpatchを編集するためのもので、@command{diff}プログラムに@option{-u}または@option{--unified}オプションを指定して生成された、@dfn{unified
diff
format(統一diffフォーマット)}だけで機能します。@command{diff}に@option{-c}または@option{--context}オプションを指定して生成された、@dfn{context
diff format(コンテキストdiffフォーマット)}のhunkを分割するには、最初に@kbd{C-c C-u}で、バッファーをunified
diff formatに変換する必要があります。

@item C-c C-d
@findex diff-unified->context
バッファー全体を、@dfn{context diff
format}に変換します(@code{diff-unified->context})。プレフィクス引数を指定すると、リージョンのテキストだけを変換します。

@item C-c C-u
@findex diff-context->unified
バッファー全体をunified diff
formatに変換します(@code{diff-context->unified})。プレフィクス引数を指定すると、unified
formatからcontext formatに変換します。マークがアクティブのときは、リージョンのテキストだけを変換します。

@item C-c C-w
@findex diff-refine-hunk
現在のhunkをrefineするので、空白文字の変更を無視します(@code{diff-refine-hunk})。

@item C-x 4 A
@findex diff-add-change-log-entries-other-window
@findex add-change-log-entry-other-window@r{, in Diff mode}
それぞれのhunkについて、@kbd{C-x 4 a}が行うようにChangeLog(@ref{Change
Log}を参照してください)のエントリーを生成します(@code{diff-add-change-log-entries-other-window})。これは、あとで実際に変更の説明を記入できるように、変更ログの雛形を作ります。Diffモードでの@kbd{C-x
4
a}自体は、現在のhunkのファイルのためのものですが、関数名はpatch自体から取得します。これはpatchにより削除される関数のための、ログエントリーを作るのに有用です。
@end table

@c Trailing whitespace is NOT shown by default.
@c Emacs's dir-locals file enables this (for some reason).
@cindex trailing whitespace, in patches
@findex diff-delete-trailing-whitespace
  patchには変更された行の行末に、無意識に入力された望んでいない空白文字が含まれている場合があります。この問題を扱うには2つの方法があります。1つ目はDiffバッファーでWhitespaceモード(@ref{Useless
Whitespace}を参照してください)を有効にする方法で、これは自動的に変更された行の行末にある空白文字をハイライトします。2つ目はコマンド@kbd{M-x
diff-delete-trailing-whitespace}を使う方法で、patchにより変更された行の行末の空白文字を検索して、patchとpatchされたソースファイルの両方からそれを取り除きます。このコマンドは変更を保存しないので、ユーザーが変更を保存するか決定することができます(変更されたファイルはエコーエリアに表示されます)。プレフィクス引数を指定すると、patchされたファイルではなく、元のソースファイルを変更しようと試みます。

@node Misc File Ops
@section Miscellaneous File Operations

  Emacsには、ファイルを操作する他のコマンドがたくさん存在します。それらはすべて1つのファイルを操作します。ファイル名にワイルドカードは指定できません。

@findex delete-file
@cindex deletion (of files)
  @kbd{M-x
delete-file}はファイルの入力を求め、そのファイルを削除します。1つのディレクトリーにある、複数のファイルを削除する場合、@code{delete-file}よりDiredを使う方が便利でしょう。@ref{Dired
Deletion}を参照してください。

@cindex trash
@cindex recycle bin
  @kbd{M-x move-file-to-trash}は、ファイルをシステムの@dfn{Trash}(または@dfn{Recycle
Bin})に移動します。この機能は、ほとんどのオペレーティングシステムで利用可能です。Trashに移動されたファイルは、後で気が変わったとき元に戻すことができます。

@vindex delete-by-moving-to-trash
  デフォルトでは、Emacsの削除コマンドはTrashを@emph{使いません}。一般的な削除コマンドでTrash(それが利用可能な場合)を使うには、変数@code{delete-by-moving-to-trash}を@code{t}に変更します。これはコマンド@kbd{M-x
delete-file}と@kbd{M-x delete-directory}
(@ref{Directories}を参照してください)、およびDired (@ref{Dired
Deletion}を参照してください)の削除コマンドに影響を与えます。@kbd{M-x delete-file}および@kbd{M-x
delete-directory}にプレフィクス引数を与えると、@code{delete-by-moving-to-trash}の値にかかわらず、Trashを使わずに完全に削除します。

@ifnottex
  ファイルがバージョンコントロール(@ref{Version Control}を参照してください)の配下にある時は、@kbd{M-x
delete-file}のかわりに@kbd{M-x vc-delete-file}を使って、ファイルを削除します。@ref{VC
Delete/Rename}を参照してください。
@end ifnottex

@findex copy-file
@cindex copying files
  @kbd{M-x copy-file}はファイル@var{old}を読み込んで、新しい@var{new}というファイルに同じ内容を書き込みます。

@findex copy-directory
  @kbd{M-x copy-directory}は、シェルコマンド@command{cp
-r}と同じようにディレクトリーをコピーします。これはディレクトリー@var{old}と、コピー先の@var{new}を読み取ります。@var{new}が既存のディレクトリーのとき、このコマンドは@var{old}ディレクトリーのコピーを作成して、それを@var{new}の下にコピーします。@var{new}が既存のディレクトリーでないとき、このコマンドは@var{old}の内容を、新しい@var{new}という名前のディレクトリーにすべてコピーします。

@cindex renaming files
@findex rename-file
  @kbd{M-x
rename-file}は、ミニバッファーを使って2つのファイル名@var{old}と@var{new}を読み取り、ファイル@var{old}を@var{new}にリネームします。@var{new}という名前のファイルが既に存在するとき、確認に@kbd{yes}と応えなければリネームは行われません。これはリネームにより、@var{new}という名前で参照されていた古い内容が失われるからです。@var{old}と@var{new}が異なるファイルシステムにある場合、@var{old}がコピーされてから削除されます。引数@var{new}がディレクトリー名の場合、実際の新しい名前はそのディレクトリーと、その配下の非ディレクトリー@var{old}になります。たとえば@kbd{M-x
rename-file @key{RET} ~/foo @key{RET} /tmp
@key{RET}}は、@file{~/foo}を@file{/tmp/foo}にリネームします。このルールはこのセクションの残りのコマンドにも適用されます。新しい名前のファイルがすでに存在する場合は、確認を求めます。

@ifnottex
  ファイルがバージョンコントロール(@ref{Version Control}を参照してください)の配下にある時は、@kbd{M-x
rename-file}のかわりに@kbd{M-x vc-rename-file}を使ってリネームします。@ref{VC
Delete/Rename}を参照してください。
@end ifnottex

@findex add-name-to-file
@cindex hard links (creation)
  @kbd{M-x
add-name-to-file}は、既存のファイルの古い名前を削除せずに、新しい名前を追加します。新しい名前は、既存のファイルの``ハードリンク''として作成されます。新しい名前は、そのファイルがあるのと同じファイルシステムになければなりません。MS-Windowsでは、このコマンドはファイルがNTFSファイルシステムにあるときだけ機能します。MS-DOSではファイルをコピーすることにより機能します。

@findex make-symbolic-link
@cindex symbolic links (creation)
  @kbd{M-x
make-symbolic-link}は、2つのファイル名@var{target}と@var{linkname}を読み取り、@var{target}を指す@var{linkname}という名前のシンボリックリンクを作成します。これにより@var{linkname}といファイルを開こうとすると、その時点で@var{target}という名前のファイルを開きます。その時点で@var{target}という名前のファイルが存在しないときはエラーになります。このコマンドは引数@var{target}を展開しないので、リンクの対象を相対パスで指定できます。MS-Windowsでは、このコマンドはMS
Windows Vista以降だけで機能します。

@kindex C-x i
@findex insert-file
  @kbd{M-x insert-file}(@kbd{C-x
i}も)は、指定したファイルの内容のコピーを、現在のポイント位置に挿入し、ポイントの位置は変更せずに挿入された内容の前に残します。挿入した内容の後の位置はマークリングに追加され、マークは非アクティブになります(@ref{Mark
Ring}を参照してください)。

@findex insert-file-literally
  @kbd{M-x insert-file-literally}も@kbd{M-x
insert-file}と同様ですが、ファイルは``literally(そのまま)''挿入されます。つまり@kbd{M-x
find-file-literally}コマンド(@ref{Visiting}を参照してください)と同様に、特別なエンコーディングや変換なしに、@acronym{ASCII}文字の並びとして扱われます。

@findex write-region
  @kbd{M-x write-region}は@kbd{M-x
insert-file}の逆です。このコマンドはリージョンの内容を、指定されたファイルにコピーします。@kbd{M-x
append-to-file}はリージョンのテキストを、指定されたファイルの末尾に加えます。@ref{Accumulating
Text}を参照してください。変数@code{write-region-inhibit-fsync}の値は、これらのコマンドおよびファイルの保存に影響を与えます。@ref{Customize
Save}を参照してください。

@findex set-file-modes
@cindex file modes
@cindex file permissions
  @kbd{M-x set-file-modes}はファイル名と、その後に@dfn{ファイルモード(file
mode)}を読み込んで、指定されたファイルにそのファイルモードを適用します。ファイルモード(または@dfn{ファイルパーミッション(file
permissions)}とも呼ばれます)は、ファイルが読み込み可能か、書き込み可能か、実行可能か、そしてそれは誰にたいしてなのかを決定します。このコマンドは、@command{chmod}コマンドに指定する形式の、シンボルまたは8進のファイルモードを読み取ります。たとえば@samp{u+x}は、そのファイルを所有するユーザーに実行可能の権限を追加することを意味します。ファイルモードをサポートしないオペレーティングシステムでは、効果はありません。@code{chmod}はこの関数の便利なエイリアスです。

@node Compressed Files
@section Accessing Compressed Files
@cindex compression
@cindex uncompression
@cindex Auto Compression mode
@cindex mode, Auto Compression
@pindex gzip

  Emacsは、圧縮されたファイルをvisitするとき、自動的に解凍します。また、それらのファイルを変更して保存するときも、自動的に再圧縮します。Emacsは圧縮ファイルを名前で認識します。ファイル名が@samp{.gz}で終わっていれば、それはファイルが@code{gzip}で圧縮されていることを示します。他の拡張子の場合は、他の圧縮プログラムを示します。

  自動的な解凍と圧縮は、Emacsがファイル内容を操作するすべてに適用されます。これにはvisit、保存、内容のバッファーへの挿入、ロード、バイトコンパイルが含まれます。

@findex auto-compression-mode
@vindex auto-compression-mode
  この機能を無効にするには、コマンド@kbd{M-x
auto-compression-mode}とタイプします。変数@code{auto-compression-mode}をカスタマイズすることにより、永続的に無効にすることができます。

@node File Archives
@section File Archives
@cindex mode, tar
@cindex Tar mode
@cindex file archives

  名前が@samp{.tar}で終わるファイルは通常、@code{tar}プログラムで作られた@dfn{アーカイブ}です。Emacsはそれらを、Tarモードと呼ばれる特別なモードで表示します。これは内容をDiredに似たリストで提供します(@ref{Dired}を参照してください)。リストの移動はDiredのときと同様で、アーカイブに含まれるファイルをvisitできます。しかしTarモードでは、Diredコマンドのすべてが利用可能ではありません。

  Auto Compressionモードが有効な場合(@ref{Compressed
Files}を参照してください)、Tarモードは圧縮アーカイブ(ファイルの拡張子が@samp{.tgz}、@code{.tar.Z}、@code{.tar.gz})も使うことができます。

  キー@kbd{e}、@kbd{f}、@key{RET}はすべて、ファイルをファイル自身のバッファーに展開します。それをバッファーで編集して、バッファーを保存すると、編集されたバージョンでTarバッファーのものを置き換えます。Tarバッファーでファイル名をマウスでクリックしても、同様なことが行えます。@kbd{v}はファイルをバッファーにViewモードで展開します(@ref{View
Mode}を参照してください)。@kbd{o}は、ファイルを展開して他のウィンドウで表示するので、ファイルの編集とアーカイブの操作を同時に行うことができます。

  Diredと同様に、@kbd{d}は後で@kbd{x}を使ったときにファイルを削除するためにマークし、@kbd{u}はマークを外します。@kbd{C}はファイルをアーカイブからディスクにコピーし、@kbd{R}はアーカイブのファイルをリネームします。@kbd{g}はバッファーをディスク上のアーカイブでリバートします。キー@kbd{M}、@kbd{G}、@kbd{O}は、ファイルのパーミッションビット、グループ、所有者を変更します。

  Tarバッファーの保存により、構成要素に変更が施された、新しいバージョンのアーカイブをディスクに書き込みます。

  Tarモードを使うのに、@code{tar}プログラムは必要ありません。Emacsは直接アーカイブを読み込みます。しかし圧縮アーカイブへのアクセスには、適切な解凍プログラムが必要です。

@cindex Archive mode
@cindex mode, archive
@cindex @code{arc}
@cindex @code{jar}
@cindex @code{rar}
@cindex @code{zip}
@cindex @code{lzh}
@cindex @code{zoo}
@cindex @code{7z}
@pindex arc
@pindex jar
@pindex zip
@pindex rar
@pindex lzh
@pindex zoo
@pindex 7z
@cindex Java class archives
@cindex unzip archives
  @code{arc}、@code{jar}、@code{lzh}、@code{zip}、@code{rar}、@code{7z}、@code{zoo}、および自己解凍実行形式の@code{exe}には、互いに似通った異なるArchiveモードが使われます。

  ArchiveモードのキーバインドはTarモードと同様で、それに加えてキー@kbd{m}は後に続く操作のためにファイルをマークし、@kbd{M-@key{DEL}}はマークされたファイルのマークをすべて外します。キー@kbd{a}は、1行に収まらないようなアーカイブの、詳細なファイル情報の表示を切り替えます。ファイルのリネーム、ファイルモードや所有者の変更をサポートするアーカイブ書式は、いくつかに限られます。

  Tarモードとは異なり、Archiveモードはアーカイブの展開と格納に、アーカイブプログラムを実行します。しかし、展開したりアーカイブ内のファイルを操作するときだけこれらのプログラムが必要で、アーカイブの目録を見るには必要ありません。プログラム名とセットできるオプションの詳細は、カスタマイズグループ@samp{Archive}でセットできます。

@node Remote Files
@section Remote Files

@cindex Tramp
@cindex FTP
@cindex remote file access
  他のマシンにあるファイルを、特別なファイル名構文を使って参照できます:

@example
@group
/@var{host}:@var{filename}
/@var{user}@@@var{host}:@var{filename}
/@var{user}@@@var{host}#@var{port}:@var{filename}
/@var{method}:@var{user}@@@var{host}:@var{filename}
/@var{method}:@var{user}@@@var{host}#@var{port}:@var{filename}
@end group
@end example

@noindent
このリクエストを発行するために、Emacsは@command{ftp}、@command{ssh}、@command{rlogin}、@command{telnet}のような、リモートログインプログラムを使います。どの方法を使うかは、常にファイル名で指定できます。たとえば@file{/ftp:@var{user}@@@var{host}:@var{filename}}はFTP、@file{/ssh:@var{user}@@@var{host}:@var{filename}}は@command{ssh}を使います。ファイル名でログイン方法を指定しない場合、Emacsは以下により方法を選択します:

@enumerate
@item
ホスト名が@samp{ftp.}(ドットを含む)で始まるとき、EmacsはFTPを使います。
@item
ユーザー名が@samp{ftp}または@samp{anonymous}のとき、EmacsはFTPを使います。
@item
変数@code{tramp-default-method}が@samp{ftp}にセットされているとき、EmacsはFTPを使います。
@item
@command{ssh-agent}が実行されているとき、Emacsは@command{scp}を使います。
@item
上記以外の場合、Emacsは@command{ssh}を使います。
@end enumerate

@cindex disabling remote files
@noindent
変数@code{tramp-mode}を@code{nil}にセットすることにより、リモートファイル名の機能を完全にオフにすることができます。個別のケースについて機能をオフにするには、ファイル名を@samp{/:}でクォートします(@ref{Quoted
File Names}を参照してください)。

@cindex ange-ftp
  FTPを通じたリモートファイルへのアクセスは、以下で説明するAnge-FTPパッケージで処理されます。他の方法によりリモートファイルへのアクセスはTrampパッケージにより処理され、これにはそれ自身のマニュアルがあります。@ref{Top,
The Tramp Manual,, tramp, The Tramp Manual}を参照してください。

@vindex ange-ftp-default-user
@cindex user name for remote file access
  Ange-FTPパッケージでは、リモートファイル名にユーザー名@var{user}がしているときは、FTPを通じてその名前でログインします。@var{user}が指定されていないとき、Emacsはローカルシステムのユーザー名でログインします。しかし変数@code{ange-ftp-default-user}に文字列がセットされているときは、かわりにその文字列を使用します。Emacsは、ログイン時にパスワードの入力も求めます。

@cindex backups for remote files
@vindex ange-ftp-make-backup-files
  パフォーマンス的な理由により、FTPを通じたファイルのアクセス時に、デフォルトではEmacsはバックアップファイルを作成しません。バックアップを作成するには、変数@code{ange-ftp-make-backup-files}を非@code{nil}値に変更してください。

  デフォルトではリモートファイルの自動保存ファイルは、変数@code{auto-save-file-name-transforms}で指定された、ローカルマシンの一時ディレクトリーに作成されます。@ref{Auto
Save Files}を参照してください。

@cindex anonymous FTP
@vindex ange-ftp-generate-anonymous-password
  匿名FTPでアクセスできるファイルをvisitするには、特別なユーザー名@samp{anonymous}または@samp{ftp}を使います。これらのユーザー名にたいするパスワードは、特別に処理されます。これは変数@code{ange-ftp-generate-anonymous-password}により制御されます。この変数の値が文字列の場合、その文字列がパスワードとして使用されます。非@code{nil}(デフォルト)の場合、@code{user-mail-address}の値が使用されます。@code{nil}の場合、Emacsは通常どおりパスワードの入力を求めます(@ref{Passwords}を参照してください)。

@cindex firewall, and accessing remote files
@cindex gateway, and remote file access with @code{ange-ftp}
@vindex ange-ftp-smart-gateway
@vindex ange-ftp-gateway-host
  セキュリティー上の理由で、リモートマシンとの間にある@dfn{ファイアーウォール(firewall)}により、ファイルにアクセスできないときがあります。対象ファイルにアクセスできるマシンから@dfn{ゲートウェイ(gateway)}マシンにログインできて、FTPサーバーがゲートウェイ機能をサポートしている場合は、リモートファイル名を使うことができます。これを行うには変数@code{ange-ftp-gateway-host}にゲートウェイマシンの名前をセットして、@code{ange-ftp-smart-gateway}を@code{t}にセットする必要があります。それ以外の場合でもリモートファイル名が機能するようにできますが、その方法は複雑です。これらの方法は、@kbd{M-x
finder-commentary @key{RET} ange-ftp @key{RET}}とタイプして読むことができます。

@node Quoted File Names
@section Quoted File Names

@cindex quoting file names
@cindex file names, quote special characters
  特殊な文字や構文を含むファイルにたいする特別な効果を防ぐために、絶対ファイル名を@dfn{クォート}できます。これを行うには先頭に@samp{/:}を追加します。

  たとえばリモートにあるように見える名前の、ローカルなファイルの名前をクォートすることにより、リモートファイル名として扱われないようにすることができます。したがって名前が@file{/foo:}というディレクトリーがあり、そこに@file{bar}という名前のファイルがある場合、Emacsでは、そのファイルを@samp{/:/foo:/bar}という名前で参照できます。

  @samp{/:}は、@samp{~}がユーザーのホームディレクトリーを意味する、特別な文字として扱われることを防ぐこともできます。たとえば@file{/:/tmp/~hack}は、ディレクトリー@file{/tmp}のファイル@file{~hack}を参照します。

  @samp{/:}によるクォートは、ミニバッファーでの名前に@samp{$}を含むファイル名の入力にも使用できます。これが機能するには、ミニバッファーの最初の内容が@samp{/:}で始まらなければなりません(2回@samp{$}を記述することでも同様な効果が得られます。詳細は@ref{File
Names with $}を参照してください)。

  ファイルをvisitするときに、ワイルドカードをクォートすることもできます。たとえば@file{/:/tmp/foo*bar}は、ファイル@file{/tmp/foo*bar}をvisitします。

  同じ効果を得るための別の方法は、@file{/tmp/foo[*]bar}と入力する方法です。これは@file{/tmp/foo*bar}だけにマッチするワイルドカード指定です。しかしクォートしなくても同じ結果が得られるので、ワイルドカード文字をクォートする必要がない場合がたくさんあります。たとえば@file{/tmp}の中に@samp{foo}で始まり@samp{bar}で終わるファイルが@file{foo*bar}だけの場合、@file{/tmp/foo*bar}と指定することにより、@file{/tmp/foo*bar}だけをvisitすることができます。

@node File Name Cache
@section File Name Cache

@cindex file name caching
@cindex cache of file names
@pindex find
@kindex C-TAB
@findex file-cache-minibuffer-complete
  @dfn{ファイル名キャッシュ(file name
cache)}により、ファイルがどこにあるか正確に覚えていなくても、名前でファイルがどこにあるかを簡単に指定することができます。ファイル名をミニバッファーでタイプするとき、@kbd{C-@key{TAB}}
(@code{file-cache-minibuffer-complete})で、ファイル名キャッシュを使ったファイル名を補完が行なわれます。@kbd{C-@key{TAB}}を繰り返すと、最初にタイプした内容から補完できる利用可能な候補を順番に表示します(しかし@kbd{C-@key{TAB}}文字は、多くのテキスト端末でタイプできないことに注意してください)。

  ファイル名キャッシュは自動的に充填されません。かわりに以下のコマンドを使ってファイル名をキャッシュにロードします。

@findex file-cache-add-directory
@table @kbd
@item M-x file-cache-add-directory @key{RET} @var{directory} @key{RET}
@var{directory}の各ファイルを、ファイル名キャッシュに加えます。
@item M-x file-cache-add-directory-using-find @key{RET} @var{directory} @key{RET}
@var{directory}の各ファイルを、ファイル名キャッシュに加えるとともに、ネストされたサブディレクトリーのすべてのファイルを、ファイル名キャッシュに加えます。
@item M-x file-cache-add-directory-using-locate @key{RET} @var{directory} @key{RET}
@var{directory}の各ファイルを、ファイル名キャッシュに加えるとともに、ネストされたサブディレクトリーのすべてのファイルを、ファイル名キャッシュに加えます。ファイルの検索には、@command{locate}を使用します。
@item M-x file-cache-add-directory-list @key{RET} @var{variable} @key{RET}
@var{variable}にリストされた各ディレクトリーのファイル名を、ファイル名キャッシュに加えます。@var{variable}はLisp変数で、@code{load-path}と同様、値はディレクトリー名のリストです。
@item M-x file-cache-clear-cache @key{RET}
キャッシュをクリアーして、すべてのファイル名を削除します。
@end table

  ファイル名キャッシュは永続的ではありません。キャッシュが維持されるのはEmacsのセッションの間だけです。キャッシュの内容は、@code{file-cache-display}コマンドで閲覧できます。

@node File Conveniences
@section Convenience Features for Finding Files

  このセクションでは、最近開いたファイルの検索、バッファーからのファイル名の読み取り、イメージファイルの閲覧などの、便利な機能を紹介します。

@findex recentf-mode
@vindex recentf-mode
@findex recentf-save-list
@findex recentf-edit-list
  @kbd{M-x
recentf-mode}でRecentfモードを有効にすると、@samp{File}メニューに最近開いたファイルを含むサブメニューが含まれるようになります。@kbd{M-x
recentf-save-list}は現在の@code{recent-file-list}をファイルに保存し、@kbd{M-x
recentf-edit-list}でそれを編集できます。

  @kbd{M-x
ffap}コマンドは、@code{find-file}を一般化した、より強力なデフォルト決定のための機能で、基本的にはポイント位置のテキストにもとづいて決定を行ないます。Partial
Completionモードは@code{find-file}を拡張する、@code{ffap}とともに使用できるその他の機能を提案します。@ref{Completion
Options}を参照してください。

@findex image-mode
@findex image-toggle-display
@findex image-next-file
@findex image-previous-file
@cindex images, viewing
  イメージファイルをvisitすることにより、Imageモードが選択されます。このメジャーモードでは、@kbd{C-c C-c}
(@code{image-toggle-display})とタイプすることにより、Emacsバッファーでファイルのイメージ表示と、イメージの元となるテキスト(またはraw
byte)表示を切り替えることができます。ファイルのイメージ表示は、Emacsがそのようなイメージの表示をサポートするようにコンパイルされているときだけ機能します。イメージがフレームの高さまたは幅より大きい場合、通常のポイント移動キー(@kbd{C-f}、@kbd{C-p}、...)は、イメージの他の部分の表示に使われます。@kbd{n}
(@code{image-next-file})および@kbd{p}
(@code{image-previous-file})を押すことにより、同じディレクトリーにある次または前のイメージをvisitします。

@findex image-toggle-animation
@findex image-next-frame
@findex image-previous-frame
@findex image-goto-frame
@findex image-increase-speed
@findex image-decrease-speed
@findex image-reset-speed
@findex image-reverse-speed
@vindex image-animate-loop
@cindex image animation
@cindex animated images
  アニメーションが可能なイメージの場合、コマンド@key{RET}
(@code{image-toggle-animation})で、アニメーションの開始と停止ができます。オプション@code{image-animate-loop}が非@code{nil}でなければ、アニメーションの再生は1回です。@kbd{f}
(@code{image-next-frame})と@kbd{b}
(@code{image-previous-frame})により、アニメーションの各フレームを切り替えることができます。これらのコマンドは数引数を指定することにより、指定した数の分だけ先のフレームを表示できます。@kbd{F}
(@code{image-goto-frame})により、特定のフレームを指定することができます。@kbd{a +}
(@code{image-increase-speed})とタイプすると、アニメーションのスピードが早くなり、@kbd{a -}
(@code{image-decrease-speed})で遅くなります。また@kbd{a r}
(@code{image-reverse-speed})で逆再生されます。コマンド@kbd{a 0}
(@code{image-reset-speed})は、スピードを元の値にリセットします。

@cindex ImageMagick support
@vindex imagemagick-enabled-types
@vindex imagemagick-types-inhibit
  EmacsがImageMagickのサポートつきでコンパイルされている場合、さまざまなイメージを描画するのに、ImageMagickを使うことができます。変数@code{imagemagick-enabled-types}は、EmacsがImageMagickを使って描画できるイメージの種類のリストです。リストの各要素は、ImageMagick内部でのイメージ種類にたいする名前で、シンボルまたは等価な文字列で指定します(たとえば@code{BMP}は@file{.bmp}イメージです)。利用可能なイメージの種類にたいしてImageMagickを有効にするには、@code{imagemagick-enabled-types}を@code{t}に変更します。変数@code{imagemagick-types-inhibit}は、変数@code{imagemagick-enabled-types}の値にかかわらずmImageMagickを使わずに描画するイメージ種類のリストです(リストのデフォルトには@code{C}および@code{HTML}などが含まれ、これらはImageMagickは``イメージ''として描画できるが、Emacsはイメージとして描画しないものです)。ImageMagickを完全に無効にするには、@code{imagemagick-types-inhibit}を@code{t}に変更してください。

@findex thumbs-mode
@findex mode, thumbs
  Image-Diredパッケージはイメージをサムネールとして表示するのにも使用されます。@ref{Image-Dired}を参照してください。

@node Filesets
@section Filesets
@cindex filesets
@cindex sets of files

@findex filesets-init
  定期的に特定のファイルのグループを編集する場合、それらを@dfn{ファイルセット(fileset)}として定義できます。これによりvisit、@code{query-replace}、シェルコマンドなどの特別な操作を、すべてのファイルに一度に行うことができます。ファイルセットを使うには、initファイル(@ref{Init
File}を参照してください)に、式@code{(filesets-init)}を追加しなければなりません。これはメニューバーに@samp{Filesets}メニューを追加します。

@findex filesets-add-buffer
@findex filesets-remove-buffer
  ファイルセットを定義する一番簡単な方法は、ファイルを1つずつ追加する方法です。ファイルセット@var{name}にファイルを追加するには、そのファイルをvisitして@kbd{M-x
filesets-add-buffer @key{RET} @var{name}
@key{RET}}をタイプします。ファイルセット@var{name}が存在しない場合、現在のファイルだけを含む新しいファイルセットを作成します。コマンド@kbd{M-x
filesets-remove-buffer}は、ファイルセットから現在のファイルを削除します。

  @kbd{M-x filesets-edit}(または@samp{Filesets}メニューの@samp{Edit
Filesets}を選択)で、ファイルセットを直接編集することもできます。編集はCustomizeバッファーで行われます(@ref{Easy
Customization}を参照してください)。ファイルセットは通常、単純なファイルのリストですが、ファイル名にマッチする正規表現で、ファイルセットを定義することもできます。より複雑なファイルセットの例は、Customizeバッファーに記されています。将来のEmacsセッションで同じファイルセットを使うには、@samp{Save
for future sessions}を選択するのを忘れないでください。

  コマンド@kbd{M-x filesets-open}を使って、ファイルセットのすべてのファイルをvisitし、それらを@kbd{M-x
filesets-close}で閉じることができます。@kbd{M-x
filesets-run-cmd}を使って、ファイルセットのすべてのファイルにたいして、シェルコマンドを実行します。これらのコマンドは@samp{Filesets}メニューからも利用可能で、メニューには既存のファイルセットが、サブメニューとして表示されています。

   異なるコンセプトの``ファイルセット(バージョンコントロール操作のためにグループにまとめられたファイル)''については、@ref{Version
Control}を参照してください。この種のファイルセットには名前がなく、Emacsセッション間で引き継がれません。
