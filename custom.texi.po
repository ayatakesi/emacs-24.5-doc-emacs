# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-06-25 01:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: custom.texi.orig:5 custom.texi.orig:6
#, no-wrap
msgid "Customization"
msgstr ""

#. type: cindex
#: custom.texi.orig:7
#, no-wrap
msgid "customization"
msgstr ""

#. type: Plain text
#: custom.texi.orig:11
msgid ""
"This chapter describes some simple methods to customize the behavior of "
"Emacs."
msgstr ""

#. type: Plain text
#: custom.texi.orig:17
msgid ""
"Apart from the methods described here, see @ref{X Resources} for information "
"about using X resources to customize Emacs, and see @ref{Keyboard Macros} "
"for information about recording and replaying keyboard macros.  Making more "
"far-reaching and open-ended changes involves writing Emacs Lisp code; see"
msgstr ""

#. type: iftex
#: custom.texi.orig:19
msgid "@cite{The Emacs Lisp Reference Manual}."
msgstr ""

#. type: ifnottex
#: custom.texi.orig:23
msgid "@ref{Top, Emacs Lisp, Emacs Lisp, elisp, The Emacs Lisp Reference Manual}."
msgstr ""

#. type: node
#: custom.texi.orig:34 custom.texi.orig:36
#, no-wrap
msgid "Easy Customization"
msgstr ""

#. type: menuentry
#: custom.texi.orig:34
msgid "Convenient way to browse and change settings."
msgstr ""

#. type: section
#: custom.texi.orig:34 custom.texi.orig:690 custom.texi.orig:691
#, no-wrap
msgid "Variables"
msgstr ""

#. type: menuentry
#: custom.texi.orig:34
msgid ""
"Many Emacs commands examine Emacs variables to decide what to do; by setting "
"variables, you can control their functioning."
msgstr ""

#. type: node
#: custom.texi.orig:34 custom.texi.orig:1364
#, no-wrap
msgid "Key Bindings"
msgstr ""

#. type: menuentry
#: custom.texi.orig:34
msgid ""
"The keymaps say what command each key runs.  By changing them, you can "
"\"redefine keys\"."
msgstr ""

#. type: node
#: custom.texi.orig:34 custom.texi.orig:2066
#, no-wrap
msgid "Init File"
msgstr ""

#. type: menuentry
#: custom.texi.orig:34
msgid "How to write common customizations in the initialization file."
msgstr ""

#. type: section
#: custom.texi.orig:37
#, no-wrap
msgid "Easy Customization Interface"
msgstr ""

#. type: cindex
#: custom.texi.orig:39
#, no-wrap
msgid "settings"
msgstr ""

#. type: cindex
#: custom.texi.orig:40
#, no-wrap
msgid "user option"
msgstr ""

#. type: cindex
#: custom.texi.orig:41
#, no-wrap
msgid "customizable variable"
msgstr ""

#. type: Plain text
#: custom.texi.orig:50
msgid ""
"Emacs has many @dfn{settings} which you can change.  Most settings are "
"@dfn{customizable variables} (@pxref{Variables}), which are also called "
"@dfn{user options}.  There is a huge number of customizable variables, "
"controlling numerous aspects of Emacs behavior; the variables documented in "
"this manual are listed in @ref{Variable Index}.  A separate class of "
"settings are the @dfn{faces}, which determine the fonts, colors, and other "
"attributes of text (@pxref{Faces})."
msgstr ""

#. type: findex
#: custom.texi.orig:51
#, no-wrap
msgid "customize"
msgstr ""

#. type: cindex
#: custom.texi.orig:52
#, no-wrap
msgid "customization buffer"
msgstr ""

#. type: Plain text
#: custom.texi.orig:57
msgid ""
"To browse and alter settings (both variables and faces), type @kbd{M-x "
"customize}.  This creates a @dfn{customization buffer}, which lets you "
"navigate through a logically organized list of settings, edit and set their "
"values, and save them permanently."
msgstr ""

#. type: subsection
#: custom.texi.orig:67 custom.texi.orig:69 custom.texi.orig:70
#, no-wrap
msgid "Customization Groups"
msgstr ""

#. type: menuentry
#: custom.texi.orig:67
msgid "How settings are classified."
msgstr ""

#. type: node
#: custom.texi.orig:67 custom.texi.orig:134
#, no-wrap
msgid "Browsing Custom"
msgstr ""

#. type: menuentry
#: custom.texi.orig:67
msgid "Browsing and searching for settings."
msgstr ""

#. type: subsection
#: custom.texi.orig:67 custom.texi.orig:181 custom.texi.orig:182
#, no-wrap
msgid "Changing a Variable"
msgstr ""

#. type: menuentry
#: custom.texi.orig:67
msgid "How to edit an option's value and set the option."
msgstr ""

#. type: subsection
#: custom.texi.orig:67 custom.texi.orig:356 custom.texi.orig:357
#, no-wrap
msgid "Saving Customizations"
msgstr ""

#. type: menuentry
#: custom.texi.orig:67
msgid "Saving customizations for future Emacs sessions."
msgstr ""

#. type: node
#: custom.texi.orig:67 custom.texi.orig:405
#, no-wrap
msgid "Face Customization"
msgstr ""

#. type: menuentry
#: custom.texi.orig:67
msgid "How to edit the attributes of a face."
msgstr ""

#. type: node
#: custom.texi.orig:67 custom.texi.orig:484
#, no-wrap
msgid "Specific Customization"
msgstr ""

#. type: menuentry
#: custom.texi.orig:67
msgid "Customizing specific settings or groups."
msgstr ""

#. type: subsection
#: custom.texi.orig:67 custom.texi.orig:546 custom.texi.orig:547
#, no-wrap
msgid "Custom Themes"
msgstr ""

#. type: menuentry
#: custom.texi.orig:67
msgid "Collections of customization settings."
msgstr ""

#. type: subsection
#: custom.texi.orig:67 custom.texi.orig:641 custom.texi.orig:642
#, no-wrap
msgid "Creating Custom Themes"
msgstr ""

#. type: menuentry
#: custom.texi.orig:67
msgid "How to create a new custom theme."
msgstr ""

#. type: cindex
#: custom.texi.orig:71
#, no-wrap
msgid "customization groups"
msgstr ""

#. type: Plain text
#: custom.texi.orig:76
msgid ""
"Customization settings are organized into @dfn{customization groups}.  These "
"groups are collected into bigger groups, all the way up to a master group "
"called @code{Emacs}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:79
msgid ""
"@kbd{M-x customize} creates a customization buffer that shows the top-level "
"@code{Emacs} group.  It looks like this, in part:"
msgstr ""

#. type: group
#: custom.texi.orig:86
#, no-wrap
msgid ""
"For help, see [Easy Customization] in the [Emacs manual].\n"
"\n"
msgstr ""

#. type: group
#: custom.texi.orig:88
#, no-wrap
msgid ""
"________________________________________ [ Search ]\n"
"\n"
msgstr ""

#. type: group
#: custom.texi.orig:91
#, no-wrap
msgid ""
" Operate on all settings in this buffer:\n"
" [ Revert... ] [ Apply ] [ Apply and Save ]\n"
"\n"
msgstr ""

#. type: group
#: custom.texi.orig:96
#, no-wrap
msgid ""
"Emacs group: Customization of the One True Editor.\n"
"      [State]: visible group members are all at standard values.\n"
"      See also [Manual].\n"
"\n"
msgstr ""

#. type: group
#: custom.texi.orig:99
#, no-wrap
msgid ""
"[Editing] : Basic text editing facilities.\n"
"[Convenience] : Convenience features for faster editing.\n"
"\n"
msgstr ""

#. type: group
#: custom.texi.orig:101
#, no-wrap
msgid "@var{more second-level groups}\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:109
msgid ""
"The main part of this buffer shows the @samp{Emacs} customization group, "
"which contains several other groups (@samp{Editing}, @samp{Convenience}, "
"etc.).  The contents of those groups are not listed here, only one line of "
"documentation each."
msgstr ""

#. type: Plain text
#: custom.texi.orig:112
msgid ""
"The @dfn{state} of the group indicates whether setting in that group has "
"been edited, set or saved.  @xref{Changing a Variable}."
msgstr ""

#. type: cindex
#: custom.texi.orig:113
#, no-wrap
msgid "editable fields (customization buffer)"
msgstr ""

#. type: cindex
#: custom.texi.orig:114
#, no-wrap
msgid "buttons (customization buffer)"
msgstr ""

#. type: cindex
#: custom.texi.orig:115
#, no-wrap
msgid "links (customization buffer)"
msgstr ""

#. type: Plain text
#: custom.texi.orig:124
msgid ""
"Most of the customization buffer is read-only, but it includes some "
"@dfn{editable fields} that you can edit.  For example, at the top of the "
"customization buffer is an editable field for searching for settings "
"(@pxref{Browsing Custom}).  There are also @dfn{buttons} and @dfn{links}, "
"which you can activate by either clicking with the mouse, or moving point "
"there and typing @key{RET}.  For example, the group names like "
"@samp{[Editing]} are links; activating one of these links brings up the "
"customization buffer for that group."
msgstr ""

#. type: kindex
#: custom.texi.orig:125
#, no-wrap
msgid "TAB @r{(customization buffer)}"
msgstr ""

#. type: kindex
#: custom.texi.orig:126
#, no-wrap
msgid "S-TAB @r{(customization buffer)}"
msgstr ""

#. type: findex
#: custom.texi.orig:127
#, no-wrap
msgid "widget-forward"
msgstr ""

#. type: findex
#: custom.texi.orig:128
#, no-wrap
msgid "widget-backward"
msgstr ""

#. type: Plain text
#: custom.texi.orig:133
msgid ""
"In the customizable buffer, you can type @key{TAB} (@code{widget-forward}) "
"to move forward to the next button or editable field.  @kbd{S-@key{TAB}} "
"(@code{widget-backward}) moves back to the previous button or editable "
"field."
msgstr ""

#. type: subsection
#: custom.texi.orig:135
#, no-wrap
msgid "Browsing and Searching for Settings"
msgstr ""

#. type: findex
#: custom.texi.orig:136
#, no-wrap
msgid "customize-browse"
msgstr ""

#. type: Plain text
#: custom.texi.orig:145
msgid ""
"From the top-level customization buffer created by @kbd{M-x customize}, you "
"can follow the links to the subgroups of the @samp{Emacs} customization "
"group.  These subgroups may contain settings for you to customize; they may "
"also contain further subgroups, dealing with yet more specialized subsystems "
"of Emacs.  As you navigate the hierarchy of customization groups, you should "
"find some settings that you want to customize."
msgstr ""

#. type: Plain text
#: custom.texi.orig:150
msgid ""
"If you are interested in customizing a particular setting or customization "
"group, you can go straight there with the commands @kbd{M-x "
"customize-option}, @kbd{M-x customize-face}, or @kbd{M-x customize-group}.  "
"@xref{Specific Customization}."
msgstr ""

#. type: vindex
#: custom.texi.orig:151
#, no-wrap
msgid "custom-search-field"
msgstr ""

#. type: Plain text
#: custom.texi.orig:161
msgid ""
"If you don't know exactly what groups or settings you want to customize, you "
"can search for them using the editable search field at the top of each "
"customization buffer.  Here, you can type in a search term---either one or "
"more words separated by spaces, or a regular expression (@pxref{Regexps}).  "
"Then type @key{RET} in the field, or activate the @samp{Search} button next "
"to it, to switch to a customization buffer containing groups and settings "
"that match those terms.  Note, however, that this feature only finds groups "
"and settings that are loaded in the current Emacs session."
msgstr ""

#. type: Plain text
#: custom.texi.orig:164
msgid ""
"If you don't want customization buffers to show the search field, change the "
"variable @code{custom-search-field} to @code{nil}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:168
msgid ""
"The command @kbd{M-x customize-apropos} is similar to using the search "
"field, except that it reads the search term(s) using the minibuffer.  "
"@xref{Specific Customization}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:180
msgid ""
"@kbd{M-x customize-browse} is another way to browse the available settings.  "
"This command creates a special customization buffer which shows only the "
"names of groups and settings, in a structured layout.  You can show the "
"contents of a group, in the same buffer, by invoking the @samp{[+]} button "
"next to the group name.  When the group contents are shown, the button "
"changes to @samp{[-]}; invoking that hides the group contents again.  Each "
"group or setting in this buffer has a link which says @samp{[Group]}, "
"@samp{[Option]} or @samp{[Face]}.  Invoking this link creates an ordinary "
"customization buffer showing just that group, option, or face; this is the "
"way to change settings that you find with @kbd{M-x customize-browse}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:186
msgid ""
"Here is an example of what a variable, or user option, looks like in the "
"customization buffer:"
msgstr ""

#. type: smallexample
#: custom.texi.orig:191
#, no-wrap
msgid ""
"[Hide] Kill Ring Max: 60\n"
"   [State]: STANDARD.\n"
"   Maximum length of kill ring before oldest elements are thrown away.\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:204
msgid ""
"The first line shows that the variable is named @code{kill-ring-max}, "
"formatted as @samp{Kill Ring Max} for easier viewing.  Its value is "
"@samp{60}.  The button labeled @samp{[Hide]}, if activated, hides the "
"variable's value and state; this is useful to avoid cluttering up the "
"customization buffer with very long values (for this reason, variables that "
"have very long values may start out hidden).  If you use the @samp{[Hide]} "
"button, it changes to @samp{[Show Value]}, which you can activate to reveal "
"the value and state.  On a graphical display, the @samp{[Hide]} and "
"@samp{[Show Value]} buttons are replaced with graphical triangles pointing "
"downwards and rightwards respectively."
msgstr ""

#. type: Plain text
#: custom.texi.orig:210
msgid ""
"The line after the variable name indicates the @dfn{customization state} of "
"the variable: in this example, @samp{STANDARD} means you have not changed "
"the variable, so its value is the default one.  The @samp{[State]} button "
"gives a menu of operations for customizing the variable."
msgstr ""

#. type: Plain text
#: custom.texi.orig:216
msgid ""
"Below the customization state is the documentation for the variable.  This "
"is the same documentation that would be shown by the @kbd{C-h v} command "
"(@pxref{Examining}).  If the documentation is more than one line long, only "
"one line may be shown.  If so, that line ends with a @samp{[More]} button; "
"activate this to see the full documentation."
msgstr ""

#. type: cindex
#: custom.texi.orig:217
#, no-wrap
msgid "user options, changing"
msgstr ""

#. type: cindex
#: custom.texi.orig:218
#, no-wrap
msgid "customizing variables"
msgstr ""

#. type: cindex
#: custom.texi.orig:219
#, no-wrap
msgid "variables, changing"
msgstr ""

#. type: Plain text
#: custom.texi.orig:224
msgid ""
"To enter a new value for @samp{Kill Ring Max}, just move point to the value "
"and edit it.  For example, type @kbd{M-d} to delete the @samp{60} and type "
"in another number.  As you begin to alter the text, the @samp{[State]} line "
"will change:"
msgstr ""

#. type: smallexample
#: custom.texi.orig:228
#, no-wrap
msgid ""
"[State]: EDITED, shown value does not take effect until you\n"
"         set or save it.\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:235
msgid ""
"Editing the value does not make it take effect right away.  To do that, you "
"must @dfn{set} the variable by activating the @samp{[State]} button and "
"choosing @samp{Set for Current Session}.  Then the variable's state becomes:"
msgstr ""

#. type: smallexample
#: custom.texi.orig:238
#, no-wrap
msgid "[State]: SET for current session only.\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:244
msgid ""
"You don't have to worry about specifying a value that is not valid; the "
"@samp{Set for Current Session} operation checks for validity and will not "
"install an unacceptable value."
msgstr ""

#. type: kindex
#: custom.texi.orig:245
#, no-wrap
msgid "M-TAB @r{(customization buffer)}"
msgstr ""

#. type: kindex
#: custom.texi.orig:246
#, no-wrap
msgid "C-M-i @r{(customization buffer)}"
msgstr ""

#. type: findex
#: custom.texi.orig:247
#, no-wrap
msgid "widget-complete"
msgstr ""

#. type: Plain text
#: custom.texi.orig:253
msgid ""
"While editing certain kinds of values, such as file names, directory names, "
"and Emacs command names, you can perform completion with @kbd{C-M-i} "
"(@code{widget-complete}), or the equivalent keys @kbd{M-@key{TAB}} or "
"@kbd{@key{ESC} @key{TAB}}.  This behaves much like minibuffer completion "
"(@pxref{Completion})."
msgstr ""

#. type: Plain text
#: custom.texi.orig:259
msgid ""
"Typing @key{RET} on an editable value field moves point forward to the next "
"field or button, like @key{TAB}.  You can thus type @key{RET} when you are "
"finished editing a field, to move on to the next button or field.  To insert "
"a newline within an editable field, use @kbd{C-o} or @kbd{C-q C-j}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:267
msgid ""
"For some variables, there is only a fixed set of legitimate values, and you "
"are not allowed to edit the value directly.  Instead, a @samp{[Value Menu]} "
"button appears before the value; activating this button presents a choice of "
"values.  For a boolean ``on or off'' value, the button says @samp{[Toggle]}, "
"and flips the value.  After using the @samp{[Value Menu]} or @samp{[Toggle]} "
"button, you must again set the variable to make the chosen value take "
"effect."
msgstr ""

#. type: Plain text
#: custom.texi.orig:271
msgid ""
"Some variables have values with complex structure.  For example, the value "
"of @code{minibuffer-frame-alist} is an association list.  Here is how it "
"appears in the customization buffer:"
msgstr ""

#. type: smallexample
#: custom.texi.orig:282
#, no-wrap
msgid ""
"[Hide] Minibuffer Frame Alist:\n"
"[INS] [DEL] Parameter: width\n"
"            Value: 80\n"
"[INS] [DEL] Parameter: height\n"
"            Value: 2\n"
"[INS]\n"
"   [ State ]: STANDARD.\n"
"   Alist of parameters for the initial minibuffer frame. [Hide]\n"
"   @r{[@dots{}more lines of documentation@dots{}]}\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:291
msgid ""
"In this case, each association in the list consists of two items, one "
"labeled @samp{Parameter} and one labeled @samp{Value}; both are editable "
"fields.  You can delete an association from the list with the @samp{[DEL]} "
"button next to it.  To add an association, use the @samp{[INS]} button at "
"the position where you want to insert it; the very last @samp{[INS]} button "
"inserts at the end of the list."
msgstr ""

#. type: cindex
#: custom.texi.orig:292
#, no-wrap
msgid "saving a setting"
msgstr ""

#. type: cindex
#: custom.texi.orig:293
#, no-wrap
msgid "settings, how to save"
msgstr ""

#. type: Plain text
#: custom.texi.orig:298
msgid ""
"When you set a variable, the new value takes effect only in the current "
"Emacs session.  To @dfn{save} the value for future sessions, use the "
"@samp{[State]} button and select the @samp{Save for Future Sessions} "
"operation.  @xref{Saving Customizations}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:302
msgid ""
"You can also restore the variable to its standard value by using the "
"@samp{[State]} button and selecting the @samp{Erase Customization} "
"operation.  There are actually four reset operations:"
msgstr ""

#. type: item
#: custom.texi.orig:304
#, no-wrap
msgid "Undo Edits"
msgstr ""

#. type: table
#: custom.texi.orig:307
msgid ""
"If you have modified but not yet set the variable, this restores the text in "
"the customization buffer to match the actual value."
msgstr ""

#. type: item
#: custom.texi.orig:308
#, no-wrap
msgid "Reset to Saved"
msgstr ""

#. type: table
#: custom.texi.orig:311
msgid ""
"This restores the value of the variable to the last saved value, and updates "
"the text accordingly."
msgstr ""

#. type: item
#: custom.texi.orig:312
#, no-wrap
msgid "Erase Customization"
msgstr ""

#. type: table
#: custom.texi.orig:315
msgid ""
"This sets the variable to its standard value.  Any saved value that you have "
"is also eliminated."
msgstr ""

#. type: item
#: custom.texi.orig:316
#, no-wrap
msgid "Set to Backup Value"
msgstr ""

#. type: table
#: custom.texi.orig:321
msgid ""
"This sets the variable to a previous value that was set in the customization "
"buffer in this session.  If you customize a variable and then reset it, "
"which discards the customized value, you can get the discarded value back "
"again with this operation."
msgstr ""

#. type: cindex
#: custom.texi.orig:323
#, no-wrap
msgid "comments on customized settings"
msgstr ""

#. type: Plain text
#: custom.texi.orig:327
msgid ""
"Sometimes it is useful to record a comment about a specific customization.  "
"Use the @samp{Add Comment} item from the @samp{[State]} menu to create a "
"field for entering the comment."
msgstr ""

#. type: Plain text
#: custom.texi.orig:329
msgid "Near the top of the customization buffer are two lines of buttons:"
msgstr ""

#. type: smallexample
#: custom.texi.orig:333
#, no-wrap
msgid ""
" [Set for Current Session] [Save for Future Sessions]\n"
" [Undo Edits] [Reset to Saved] [Erase Customization]   [Exit]\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:340
msgid ""
"Each of the first five buttons performs the stated operation---set, save, "
"reset, etc.---on all the settings in the buffer that could meaningfully be "
"affected.  They do not operate on settings that are hidden, nor on subgroups "
"that are hidden or not visible in the buffer."
msgstr ""

#. type: kindex
#: custom.texi.orig:341
#, no-wrap
msgid "C-c C-c @r{(customization buffer)}"
msgstr ""

#. type: kindex
#: custom.texi.orig:342
#, no-wrap
msgid "C-x C-c @r{(customization buffer)}"
msgstr ""

#. type: findex
#: custom.texi.orig:343
#, no-wrap
msgid "Custom-set"
msgstr ""

#. type: findex
#: custom.texi.orig:344
#, no-wrap
msgid "Custom-save"
msgstr ""

#. type: Plain text
#: custom.texi.orig:349
msgid ""
"The command @kbd{C-c C-c} (@code{Custom-set}) is equivalent to using the "
"@samp{[Set for Current Session]} button.  The command @kbd{C-x C-s} "
"(@code{Custom-save}) is like using the @samp{[Save for Future Sessions]} "
"button."
msgstr ""

#. type: vindex
#: custom.texi.orig:350
#, no-wrap
msgid "custom-buffer-done-kill"
msgstr ""

#. type: Plain text
#: custom.texi.orig:355
msgid ""
"The @samp{[Exit]} button switches out of the customization buffer, and "
"buries the buffer at the bottom of the buffer list.  To make it kill the "
"customization buffer instead, change the variable "
"@code{custom-buffer-done-kill} to @code{t}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:364
msgid ""
"In the customization buffer, you can @dfn{save} a customization setting by "
"choosing the @samp{Save for Future Sessions} choice from its @samp{[State]} "
"button.  The @kbd{C-x C-s} (@code{Custom-save})  command, or the @samp{[Save "
"for Future Sessions]} button at the top of the customization buffer, saves "
"all applicable settings in the buffer."
msgstr ""

#. type: Plain text
#: custom.texi.orig:368
msgid ""
"Saving works by writing code to a file, usually your initialization file "
"(@pxref{Init File}).  Future Emacs sessions automatically read this file at "
"startup, which sets up the customizations again."
msgstr ""

#. type: vindex
#: custom.texi.orig:369
#, no-wrap
msgid "custom-file"
msgstr ""

#. type: Plain text
#: custom.texi.orig:375
msgid ""
"You can choose to save customizations somewhere other than your "
"initialization file.  To make this work, you must add a couple of lines of "
"code to your initialization file, to set the variable @code{custom-file} to "
"the name of the desired file, and to load that file.  For example:"
msgstr ""

#. type: example
#: custom.texi.orig:379
#, no-wrap
msgid ""
"(setq custom-file \"~/.emacs-custom.el\")\n"
"(load custom-file)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:383
msgid ""
"You can even specify different customization files for different Emacs "
"versions, like this:"
msgstr ""

#. type: example
#: custom.texi.orig:395
#, no-wrap
msgid ""
"(cond ((< emacs-major-version 22)\n"
"       ;; @r{Emacs 21 customization.}\n"
"       (setq custom-file \"~/.custom-21.el\"))\n"
"      ((and (= emacs-major-version 22)\n"
"            (< emacs-minor-version 3))\n"
"       ;; @r{Emacs 22 customization, before version 22.3.}\n"
"       (setq custom-file \"~/.custom-22.el\"))\n"
"      (t\n"
"       ;; @r{Emacs version 22.3 or later.}\n"
"       (setq custom-file \"~/.emacs-custom.el\")))\n"
"\n"
msgstr ""

#. type: example
#: custom.texi.orig:397
#, no-wrap
msgid "(load custom-file)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:404
msgid ""
"If Emacs was invoked with the @option{-q} or @option{--no-init-file} options "
"(@pxref{Initial Options}), it will not let you save your customizations in "
"your initialization file.  This is because saving customizations from such a "
"session would wipe out all the other customizations you might have on your "
"initialization file."
msgstr ""

#. type: subsection
#: custom.texi.orig:406
#, no-wrap
msgid "Customizing Faces"
msgstr ""

#. type: cindex
#: custom.texi.orig:407
#, no-wrap
msgid "customizing faces"
msgstr ""

#. type: cindex
#: custom.texi.orig:408
#, no-wrap
msgid "faces, customizing"
msgstr ""

#. type: cindex
#: custom.texi.orig:409
#, no-wrap
msgid "fonts and faces"
msgstr ""

#. type: Plain text
#: custom.texi.orig:414
msgid ""
"You can customize faces (@pxref{Faces}), which determine how Emacs displays "
"different types of text.  Customization groups can contain both variables "
"and faces."
msgstr ""

#. type: Plain text
#: custom.texi.orig:418
msgid ""
"For example, in programming language modes, source code comments are shown "
"with @code{font-lock-comment-face} (@pxref{Font Lock}).  In a customization "
"buffer, that face appears like this:"
msgstr ""

#. type: smallexample
#: custom.texi.orig:439
#, no-wrap
msgid ""
"[Hide] Font Lock Comment Face:[sample]\n"
"   [State] : STANDARD.\n"
"   Font Lock mode face used to highlight comments.\n"
"   [ ] Font Family: --\n"
"   [ ] Font Foundry: --\n"
"   [ ] Width: --\n"
"   [ ] Height: --\n"
"   [ ] Weight: --\n"
"   [ ] Slant: --\n"
"   [ ] Underline: --\n"
"   [ ] Overline: --\n"
"   [ ] Strike-through: --\n"
"   [ ] Box around text: --\n"
"   [ ] Inverse-video: --\n"
"   [X] Foreground: Firebrick     [Choose]  (sample)\n"
"   [ ] Background: --\n"
"   [ ] Stipple: --\n"
"   [ ] Inherit: --\n"
"   [Hide Unused Attributes]\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:449
msgid ""
"The first three lines show the name, @samp{[State]} button, and "
"documentation for the face.  Below that is a list of @dfn{face attributes}.  "
"In front of each attribute is a checkbox.  A filled checkbox, @samp{[X]}, "
"means that the face specifies a value for this attribute; an empty checkbox, "
"@samp{[ ]}, means that the face does not specify any special value for the "
"attribute.  You can activate a checkbox to specify or unspecify its "
"attribute."
msgstr ""

#. type: Plain text
#: custom.texi.orig:458
msgid ""
"A face does not have to specify every single attribute; in fact, most faces "
"only specify a few attributes.  In the above example, "
"@code{font-lock-comment-face} only specifies the foreground color.  Any "
"unspecified attribute is taken from the special face named @code{default}, "
"whose attributes are all specified.  The @code{default} face is the face "
"used to display any text that does not have an explicitly-assigned face; "
"furthermore, its background color attribute serves as the background color "
"of the frame."
msgstr ""

#. type: Plain text
#: custom.texi.orig:465
msgid ""
"The @samp{Hide Unused Attributes} button, at the end of the attribute list, "
"hides the unspecified attributes of the face.  When attributes are being "
"hidden, the button changes to @samp{[Show All Attributes]}, which reveals "
"the entire attribute list.  The customization buffer may start out with "
"unspecified attributes hidden, to avoid cluttering the interface."
msgstr ""

#. type: Plain text
#: custom.texi.orig:468
msgid "When an attribute is specified, you can change its value in the usual ways."
msgstr ""

#. type: Plain text
#: custom.texi.orig:474
msgid ""
"Foreground and background colors can be specified using either color names "
"or RGB triplets (@pxref{Colors}).  You can also use the @samp{[Choose]} "
"button to switch to a list of color names; select a color with @key{RET} in "
"that buffer to put the color name in the value field."
msgstr ""

#. type: Plain text
#: custom.texi.orig:477
msgid ""
"Setting, saving and resetting a face work like the same operations for "
"variables (@pxref{Changing a Variable})."
msgstr ""

#. type: Plain text
#: custom.texi.orig:483
msgid ""
"A face can specify different appearances for different types of displays.  "
"For example, a face can make text red on a color display, but use a bold "
"font on a monochrome display.  To specify multiple appearances for a face, "
"select @samp{For All Kinds of Displays} in the menu you get from invoking "
"@samp{[State]}."
msgstr ""

#. type: subsection
#: custom.texi.orig:485
#, no-wrap
msgid "Customizing Specific Items"
msgstr ""

#. type: item
#: custom.texi.orig:488
#, no-wrap
msgid "M-x customize-option @key{RET} @var{option} @key{RET}"
msgstr ""

#. type: itemx
#: custom.texi.orig:489
#, no-wrap
msgid "M-x customize-variable @key{RET} @var{option} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:491
msgid "Set up a customization buffer for just one user option, @var{option}."
msgstr ""

#. type: item
#: custom.texi.orig:491
#, no-wrap
msgid "M-x customize-face @key{RET} @var{face} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:493
msgid "Set up a customization buffer for just one face, @var{face}."
msgstr ""

#. type: item
#: custom.texi.orig:493
#, no-wrap
msgid "M-x customize-group @key{RET} @var{group} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:495
msgid "Set up a customization buffer for just one group, @var{group}."
msgstr ""

#. type: item
#: custom.texi.orig:495
#, no-wrap
msgid "M-x customize-apropos @key{RET} @var{regexp} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:498
msgid ""
"Set up a customization buffer for all the settings and groups that match "
"@var{regexp}."
msgstr ""

#. type: item
#: custom.texi.orig:498
#, no-wrap
msgid "M-x customize-changed @key{RET} @var{version} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:501
msgid ""
"Set up a customization buffer with all the settings and groups whose meaning "
"has changed since Emacs version @var{version}."
msgstr ""

#. type: item
#: custom.texi.orig:501
#, no-wrap
msgid "M-x customize-saved"
msgstr ""

#. type: table
#: custom.texi.orig:504
msgid ""
"Set up a customization buffer containing all settings that you have saved "
"with customization buffers."
msgstr ""

#. type: item
#: custom.texi.orig:504
#, no-wrap
msgid "M-x customize-unsaved"
msgstr ""

#. type: table
#: custom.texi.orig:507
msgid ""
"Set up a customization buffer containing all settings that you have set but "
"not saved."
msgstr ""

#. type: findex
#: custom.texi.orig:509
#, no-wrap
msgid "customize-option"
msgstr ""

#. type: Plain text
#: custom.texi.orig:515
msgid ""
"If you want to customize a particular user option, type @kbd{M-x "
"customize-option}.  This reads the variable name, and sets up the "
"customization buffer with just that one user option.  When entering the "
"variable name into the minibuffer, completion is available, but only for the "
"names of variables that have been loaded into Emacs."
msgstr ""

#. type: findex
#: custom.texi.orig:516
#, no-wrap
msgid "customize-face"
msgstr ""

#. type: findex
#: custom.texi.orig:517
#, no-wrap
msgid "customize-group"
msgstr ""

#. type: Plain text
#: custom.texi.orig:521
msgid ""
"Likewise, you can customize a specific face using @kbd{M-x customize-face}.  "
"You can set up a customization buffer for a specific customization group "
"using @kbd{M-x customize-group}."
msgstr ""

#. type: findex
#: custom.texi.orig:522
#, no-wrap
msgid "customize-apropos"
msgstr ""

#. type: Plain text
#: custom.texi.orig:528
msgid ""
"@kbd{M-x customize-apropos} prompts for a search term---either one or more "
"words separated by spaces, or a regular expression---and sets up a "
"customization buffer for all @emph{loaded} settings and groups with matching "
"names.  This is like using the search field at the top of the customization "
"buffer (@pxref{Customization Groups})."
msgstr ""

#. type: findex
#: custom.texi.orig:529
#, no-wrap
msgid "customize-changed"
msgstr ""

#. type: Plain text
#: custom.texi.orig:537
msgid ""
"When you upgrade to a new Emacs version, you might want to consider "
"customizing new settings, and settings whose meanings or default values have "
"changed.  To do this, use @kbd{M-x customize-changed} and specify a previous "
"Emacs version number using the minibuffer.  It creates a customization "
"buffer which shows all the settings and groups whose definitions have been "
"changed since the specified version, loading them if necessary."
msgstr ""

#. type: findex
#: custom.texi.orig:538
#, no-wrap
msgid "customize-saved"
msgstr ""

#. type: findex
#: custom.texi.orig:539
#, no-wrap
msgid "customize-unsaved"
msgstr ""

#. type: Plain text
#: custom.texi.orig:545
msgid ""
"If you change settings and then decide the change was a mistake, you can use "
"two commands to revisit your changes.  Use @kbd{M-x customize-saved} to "
"customize settings that you have saved.  Use @kbd{M-x customize-unsaved} to "
"customize settings that you have set but not saved."
msgstr ""

#. type: cindex
#: custom.texi.orig:548
#, no-wrap
msgid "custom themes"
msgstr ""

#. type: Plain text
#: custom.texi.orig:554
msgid ""
"@dfn{Custom themes} are collections of settings that can be enabled or "
"disabled as a unit.  You can use Custom themes to switch easily between "
"various collections of settings, and to transfer such collections from one "
"computer to another."
msgstr ""

#. type: Plain text
#: custom.texi.orig:559
msgid ""
"A Custom theme is stored as an Emacs Lisp source file.  If the name of the "
"Custom theme is @var{name}, the theme file is named "
"@file{@var{name}-theme.el}.  @xref{Creating Custom Themes}, for the format "
"of a theme file and how to make one."
msgstr ""

#. type: findex
#: custom.texi.orig:560
#, no-wrap
msgid "customize-themes"
msgstr ""

#. type: vindex
#: custom.texi.orig:561 custom.texi.orig:669
#, no-wrap
msgid "custom-theme-directory"
msgstr ""

#. type: cindex
#: custom.texi.orig:562
#, no-wrap
msgid "color scheme"
msgstr ""

#. type: Plain text
#: custom.texi.orig:574
msgid ""
"Type @kbd{M-x customize-themes} to switch to a buffer named @file{*Custom "
"Themes*}, which lists the Custom themes that Emacs knows about.  By default, "
"Emacs looks for theme files in two locations: the directory specified by the "
"variable @code{custom-theme-directory} (which defaults to "
"@file{~/.emacs.d/}), and a directory named @file{etc/themes} in your Emacs "
"installation (see the variable @code{data-directory}).  The latter contains "
"several Custom themes which are distributed with Emacs, which customize "
"Emacs's faces to fit various color schemes.  (Note, however, that Custom "
"themes need not be restricted to this purpose; they can be used to customize "
"variables too.)"
msgstr ""

#. type: vindex
#: custom.texi.orig:575
#, no-wrap
msgid "custom-theme-load-path"
msgstr ""

#. type: Plain text
#: custom.texi.orig:585
msgid ""
"If you want Emacs to look for Custom themes in some other directory, add the "
"directory name to the list variable @code{custom-theme-load-path}.  Its "
"default value is @code{(custom-theme-directory t)}; here, the symbol "
"@code{custom-theme-directory} has the special meaning of the value of the "
"variable @code{custom-theme-directory}, while @code{t} stands for the "
"built-in theme directory @file{etc/themes}.  The themes listed in the "
"@file{*Custom Themes*} buffer are those found in the directories specified "
"by @code{custom-theme-load-path}."
msgstr ""

#. type: kindex
#: custom.texi.orig:586
#, no-wrap
msgid "C-x C-s @r{(Custom Themes buffer)}"
msgstr ""

#. type: Plain text
#: custom.texi.orig:594
msgid ""
"In the @file{*Custom Themes*} buffer, you can activate the checkbox next to "
"a Custom theme to enable or disable the theme for the current Emacs "
"session.  When a Custom theme is enabled, all of its settings (variables and "
"faces) take effect in the Emacs session.  To apply the choice of theme(s) to "
"future Emacs sessions, type @kbd{C-x C-s} (@code{custom-theme-save}) or use "
"the @samp{[Save Theme Settings]} button."
msgstr ""

#. type: vindex
#: custom.texi.orig:595
#, no-wrap
msgid "custom-safe-themes"
msgstr ""

#. type: Plain text
#: custom.texi.orig:606
msgid ""
"When you first enable a Custom theme, Emacs displays the contents of the "
"theme file and asks if you really want to load it.  Because loading a Custom "
"theme can execute arbitrary Lisp code, you should only say yes if you know "
"that the theme is safe; in that case, Emacs offers to remember in the future "
"that the theme is safe (this is done by saving the theme file's SHA-256 hash "
"to the variable @code{custom-safe-themes}; if you want to treat all themes "
"as safe, change its value to @code{t}).  Themes that come with Emacs (in the "
"@file{etc/themes} directory) are exempt from this check, and are always "
"considered safe."
msgstr ""

#. type: vindex
#: custom.texi.orig:607
#, no-wrap
msgid "custom-enabled-themes"
msgstr ""

#. type: Plain text
#: custom.texi.orig:616
msgid ""
"Setting or saving Custom themes actually works by customizing the variable "
"@code{custom-enabled-themes}.  The value of this variable is a list of "
"Custom theme names (as Lisp symbols, e.g., @code{tango}).  Instead of using "
"the @file{*Custom Themes*} buffer to set @code{custom-enabled-themes}, you "
"can customize the variable using the usual customization interface, e.g., "
"with @kbd{M-x customize-option}.  Note that Custom themes are not allowed to "
"set @code{custom-enabled-themes} themselves."
msgstr ""

#. type: Plain text
#: custom.texi.orig:625
msgid ""
"Any customizations that you make through the customization buffer take "
"precedence over theme settings.  This lets you easily override individual "
"theme settings that you disagree with.  If settings from two different "
"themes overlap, the theme occurring earlier in @code{custom-enabled-themes} "
"takes precedence.  In the customization buffer, if a setting has been "
"changed from its default by a Custom theme, its @samp{State} display shows "
"@samp{THEMED} instead of @samp{STANDARD}."
msgstr ""

#. type: findex
#: custom.texi.orig:626
#, no-wrap
msgid "load-theme"
msgstr ""

#. type: findex
#: custom.texi.orig:627
#, no-wrap
msgid "enable-theme"
msgstr ""

#. type: findex
#: custom.texi.orig:628
#, no-wrap
msgid "disable-theme"
msgstr ""

#. type: Plain text
#: custom.texi.orig:635
msgid ""
"You can enable a specific Custom theme in the current Emacs session by "
"typing @kbd{M-x load-theme}.  This prompts for a theme name, loads the theme "
"from the theme file, and enables it.  If a theme file has been loaded "
"before, you can enable the theme without loading its file by typing @kbd{M-x "
"enable-theme}.  To disable a Custom theme, type @kbd{M-x disable-theme}."
msgstr ""

#. type: findex
#: custom.texi.orig:636
#, no-wrap
msgid "describe-theme"
msgstr ""

#. type: Plain text
#: custom.texi.orig:640
msgid ""
"To see a description of a Custom theme, type @kbd{?} on its line in the "
"@file{*Custom Themes*} buffer; or type @kbd{M-x describe-theme} anywhere in "
"Emacs and enter the theme name."
msgstr ""

#. type: cindex
#: custom.texi.orig:643
#, no-wrap
msgid "custom themes, creating"
msgstr ""

#. type: findex
#: custom.texi.orig:645
#, no-wrap
msgid "customize-create-theme"
msgstr ""

#. type: Plain text
#: custom.texi.orig:652
msgid ""
"You can define a Custom theme using an interface similar to the "
"customization buffer, by typing @kbd{M-x customize-create-theme}.  This "
"switches to a buffer named @file{*Custom Theme*}.  It also offers to insert "
"some common Emacs faces into the theme (a convenience, since Custom themes "
"are often used to customize faces).  If you answer no, the theme will "
"initially contain no settings."
msgstr ""

#. type: Plain text
#: custom.texi.orig:660
msgid ""
"Near the top of the @file{*Custom Theme*} buffer are editable fields where "
"you can enter the theme's name and description.  The name can be anything "
"except @samp{user}.  The description is the one that will be shown when you "
"invoke @kbd{M-x describe-theme} for the theme.  Its first line should be a "
"brief one-sentence summary; in the buffer made by @kbd{M-x "
"customize-themes}, this sentence is displayed next to the theme name."
msgstr ""

#. type: Plain text
#: custom.texi.orig:668
msgid ""
"To add a new setting to the theme, use the @samp{[Insert Additional Face]} "
"or @samp{[Insert Additional Variable]} buttons.  Each button reads a face or "
"variable name using the minibuffer, with completion, and inserts a "
"customization entry for the face or variable.  You can edit the variable "
"values or face attributes in the same way as in a normal customization "
"buffer.  To remove a face or variable from the theme, uncheck the checkbox "
"next to its name."
msgstr ""

#. type: Plain text
#: custom.texi.orig:675
msgid ""
"After specifying the Custom theme's faces and variables, type @kbd{C-x C-s} "
"(@code{custom-theme-write}) or use the buffer's @samp{[Save Theme]} button.  "
"This saves the theme file, named @file{@var{name}-theme.el} where @var{name} "
"is the theme name, in the directory named by @code{custom-theme-directory}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:683
msgid ""
"From the @file{*Custom Theme*} buffer, you can view and edit an existing "
"Custom theme by activating the @samp{[Visit Theme]} button and specifying "
"the theme name.  You can also add the settings of another theme into the "
"buffer, using the @samp{[Merge Theme]} button.  You can import your "
"non-theme settings into a Custom theme by using the @samp{[Merge Theme]} "
"button and specifying the special theme named @samp{user}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:689
msgid ""
"A theme file is simply an Emacs Lisp source file, and loading the Custom "
"theme works by loading the Lisp file.  Therefore, you can edit a theme file "
"directly instead of using the @file{*Custom Theme*} buffer.  @xref{Custom "
"Themes,,, elisp, The Emacs Lisp Reference Manual}, for details."
msgstr ""

#. type: cindex
#: custom.texi.orig:692
#, no-wrap
msgid "variable"
msgstr ""

#. type: Plain text
#: custom.texi.orig:698
msgid ""
"A @dfn{variable} is a Lisp symbol which has a value.  The symbol's name is "
"also called the @dfn{variable name}.  A variable name can contain any "
"characters that can appear in a file, but most variable names consist of "
"ordinary words separated by hyphens."
msgstr ""

#. type: Plain text
#: custom.texi.orig:705
msgid ""
"The name of the variable serves as a compact description of its role.  Most "
"variables also have a @dfn{documentation string}, which describes what the "
"variable's purpose is, what kind of value it should have, and how the value "
"will be used.  You can view this documentation using the help command "
"@kbd{C-h v} (@code{describe-variable}).  @xref{Examining}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:712
msgid ""
"Emacs uses many Lisp variables for internal record keeping, but the most "
"interesting variables for a non-programmer user are those meant for users to "
"change---these are called @dfn{customizable variables} or @dfn{user options} "
"(@pxref{Easy Customization}).  In the following sections, we will describe "
"other aspects of Emacs variables, such as how to set them outside Customize."
msgstr ""

#. type: Plain text
#: custom.texi.orig:731
msgid ""
"Emacs Lisp allows any variable (with a few exceptions) to have any kind of "
"value.  However, many variables are meaningful only if assigned values of a "
"certain type.  For example, only numbers are meaningful values for "
"@code{kill-ring-max}, which specifies the maximum length of the kill ring "
"(@pxref{Earlier Kills}); if you give @code{kill-ring-max} a string value, "
"commands such as @kbd{C-y} (@code{yank}) will signal an error.  On the other "
"hand, some variables don't care about type; for instance, if a variable has "
"one effect for @code{nil} values and another effect for ``non-@code{nil}'' "
"values, then any value that is not the symbol @code{nil} induces the second "
"effect, regardless of its type (by convention, we usually use the value "
"@code{t}---a symbol which stands for ``true''---to specify a non-@code{nil} "
"value).  If you set a variable using the customization buffer, you need not "
"worry about giving it an invalid type: the customization buffer usually only "
"allows you to enter meaningful values.  When in doubt, use @kbd{C-h v} "
"(@code{describe-variable}) to check the variable's documentation string to "
"see kind of value it expects (@pxref{Examining})."
msgstr ""

#. type: node
#: custom.texi.orig:739 custom.texi.orig:741
#, no-wrap
msgid "Examining"
msgstr ""

#. type: menuentry
#: custom.texi.orig:739
msgid "Examining or setting one variable's value."
msgstr ""

#. type: subsection
#: custom.texi.orig:739 custom.texi.orig:817 custom.texi.orig:818
#, no-wrap
msgid "Hooks"
msgstr ""

#. type: menuentry
#: custom.texi.orig:739
msgid ""
"Hook variables let you specify programs for parts of Emacs to run on "
"particular occasions."
msgstr ""

#. type: node
#: custom.texi.orig:739 custom.texi.orig:935
#, no-wrap
msgid "Locals"
msgstr ""

#. type: menuentry
#: custom.texi.orig:739
msgid "Per-buffer values of variables."
msgstr ""

#. type: node
#: custom.texi.orig:739 custom.texi.orig:1021
#, no-wrap
msgid "File Variables"
msgstr ""

#. type: menuentry
#: custom.texi.orig:739
msgid "How files can specify variable values."
msgstr ""

#. type: node
#: custom.texi.orig:739 custom.texi.orig:1266
#, no-wrap
msgid "Directory Variables"
msgstr ""

#. type: menuentry
#: custom.texi.orig:739
msgid "How variable values can be specified by directory."
msgstr ""

#. type: subsection
#: custom.texi.orig:742
#, no-wrap
msgid "Examining and Setting Variables"
msgstr ""

#. type: cindex
#: custom.texi.orig:743
#, no-wrap
msgid "setting variables"
msgstr ""

#. type: item
#: custom.texi.orig:746
#, no-wrap
msgid "C-h v @var{var} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:749
msgid ""
"Display the value and documentation of variable @var{var} "
"(@code{describe-variable})."
msgstr ""

#. type: item
#: custom.texi.orig:749
#, no-wrap
msgid "M-x set-variable @key{RET} @var{var} @key{RET} @var{value} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:751
msgid "Change the value of variable @var{var} to @var{value}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:757
msgid ""
"To examine the value of a variable, use @kbd{C-h v} "
"(@code{describe-variable}).  This reads a variable name using the "
"minibuffer, with completion, and displays both the value and the "
"documentation of the variable.  For example,"
msgstr ""

#. type: example
#: custom.texi.orig:760
#, no-wrap
msgid "C-h v fill-column @key{RET}\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:764
msgid "displays something like this:"
msgstr ""

#. type: example
#: custom.texi.orig:768
#, no-wrap
msgid ""
"fill-column is a variable defined in `C source code'.\n"
"fill-column's value is 70\n"
"\n"
msgstr ""

#. type: example
#: custom.texi.orig:772
#, no-wrap
msgid ""
"Automatically becomes buffer-local when set.\n"
"This variable is safe as a file local variable if its value\n"
"satisfies the predicate `integerp'.\n"
"\n"
msgstr ""

#. type: example
#: custom.texi.orig:776
#, no-wrap
msgid ""
"Documentation:\n"
"Column beyond which automatic line-wrapping should happen.\n"
"Interactively, you can set the local value with C-x f.\n"
"\n"
msgstr ""

#. type: example
#: custom.texi.orig:778
#, no-wrap
msgid "You can customize this variable.\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:784
msgid ""
"The line that says ``You can customize the variable'' indicates that this "
"variable is a user option.  @kbd{C-h v} is not restricted to user options; "
"it allows non-customizable variables too."
msgstr ""

#. type: findex
#: custom.texi.orig:785
#, no-wrap
msgid "set-variable"
msgstr ""

#. type: Plain text
#: custom.texi.orig:791
msgid ""
"The most convenient way to set a specific customizable variable is with "
"@kbd{M-x set-variable}.  This reads the variable name with the minibuffer "
"(with completion), and then reads a Lisp expression for the new value using "
"the minibuffer a second time (you can insert the old value into the "
"minibuffer for editing via @kbd{M-n}).  For example,"
msgstr ""

#. type: example
#: custom.texi.orig:794
#, no-wrap
msgid "M-x set-variable @key{RET} fill-column @key{RET} 75 @key{RET}\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:798
msgid "sets @code{fill-column} to 75."
msgstr ""

#. type: Plain text
#: custom.texi.orig:801
msgid ""
"@kbd{M-x set-variable} is limited to customizable variables, but you can set "
"any variable with a Lisp expression like this:"
msgstr ""

#. type: example
#: custom.texi.orig:804
#, no-wrap
msgid "(setq fill-column 75)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:811
msgid ""
"To execute such an expression, type @kbd{M-:} (@code{eval-expression})  and "
"enter the expression in the minibuffer (@pxref{Lisp Eval}).  Alternatively, "
"go to the @file{*scratch*} buffer, type in the expression, and then type "
"@kbd{C-j} (@pxref{Lisp Interaction})."
msgstr ""

#. type: Plain text
#: custom.texi.orig:816
msgid ""
"Setting variables, like all means of customizing Emacs except where "
"otherwise stated, affects only the current Emacs session.  The only way to "
"alter the variable in future sessions is to put something in your "
"initialization file (@pxref{Init File})."
msgstr ""

#. type: cindex
#: custom.texi.orig:819
#, no-wrap
msgid "hook"
msgstr ""

#. type: cindex
#: custom.texi.orig:820
#, no-wrap
msgid "running a hook"
msgstr ""

#. type: Plain text
#: custom.texi.orig:828
msgid ""
"@dfn{Hooks} are an important mechanism for customizing Emacs.  A hook is a "
"Lisp variable which holds a list of functions, to be called on some "
"well-defined occasion.  (This is called @dfn{running the hook}.)  The "
"individual functions in the list are called the @dfn{hook functions} of the "
"hook.  For example, the hook @code{kill-emacs-hook} runs just before exiting "
"Emacs (@pxref{Exiting})."
msgstr ""

#. type: cindex
#: custom.texi.orig:829
#, no-wrap
msgid "normal hook"
msgstr ""

#. type: Plain text
#: custom.texi.orig:835
msgid ""
"Most hooks are @dfn{normal hooks}.  This means that when Emacs runs the "
"hook, it calls each hook function in turn, with no arguments.  We have made "
"an effort to keep most hooks normal, so that you can use them in a uniform "
"way.  Every variable whose name ends in @samp{-hook} is a normal hook."
msgstr ""

#. type: cindex
#: custom.texi.orig:836
#, no-wrap
msgid "abnormal hook"
msgstr ""

#. type: Plain text
#: custom.texi.orig:847
msgid ""
"A few hooks are @dfn{abnormal hooks}.  Their names end in @samp{-functions}, "
"instead of @samp{-hook} (some old code may also use the deprecated suffix "
"@samp{-hooks}).  What makes these hooks abnormal is the way its functions "
"are called---perhaps they are given arguments, or perhaps the values they "
"return are used in some way.  For example, "
"@code{find-file-not-found-functions} is abnormal because as soon as one hook "
"function returns a non-@code{nil} value, the rest are not called at all "
"(@pxref{Visiting}).  The documentation of each abnormal hook variable "
"explains how its functions are used."
msgstr ""

#. type: findex
#: custom.texi.orig:848
#, no-wrap
msgid "add-hook"
msgstr ""

#. type: Plain text
#: custom.texi.orig:854
msgid ""
"You can set a hook variable with @code{setq} like any other Lisp variable, "
"but the recommended way to add a function to a hook (either normal or "
"abnormal) is to use @code{add-hook}, as shown by the following examples.  "
"@xref{Hooks,,, elisp, The Emacs Lisp Reference Manual}, for details."
msgstr ""

#. type: Plain text
#: custom.texi.orig:860
msgid ""
"Most major modes run one or more @dfn{mode hooks} as the last step of "
"initialization.  Mode hooks are a convenient way to customize the behavior "
"of individual modes; they are always normal.  For example, here's how to set "
"up a hook to turn on Auto Fill mode in Text mode and other modes based on "
"Text mode:"
msgstr ""

#. type: example
#: custom.texi.orig:863 custom.texi.orig:2305
#, no-wrap
msgid "(add-hook 'text-mode-hook 'auto-fill-mode)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:871
msgid ""
"This works by calling @code{auto-fill-mode}, which enables the minor mode "
"when no argument is supplied (@pxref{Minor Modes}).  Next, suppose you don't "
"want Auto Fill mode turned on in @LaTeX{} mode, which is one of the modes "
"based on Text mode.  You can do this with the following additional line:"
msgstr ""

#. type: example
#: custom.texi.orig:874
#, no-wrap
msgid "(add-hook 'latex-mode-hook (lambda () (auto-fill-mode -1)))\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:883
msgid ""
"Here we have used the special macro @code{lambda} to construct an anonymous "
"function (@pxref{Lambda Expressions,,, elisp, The Emacs Lisp Reference "
"Manual}), which calls @code{auto-fill-mode} with an argument of @code{-1} to "
"disable the minor mode.  Because @LaTeX{} mode runs @code{latex-mode-hook} "
"after running @code{text-mode-hook}, the result leaves Auto Fill mode "
"disabled."
msgstr ""

#. type: Plain text
#: custom.texi.orig:886
msgid ""
"Here is a more complex example, showing how to use a hook to customize the "
"indentation of C code:"
msgstr ""

#. type: group
#: custom.texi.orig:891
#, no-wrap
msgid ""
"(setq my-c-style\n"
"  '((c-comment-only-line-offset . 4)\n"
msgstr ""

#. type: group
#: custom.texi.orig:896
#, no-wrap
msgid ""
"    (c-cleanup-list . (scope-operator\n"
"                       empty-defun-braces\n"
"                       defun-close-semi))))\n"
msgstr ""

#. type: group
#: custom.texi.orig:901
#, no-wrap
msgid ""
"(add-hook 'c-mode-common-hook\n"
"  (lambda () (c-add-style \"my-style\" my-c-style t)))\n"
msgstr ""

#. type: cindex
#: custom.texi.orig:904
#, no-wrap
msgid "Prog mode"
msgstr ""

#. type: cindex
#: custom.texi.orig:905
#, no-wrap
msgid "program editing"
msgstr ""

#. type: Plain text
#: custom.texi.orig:916
msgid ""
"Major mode hooks also apply to other major modes @dfn{derived} from the "
"original mode (@pxref{Derived Modes,,, elisp, The Emacs Lisp Reference "
"Manual}).  For instance, HTML mode is derived from Text mode (@pxref{HTML "
"Mode}); when HTML mode is enabled, it runs @code{text-mode-hook} before "
"running @code{html-mode-hook}.  This provides a convenient way to use a "
"single hook to affect several related modes.  In particular, if you want to "
"apply a hook function to any programming language mode, add it to "
"@code{prog-mode-hook}; Prog mode is a major mode that does little else than "
"to let other major modes inherit from it, exactly for this purpose."
msgstr ""

#. type: Plain text
#: custom.texi.orig:921
msgid ""
"It is best to design your hook functions so that the order in which they are "
"executed does not matter.  Any dependence on the order is asking for "
"trouble.  However, the order is predictable: the hook functions are executed "
"in the order they appear in the hook."
msgstr ""

#. type: findex
#: custom.texi.orig:922
#, no-wrap
msgid "remove-hook"
msgstr ""

#. type: Plain text
#: custom.texi.orig:928
msgid ""
"If you play with adding various different versions of a hook function by "
"calling @code{add-hook} over and over, remember that all the versions you "
"added will remain in the hook variable together.  You can clear out "
"individual functions by calling @code{remove-hook}, or do @code{(setq "
"@var{hook-variable} nil)} to remove everything."
msgstr ""

#. type: cindex
#: custom.texi.orig:929
#, no-wrap
msgid "buffer-local hooks"
msgstr ""

#. type: Plain text
#: custom.texi.orig:934
msgid ""
"If the hook variable is buffer-local, the buffer-local variable will be used "
"instead of the global variable.  However, if the buffer-local variable "
"contains the element @code{t}, the global hook variable will be run as well."
msgstr ""

#. type: subsection
#: custom.texi.orig:936
#, no-wrap
msgid "Local Variables"
msgstr ""

#. type: item
#: custom.texi.orig:939
#, no-wrap
msgid "M-x make-local-variable @key{RET} @var{var} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:941
msgid "Make variable @var{var} have a local value in the current buffer."
msgstr ""

#. type: item
#: custom.texi.orig:941
#, no-wrap
msgid "M-x kill-local-variable @key{RET} @var{var} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:943
msgid "Make variable @var{var} use its global value in the current buffer."
msgstr ""

#. type: item
#: custom.texi.orig:943
#, no-wrap
msgid "M-x make-variable-buffer-local @key{RET} @var{var} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:946
msgid ""
"Mark variable @var{var} so that setting it will make it local to the buffer "
"that is current at that time."
msgstr ""

#. type: cindex
#: custom.texi.orig:948
#, no-wrap
msgid "local variables"
msgstr ""

#. type: Plain text
#: custom.texi.orig:954
msgid ""
"Almost any variable can be made @dfn{local} to a specific Emacs buffer.  "
"This means that its value in that buffer is independent of its value in "
"other buffers.  A few variables are always local in every buffer.  Every "
"other Emacs variable has a @dfn{global} value which is in effect in all "
"buffers that have not made the variable local."
msgstr ""

#. type: findex
#: custom.texi.orig:955
#, no-wrap
msgid "make-local-variable"
msgstr ""

#. type: Plain text
#: custom.texi.orig:960
msgid ""
"@kbd{M-x make-local-variable} reads the name of a variable and makes it "
"local to the current buffer.  Changing its value subsequently in this buffer "
"will not affect others, and changes in its global value will not affect this "
"buffer."
msgstr ""

#. type: findex
#: custom.texi.orig:961
#, no-wrap
msgid "make-variable-buffer-local"
msgstr ""

#. type: cindex
#: custom.texi.orig:962
#, no-wrap
msgid "per-buffer variables"
msgstr ""

#. type: Plain text
#: custom.texi.orig:972
msgid ""
"@kbd{M-x make-variable-buffer-local} marks a variable so it will become "
"local automatically whenever it is set.  More precisely, once a variable has "
"been marked in this way, the usual ways of setting the variable "
"automatically do @code{make-local-variable} first.  We call such variables "
"@dfn{per-buffer} variables.  Many variables in Emacs are normally "
"per-buffer; the variable's document string tells you when this is so.  A "
"per-buffer variable's global value is normally never effective in any "
"buffer, but it still has a meaning: it is the initial value of the variable "
"for each new buffer."
msgstr ""

#. type: Plain text
#: custom.texi.orig:981
msgid ""
"Major modes (@pxref{Major Modes}) always make variables local to the buffer "
"before setting the variables.  This is why changing major modes in one "
"buffer has no effect on other buffers.  Minor modes also work by setting "
"variables---normally, each minor mode has one controlling variable which is "
"non-@code{nil} when the mode is enabled (@pxref{Minor Modes}).  For many "
"minor modes, the controlling variable is per buffer, and thus always "
"buffer-local.  Otherwise, you can make it local in a specific buffer like "
"any other variable."
msgstr ""

#. type: Plain text
#: custom.texi.orig:985
msgid ""
"A few variables cannot be local to a buffer because they are always local to "
"each display instead (@pxref{Multiple Displays}).  If you try to make one of "
"these variables buffer-local, you'll get an error message."
msgstr ""

#. type: findex
#: custom.texi.orig:986
#, no-wrap
msgid "kill-local-variable"
msgstr ""

#. type: Plain text
#: custom.texi.orig:992
msgid ""
"@kbd{M-x kill-local-variable} makes a specified variable cease to be local "
"to the current buffer.  The global value of the variable henceforth is in "
"effect in this buffer.  Setting the major mode kills all the local variables "
"of the buffer except for a few variables specially marked as @dfn{permanent "
"locals}."
msgstr ""

#. type: findex
#: custom.texi.orig:993
#, no-wrap
msgid "setq-default"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1001
msgid ""
"To set the global value of a variable, regardless of whether the variable "
"has a local value in the current buffer, you can use the Lisp construct "
"@code{setq-default}.  This construct is used just like @code{setq}, but it "
"sets variables' global values instead of their local values (if any).  When "
"the current buffer does have a local value, the new global value may not be "
"visible until you switch to another buffer.  Here is an example:"
msgstr ""

#. type: example
#: custom.texi.orig:1004
#, no-wrap
msgid "(setq-default fill-column 75)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1009
msgid ""
"@code{setq-default} is the only way to set the global value of a variable "
"that has been marked with @code{make-variable-buffer-local}."
msgstr ""

#. type: findex
#: custom.texi.orig:1010
#, no-wrap
msgid "default-value"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1016
msgid ""
"Lisp programs can use @code{default-value} to look at a variable's default "
"value.  This function takes a symbol as argument and returns its default "
"value.  The argument is evaluated; usually you must quote it explicitly.  "
"For example, here's how to obtain the default value of @code{fill-column}:"
msgstr ""

#. type: example
#: custom.texi.orig:1019
#, no-wrap
msgid "(default-value 'fill-column)\n"
msgstr ""

#. type: subsection
#: custom.texi.orig:1022
#, no-wrap
msgid "Local Variables in Files"
msgstr ""

#. type: cindex
#: custom.texi.orig:1023
#, no-wrap
msgid "local variables in files"
msgstr ""

#. type: cindex
#: custom.texi.orig:1024
#, no-wrap
msgid "file local variables"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1030
msgid ""
"A file can specify local variable values to use when editing the file with "
"Emacs.  Visiting the file checks for local variable specifications; it "
"automatically makes these variables local to the buffer, and sets them to "
"the values specified in the file."
msgstr ""

#. type: subsubsection
#: custom.texi.orig:1034 custom.texi.orig:1036 custom.texi.orig:1037
#, no-wrap
msgid "Specifying File Variables"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1034
msgid "Specifying file local variables."
msgstr ""

#. type: node
#: custom.texi.orig:1034 custom.texi.orig:1204
#, no-wrap
msgid "Safe File Variables"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1034
msgid "Making sure file local variables are safe."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1042
msgid ""
"There are two ways to specify file local variable values: in the first line, "
"or with a local variables list.  Here's how to specify them in the first "
"line:"
msgstr ""

#. type: example
#: custom.texi.orig:1045
#, no-wrap
msgid "-*- mode: @var{modename}; @var{var}: @var{value}; @dots{} -*-\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1052
msgid ""
"You can specify any number of variable/value pairs in this way, each pair "
"with a colon and semicolon.  The special variable/value pair @code{mode: "
"@var{modename};}, if present, specifies a major mode.  The @var{value}s are "
"used literally, and not evaluated."
msgstr ""

#. type: findex
#: custom.texi.orig:1053
#, no-wrap
msgid "add-file-local-variable-prop-line"
msgstr ""

#. type: findex
#: custom.texi.orig:1054
#, no-wrap
msgid "delete-file-local-variable-prop-line"
msgstr ""

#. type: findex
#: custom.texi.orig:1055
#, no-wrap
msgid "copy-dir-locals-to-file-locals-prop-line"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1064
msgid ""
"You can use @kbd{M-x add-file-local-variable-prop-line} instead of adding "
"entries by hand.  This command prompts for a variable and value, and adds "
"them to the first line in the appropriate way.  @kbd{M-x "
"delete-file-local-variable-prop-line} prompts for a variable, and deletes "
"its entry from the line.  The command @kbd{M-x "
"copy-dir-locals-to-file-locals-prop-line} copies the current directory-local "
"variables to the first line (@pxref{Directory Variables})."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1067
msgid ""
"Here is an example first line that specifies Lisp mode and sets two "
"variables with numeric values:"
msgstr ""

#. type: smallexample
#: custom.texi.orig:1070
#, no-wrap
msgid ";; -*- mode: Lisp; fill-column: 75; comment-column: 50; -*-\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1076
msgid ""
"Aside from @code{mode}, other keywords that have special meanings as file "
"variables are @code{coding}, @code{unibyte}, and @code{eval}.  These are "
"described below."
msgstr ""

#. type: cindex
#: custom.texi.orig:1077
#, no-wrap
msgid "shell scripts, and local file variables"
msgstr ""

#. type: cindex
#: custom.texi.orig:1078
#, no-wrap
msgid "man pages, and local file variables"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1086
msgid ""
"In shell scripts, the first line is used to identify the script interpreter, "
"so you cannot put any local variables there.  To accommodate this, Emacs "
"looks for local variable specifications in the @emph{second} line if the "
"first line specifies an interpreter.  The same is true for man pages which "
"start with the magic string @samp{'\\\"} to specify a list of troff "
"preprocessors (not all do, however)."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1092
msgid ""
"Apart from using a @samp{-*-} line, you can define file local variables "
"using a @dfn{local variables list} near the end of the file.  The start of "
"the local variables list should be no more than 3000 characters from the end "
"of the file, and must be on the last page if the file is divided into pages."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1099
msgid ""
"If a file has both a local variables list and a @samp{-*-} line, Emacs "
"processes @emph{everything} in the @samp{-*-} line first, and "
"@emph{everything} in the local variables list afterward.  The exception to "
"this is a major mode specification.  Emacs applies this first, wherever it "
"appears, since most major modes kill all local variables as part of their "
"initialization."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1104
msgid ""
"A local variables list starts with a line containing the string @samp{Local "
"Variables:}, and ends with a line containing the string @samp{End:}.  In "
"between come the variable names and values, one set per line, like this:"
msgstr ""

#. type: example
#: custom.texi.orig:1110
#, no-wrap
msgid ""
"/* Local Variables:  */\n"
"/* mode: c           */\n"
"/* comment-column: 0 */\n"
"/* End:              */\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1122
msgid ""
"In this example, each line starts with the prefix @samp{/*} and ends with "
"the suffix @samp{*/}.  Emacs recognizes the prefix and suffix by finding "
"them surrounding the magic string @samp{Local Variables:}, on the first line "
"of the list; it then automatically discards them from the other lines of the "
"list.  The usual reason for using a prefix and/or suffix is to embed the "
"local variables list in a comment, so it won't confuse other programs that "
"the file is intended for.  The example above is for the C programming "
"language, where comments start with @samp{/*} and end with @samp{*/}."
msgstr ""

#. type: findex
#: custom.texi.orig:1123
#, no-wrap
msgid "add-file-local-variable"
msgstr ""

#. type: findex
#: custom.texi.orig:1124
#, no-wrap
msgid "delete-file-local-variable"
msgstr ""

#. type: findex
#: custom.texi.orig:1125
#, no-wrap
msgid "copy-dir-locals-to-file-locals"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1133
msgid ""
"Instead of typing in the local variables list directly, you can use the "
"command @kbd{M-x add-file-local-variable}.  This prompts for a variable and "
"value, and adds them to the list, adding the @samp{Local Variables:} string "
"and start and end markers as necessary.  The command @kbd{M-x "
"delete-file-local-variable} deletes a variable from the list.  @kbd{M-x "
"copy-dir-locals-to-file-locals} copies directory-local variables to the list "
"(@pxref{Directory Variables})."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1141
msgid ""
"As with the @samp{-*-} line, the variables in a local variables list are "
"used literally, and are not evaluated first.  If you want to split a long "
"string value across multiple lines of the file, you can use "
"backslash-newline, which is ignored in Lisp string constants; you should put "
"the prefix and suffix on each line, even lines that start or end within the "
"string, as they will be stripped off when processing the list.  Here is an "
"example:"
msgstr ""

#. type: example
#: custom.texi.orig:1147
#, no-wrap
msgid ""
"# Local Variables:\n"
"# compile-command: \"cc foo.c -Dfoo=bar -Dhack=whatever \\\n"
"#   -Dmumble=blaah\"\n"
"# End:\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1151
msgid "Some ``variable names'' have special meanings in a local variables list:"
msgstr ""

#. type: itemize
#: custom.texi.orig:1155
msgid "@code{mode} enables the specified major mode."
msgstr ""

#. type: itemize
#: custom.texi.orig:1159
msgid ""
"@code{eval} evaluates the specified Lisp expression (the value returned by "
"that expression is ignored)."
msgstr ""

#. type: itemize
#: custom.texi.orig:1163
msgid ""
"@code{coding} specifies the coding system for character code conversion of "
"this file.  @xref{Coding Systems}."
msgstr ""

#. type: itemize
#: custom.texi.orig:1169
msgid ""
"@code{unibyte} says to load or compile a file of Emacs Lisp in unibyte mode, "
"if the value is @code{t}.  @xref{Disabling Multibyte, , Disabling Multibyte "
"Characters, elisp, GNU Emacs Lisp Reference Manual}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1175
msgid ""
"These four keywords are not really variables; setting them in any other "
"context has no special meaning."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1184
msgid ""
"Do not use the @code{mode} keyword for minor modes.  To enable or disable a "
"minor mode in a local variables list, use the @code{eval} keyword with a "
"Lisp expression that runs the mode command (@pxref{Minor Modes}).  For "
"example, the following local variables list enables Eldoc mode (@pxref{Lisp "
"Doc}) by calling @code{eldoc-mode} with no argument (calling it with an "
"argument of 1 would do the same), and disables Font Lock mode (@pxref{Font "
"Lock}) by calling @code{font-lock-mode} with an argument of -1."
msgstr ""

#. type: example
#: custom.texi.orig:1190
#, no-wrap
msgid ""
";; Local Variables:\n"
";; eval: (eldoc-mode)\n"
";; eval: (font-lock-mode -1)\n"
";; End:\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1199
msgid ""
"Note, however, that it is often a mistake to specify minor modes this way.  "
"Minor modes represent individual user preferences, and it may be "
"inappropriate to impose your preferences on another user who might edit the "
"file.  If you wish to automatically enable or disable a minor mode in a "
"situation-dependent way, it is often better to do it in a major mode hook "
"(@pxref{Hooks})."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1203
msgid ""
"Use the command @kbd{M-x normal-mode} to reset the local variables and major "
"mode of a buffer according to the file name and contents, including the "
"local variables list if any.  @xref{Choosing Modes}."
msgstr ""

#. type: subsubsection
#: custom.texi.orig:1205
#, no-wrap
msgid "Safety of File Variables"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1212
msgid ""
"File-local variables can be dangerous; when you visit someone else's file, "
"there's no telling what its local variables list could do to your Emacs.  "
"Improper values of the @code{eval} ``variable'', and other variables such as "
"@code{load-path}, could execute Lisp code you didn't intend to run."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1220
msgid ""
"Therefore, whenever Emacs encounters file local variable values that are not "
"known to be safe, it displays the file's entire local variables list, and "
"asks you for confirmation before setting them.  You can type @kbd{y} or "
"@key{SPC} to put the local variables list into effect, or @kbd{n} to ignore "
"it.  When Emacs is run in batch mode (@pxref{Initial Options}), it can't "
"really ask you, so it assumes the answer @kbd{n}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1230
msgid ""
"Emacs normally recognizes certain variable/value pairs as safe.  For "
"instance, it is safe to give @code{comment-column} or @code{fill-column} any "
"integer value.  If a file specifies only known-safe variable/value pairs, "
"Emacs does not ask for confirmation before setting them.  Otherwise, you can "
"tell Emacs to record all the variable/value pairs in this file as safe, by "
"typing @kbd{!} at the confirmation prompt.  When Emacs encounters these "
"variable/value pairs subsequently, in the same file or others, it will "
"assume they are safe."
msgstr ""

#. type: vindex
#: custom.texi.orig:1231
#, no-wrap
msgid "safe-local-variable-values"
msgstr ""

#. type: cindex
#: custom.texi.orig:1232
#, no-wrap
msgid "risky variable"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1243
msgid ""
"Some variables, such as @code{load-path}, are considered particularly "
"@dfn{risky}: there is seldom any reason to specify them as local variables, "
"and changing them can be dangerous.  If a file contains only risky local "
"variables, Emacs neither offers nor accepts @kbd{!} as input at the "
"confirmation prompt.  If some of the local variables in a file are risky, "
"and some are only potentially unsafe, you can enter @kbd{!} at the prompt.  "
"It applies all the variables, but only marks the non-risky ones as safe for "
"the future.  If you really want to record safe values for risky variables, "
"do it directly by customizing @samp{safe-local-variable-values} (@pxref{Easy "
"Customization})."
msgstr ""

#. type: vindex
#: custom.texi.orig:1244
#, no-wrap
msgid "enable-local-variables"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1252
msgid ""
"The variable @code{enable-local-variables} allows you to change the way "
"Emacs processes local variables.  Its default value is @code{t}, which "
"specifies the behavior described above.  If it is @code{nil}, Emacs simply "
"ignores all file local variables.  @code{:safe} means use only the safe "
"values and ignore the rest.  Any other value says to query you about each "
"file that has local variables, without trying to determine whether the "
"values are known to be safe."
msgstr ""

#. type: vindex
#: custom.texi.orig:1253
#, no-wrap
msgid "enable-local-eval"
msgstr ""

#. type: vindex
#: custom.texi.orig:1254
#, no-wrap
msgid "safe-local-eval-forms"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1261
msgid ""
"The variable @code{enable-local-eval} controls whether Emacs processes "
"@code{eval} variables.  The three possibilities for the variable's value are "
"@code{t}, @code{nil}, and anything else, just as for "
"@code{enable-local-variables}.  The default is @code{maybe}, which is "
"neither @code{t} nor @code{nil}, so normally Emacs does ask for confirmation "
"about processing @code{eval} variables."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1265
msgid ""
"As an exception, Emacs never asks for confirmation to evaluate any "
"@code{eval} form if that form occurs within the variable "
"@code{safe-local-eval-forms}."
msgstr ""

#. type: subsection
#: custom.texi.orig:1267
#, no-wrap
msgid "Per-Directory Local Variables"
msgstr ""

#. type: cindex
#: custom.texi.orig:1268
#, no-wrap
msgid "local variables, for all files in a directory"
msgstr ""

#. type: cindex
#: custom.texi.orig:1269
#, no-wrap
msgid "directory-local variables"
msgstr ""

#. type: cindex
#: custom.texi.orig:1270
#, no-wrap
msgid "per-directory local variables"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1276
msgid ""
"Sometimes, you may wish to define the same set of local variables to all the "
"files in a certain directory and its subdirectories, such as the directory "
"tree of a large software project.  This can be accomplished with "
"@dfn{directory-local variables}."
msgstr ""

#. type: cindex
#: custom.texi.orig:1277
#, no-wrap
msgid "@file{.dir-locals.el} file"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1292
msgid ""
"The usual way to define directory-local variables is to put a file named "
"@file{.dir-locals.el}@footnote{ On MS-DOS, the name of this file should be "
"@file{_dir-locals.el}, due to limitations of the DOS filesystems.  If the "
"filesystem is limited to 8+3 file names, the name of the file will be "
"truncated by the OS to @file{_dir-loc.el}.  } in a directory.  Whenever "
"Emacs visits any file in that directory or any of its subdirectories, it "
"will apply the directory-local variables specified in @file{.dir-locals.el}, "
"as though they had been defined as file-local variables for that file "
"(@pxref{File Variables}).  Emacs searches for @file{.dir-locals.el} starting "
"in the directory of the visited file, and moving up the directory tree.  To "
"avoid slowdown, this search is skipped for remote files.  If needed, the "
"search can be extended for remote files by setting the variable "
"@code{enable-remote-dir-locals} to @code{t}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1302
msgid ""
"The @file{.dir-locals.el} file should hold a specially-constructed list, "
"which maps major mode names (symbols) to alists (@pxref{Association Lists,,, "
"elisp, The Emacs Lisp Reference Manual}).  Each alist entry consists of a "
"variable name and the directory-local value to assign to that variable, when "
"the specified major mode is enabled.  Instead of a mode name, you can "
"specify @samp{nil}, which means that the alist applies to any mode; or you "
"can specify a subdirectory name (a string), in which case the alist applies "
"to all files in that subdirectory."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1304
msgid "Here's an example of a @file{.dir-locals.el} file:"
msgstr ""

#. type: example
#: custom.texi.orig:1313
#, no-wrap
msgid ""
"((nil . ((indent-tabs-mode . t)\n"
"         (fill-column . 80)))\n"
" (c-mode . ((c-file-style . \"BSD\")\n"
"            (subdirs . nil)))\n"
" (\"src/imported\"\n"
"  . ((nil . ((change-log-default-name\n"
"              . \"ChangeLog.local\"))))))\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1323
msgid ""
"This sets @samp{indent-tabs-mode} and @code{fill-column} for any file in the "
"directory tree, and the indentation style for any C source file.  The "
"special @code{subdirs} element is not a variable, but a special keyword "
"which indicates that the C mode settings are only to be applied in the "
"current directory, not in any subdirectories.  Finally, it specifies a "
"different @file{ChangeLog} file name for any file in the @file{src/imported} "
"subdirectory."
msgstr ""

#. type: findex
#: custom.texi.orig:1324
#, no-wrap
msgid "add-dir-local-variable"
msgstr ""

#. type: findex
#: custom.texi.orig:1325
#, no-wrap
msgid "delete-dir-local-variable"
msgstr ""

#. type: findex
#: custom.texi.orig:1326
#, no-wrap
msgid "copy-file-locals-to-dir-locals"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1334
msgid ""
"Instead of editing the @file{.dir-locals.el} file by hand, you can use the "
"command @kbd{M-x add-dir-local-variable}.  This prompts for a mode or "
"subdirectory name, and for variable and value, and adds the entry defining "
"the directory-local variable.  @kbd{M-x delete-dir-local-variable} deletes "
"an entry.  @kbd{M-x copy-file-locals-to-dir-locals} copies the file-local "
"variables in the current file into @file{.dir-locals.el}."
msgstr ""

#. type: findex
#: custom.texi.orig:1335
#, no-wrap
msgid "dir-locals-set-class-variables"
msgstr ""

#. type: findex
#: custom.texi.orig:1336
#, no-wrap
msgid "dir-locals-set-directory-class"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1346
msgid ""
"Another method of specifying directory-local variables is to define a group "
"of variables/value pairs in a @dfn{directory class}, using the "
"@code{dir-locals-set-class-variables} function; then, tell Emacs which "
"directories correspond to the class by using the "
"@code{dir-locals-set-directory-class} function.  These function calls "
"normally go in your initialization file (@pxref{Init File}).  This method is "
"useful when you can't put @file{.dir-locals.el} in a directory for some "
"reason.  For example, you could apply settings to an unwritable directory "
"this way:"
msgstr ""

#. type: example
#: custom.texi.orig:1350
#, no-wrap
msgid ""
"(dir-locals-set-class-variables 'unwritable-directory\n"
"   '((nil . ((some-useful-setting . value)))))\n"
"\n"
msgstr ""

#. type: example
#: custom.texi.orig:1353
#, no-wrap
msgid ""
"(dir-locals-set-directory-class\n"
"   \"/usr/include/\" 'unwritable-directory)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1359
msgid ""
"If a variable has both a directory-local and file-local value specified, the "
"file-local value takes effect.  Unsafe directory-local variables are handled "
"in the same way as unsafe file-local variables (@pxref{Safe File "
"Variables})."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1363
msgid ""
"Directory-local variables also take effect in certain buffers that do not "
"visit a file directly but perform work within a directory, such as Dired "
"buffers (@pxref{Dired})."
msgstr ""

#. type: section
#: custom.texi.orig:1365
#, no-wrap
msgid "Customizing Key Bindings"
msgstr ""

#. type: cindex
#: custom.texi.orig:1366
#, no-wrap
msgid "key bindings"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1372
msgid ""
"This section describes @dfn{key bindings}, which map keys to commands, and "
"@dfn{keymaps}, which record key bindings.  It also explains how to customize "
"key bindings, which is done by editing your init file (@pxref{Init "
"Rebinding})."
msgstr ""

#. type: subsection
#: custom.texi.orig:1387 custom.texi.orig:1389 custom.texi.orig:1390
#, no-wrap
msgid "Keymaps"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "Generalities.  The global keymap."
msgstr ""

#. type: subsection
#: custom.texi.orig:1387 custom.texi.orig:1439 custom.texi.orig:1440
#, no-wrap
msgid "Prefix Keymaps"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "Keymaps for prefix keys."
msgstr ""

#. type: subsection
#: custom.texi.orig:1387 custom.texi.orig:1489 custom.texi.orig:1490
#, no-wrap
msgid "Local Keymaps"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "Major and minor modes have their own keymaps."
msgstr ""

#. type: node
#: custom.texi.orig:1387 custom.texi.orig:1521
#, no-wrap
msgid "Minibuffer Maps"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "The minibuffer uses its own local keymaps."
msgstr ""

#. type: node
#: custom.texi.orig:1387 custom.texi.orig:1552
#, no-wrap
msgid "Rebinding"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "How to redefine one key's meaning conveniently."
msgstr ""

#. type: node
#: custom.texi.orig:1387 custom.texi.orig:1639
#, no-wrap
msgid "Init Rebinding"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "Rebinding keys with your initialization file."
msgstr ""

#. type: subsection
#: custom.texi.orig:1387 custom.texi.orig:1746 custom.texi.orig:1747
#, no-wrap
msgid "Modifier Keys"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "Using modifier keys in key bindings."
msgstr ""

#. type: node
#: custom.texi.orig:1387 custom.texi.orig:1784
#, no-wrap
msgid "Function Keys"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "Rebinding terminal function keys."
msgstr ""

#. type: node
#: custom.texi.orig:1387 custom.texi.orig:1852
#, no-wrap
msgid "Named ASCII Chars"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "Distinguishing @key{TAB} from @kbd{C-i}, and so on."
msgstr ""

#. type: node
#: custom.texi.orig:1387 custom.texi.orig:1881
#, no-wrap
msgid "Mouse Buttons"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid "Rebinding mouse buttons in Emacs."
msgstr ""

#. type: node
#: custom.texi.orig:1387 custom.texi.orig:2013
#, no-wrap
msgid "Disabling"
msgstr ""

#. type: menuentry
#: custom.texi.orig:1387
msgid ""
"Disabling a command means confirmation is required before it can be "
"executed.  This is done to protect beginners from surprises."
msgstr ""

#. type: cindex
#: custom.texi.orig:1391
#, no-wrap
msgid "keymap"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1397
msgid ""
"As described in @ref{Commands}, each Emacs command is a Lisp function whose "
"definition provides for interactive use.  Like every Lisp function, a "
"command has a function name, which usually consists of lower-case letters "
"and hyphens."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1403
msgid ""
"A @dfn{key sequence} (@dfn{key}, for short) is a sequence of @dfn{input "
"events} that have a meaning as a unit.  Input events include characters, "
"function keys and mouse buttons---all the inputs that you can send to the "
"computer.  A key sequence gets its meaning from its @dfn{binding}, which "
"says what command it runs."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1407
msgid ""
"The bindings between key sequences and command functions are recorded in "
"data structures called @dfn{keymaps}.  Emacs has many of these, each used on "
"particular occasions."
msgstr ""

#. type: cindex
#: custom.texi.orig:1408
#, no-wrap
msgid "global keymap"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1414
msgid ""
"The @dfn{global} keymap is the most important keymap because it is always in "
"effect.  The global keymap defines keys for Fundamental mode (@pxref{Major "
"Modes}); most of these definitions are common to most or all major modes.  "
"Each major or minor mode can have its own keymap which overrides the global "
"definitions of some keys."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1422
msgid ""
"For example, a self-inserting character such as @kbd{g} is self-inserting "
"because the global keymap binds it to the command "
"@code{self-insert-command}.  The standard Emacs editing characters such as "
"@kbd{C-a} also get their standard meanings from the global keymap.  Commands "
"to rebind keys, such as @kbd{M-x global-set-key}, work by storing the new "
"binding in the proper place in the global map (@pxref{Rebinding})."
msgstr ""

#. type: cindex
#: custom.texi.orig:1423
#, no-wrap
msgid "function key"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1431
msgid ""
"Most modern keyboards have function keys as well as character keys.  "
"Function keys send input events just as character keys do, and keymaps can "
"have bindings for them.  Key sequences can mix function keys and "
"characters.  For example, if your keyboard has a @key{Home} function key, "
"Emacs can recognize key sequences like @kbd{C-x @key{Home}}.  You can even "
"mix mouse events with keyboard events, such as @kbd{S-down-mouse-1}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1438
msgid ""
"On text terminals, typing a function key actually sends the computer a "
"sequence of characters; the precise details of the sequence depends on the "
"function key and on the terminal type.  (Often the sequence starts with "
"@kbd{@key{ESC} [}.)  If Emacs understands your terminal type properly, it "
"automatically handles such sequences as single input events."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1449
msgid ""
"Internally, Emacs records only single events in each keymap.  Interpreting a "
"key sequence of multiple events involves a chain of keymaps: the first "
"keymap gives a definition for the first event, which is another keymap, "
"which is used to look up the second event in the sequence, and so on.  Thus, "
"a prefix key such as @kbd{C-x} or @key{ESC} has its own keymap, which holds "
"the definition for the event that immediately follows that prefix."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1459
msgid ""
"The definition of a prefix key is usually the keymap to use for looking up "
"the following event.  The definition can also be a Lisp symbol whose "
"function definition is the following keymap; the effect is the same, but it "
"provides a command name for the prefix key that can be used as a description "
"of what the prefix key is for.  Thus, the binding of @kbd{C-x} is the symbol "
"@code{Control-X-prefix}, whose function definition is the keymap for "
"@kbd{C-x} commands.  The definitions of @kbd{C-c}, @kbd{C-x}, @kbd{C-h} and "
"@key{ESC} as prefix keys appear in the global map, so these prefix keys are "
"always available."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1466
msgid ""
"Aside from ordinary prefix keys, there is a fictitious ``prefix key'' which "
"represents the menu bar; see @ref{Menu Bar,,,elisp, The Emacs Lisp Reference "
"Manual}, for special information about menu bar key bindings.  Mouse button "
"events that invoke pop-up menus are also prefix keys; see @ref{Menu "
"Keymaps,,,elisp, The Emacs Lisp Reference Manual}, for more details."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1468
msgid "Some prefix keymaps are stored in variables with names:"
msgstr ""

#. type: vindex
#: custom.texi.orig:1471
#, no-wrap
msgid "ctl-x-map"
msgstr ""

#. type: itemize
#: custom.texi.orig:1474
msgid ""
"@code{ctl-x-map} is the variable name for the map used for characters that "
"follow @kbd{C-x}."
msgstr ""

#. type: vindex
#: custom.texi.orig:1475
#, no-wrap
msgid "help-map"
msgstr ""

#. type: itemize
#: custom.texi.orig:1477
msgid "@code{help-map} is for characters that follow @kbd{C-h}."
msgstr ""

#. type: vindex
#: custom.texi.orig:1478
#, no-wrap
msgid "esc-map"
msgstr ""

#. type: itemize
#: custom.texi.orig:1481
msgid ""
"@code{esc-map} is for characters that follow @key{ESC}.  Thus, all Meta "
"characters are actually defined by this map."
msgstr ""

#. type: vindex
#: custom.texi.orig:1482
#, no-wrap
msgid "ctl-x-4-map"
msgstr ""

#. type: itemize
#: custom.texi.orig:1484
msgid "@code{ctl-x-4-map} is for characters that follow @kbd{C-x 4}."
msgstr ""

#. type: vindex
#: custom.texi.orig:1485
#, no-wrap
msgid "mode-specific-map"
msgstr ""

#. type: itemize
#: custom.texi.orig:1487
msgid "@code{mode-specific-map} is for characters that follow @kbd{C-c}."
msgstr ""

#. type: cindex
#: custom.texi.orig:1492
#, no-wrap
msgid "local keymap"
msgstr ""

#. type: cindex
#: custom.texi.orig:1493
#, no-wrap
msgid "minor mode keymap"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1502
msgid ""
"So far, we have explained the ins and outs of the global map.  Major modes "
"customize Emacs by providing their own key bindings in @dfn{local keymaps}.  "
"For example, C mode overrides @key{TAB} to make it indent the current line "
"for C code.  Minor modes can also have local keymaps; whenever a minor mode "
"is in effect, the definitions in its keymap override both the major mode's "
"local keymap and the global keymap.  In addition, portions of text in the "
"buffer can specify their own keymaps, which override all other keymaps."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1512
msgid ""
"A local keymap can redefine a key as a prefix key by defining it as a prefix "
"keymap.  If the key is also defined globally as a prefix, its local and "
"global definitions (both keymaps) effectively combine: both definitions are "
"used to look up the event that follows the prefix key.  For example, if a "
"local keymap defines @kbd{C-c} as a prefix keymap, and that keymap defines "
"@kbd{C-z} as a command, this provides a local meaning for @kbd{C-c C-z}.  "
"This does not affect other sequences that start with @kbd{C-c}; if those "
"sequences don't have their own local bindings, their global bindings remain "
"in effect."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1520
msgid ""
"Another way to think of this is that Emacs handles a multi-event key "
"sequence by looking in several keymaps, one by one, for a binding of the "
"whole key sequence.  First it checks the minor mode keymaps for minor modes "
"that are enabled, then it checks the major mode's keymap, and then it checks "
"the global keymap.  This is not precisely how key lookup works, but it's "
"good enough for understanding the results in ordinary circumstances."
msgstr ""

#. type: subsection
#: custom.texi.orig:1522
#, no-wrap
msgid "Minibuffer Keymaps"
msgstr ""

#. type: cindex
#: custom.texi.orig:1524
#, no-wrap
msgid "minibuffer keymaps"
msgstr ""

#. type: vindex
#: custom.texi.orig:1525
#, no-wrap
msgid "minibuffer-local-map"
msgstr ""

#. type: vindex
#: custom.texi.orig:1526
#, no-wrap
msgid "minibuffer-local-ns-map"
msgstr ""

#. type: vindex
#: custom.texi.orig:1527
#, no-wrap
msgid "minibuffer-local-completion-map"
msgstr ""

#. type: vindex
#: custom.texi.orig:1528
#, no-wrap
msgid "minibuffer-local-must-match-map"
msgstr ""

#. type: vindex
#: custom.texi.orig:1529
#, no-wrap
msgid "minibuffer-local-filename-completion-map"
msgstr ""

#. type: vindex
#: custom.texi.orig:1530
#, no-wrap
msgid "minibuffer-local-filename-must-match-map"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1533
msgid ""
"The minibuffer has its own set of local keymaps; they contain various "
"completion and exit commands."
msgstr ""

#. type: itemize
#: custom.texi.orig:1537
msgid "@code{minibuffer-local-map} is used for ordinary input (no completion)."
msgstr ""

#. type: itemize
#: custom.texi.orig:1540
msgid ""
"@code{minibuffer-local-ns-map} is similar, except that @key{SPC} exits just "
"like @key{RET}."
msgstr ""

#. type: itemize
#: custom.texi.orig:1542
msgid "@code{minibuffer-local-completion-map} is for permissive completion."
msgstr ""

#. type: itemize
#: custom.texi.orig:1545
msgid ""
"@code{minibuffer-local-must-match-map} is for strict completion and for "
"cautious completion."
msgstr ""

#. type: itemize
#: custom.texi.orig:1550
msgid ""
"@code{minibuffer-local-filename-completion-map} and "
"@code{minibuffer-local-filename-must-match-map} are like the two previous "
"ones, but they are specifically for file name completion.  They do not bind "
"@key{SPC}."
msgstr ""

#. type: subsection
#: custom.texi.orig:1553
#, no-wrap
msgid "Changing Key Bindings Interactively"
msgstr ""

#. type: cindex
#: custom.texi.orig:1554
#, no-wrap
msgid "key rebinding, this session"
msgstr ""

#. type: cindex
#: custom.texi.orig:1555
#, no-wrap
msgid "redefining keys, this session"
msgstr ""

#. type: cindex
#: custom.texi.orig:1556
#, no-wrap
msgid "binding keys"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1563
msgid ""
"The way to redefine an Emacs key is to change its entry in a keymap.  You "
"can change the global keymap, in which case the change is effective in all "
"major modes (except those that have their own overriding local bindings for "
"the same key).  Or you can change a local keymap, which affects all buffers "
"using the same major mode."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1567
msgid ""
"In this section, we describe how to rebind keys for the present Emacs "
"session.  @xref{Init Rebinding}, for a description of how to make key "
"rebindings affect future Emacs sessions."
msgstr ""

#. type: findex
#: custom.texi.orig:1568
#, no-wrap
msgid "global-set-key"
msgstr ""

#. type: findex
#: custom.texi.orig:1569
#, no-wrap
msgid "local-set-key"
msgstr ""

#. type: findex
#: custom.texi.orig:1570
#, no-wrap
msgid "global-unset-key"
msgstr ""

#. type: findex
#: custom.texi.orig:1571
#, no-wrap
msgid "local-unset-key"
msgstr ""

#. type: item
#: custom.texi.orig:1573
#, no-wrap
msgid "M-x global-set-key @key{RET} @var{key} @var{cmd} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:1575
msgid "Define @var{key} globally to run @var{cmd}."
msgstr ""

#. type: item
#: custom.texi.orig:1575
#, no-wrap
msgid "M-x local-set-key @key{RET} @var{key} @var{cmd} @key{RET}"
msgstr ""

#. type: table
#: custom.texi.orig:1578
msgid "Define @var{key} locally (in the major mode now in effect) to run @var{cmd}."
msgstr ""

#. type: item
#: custom.texi.orig:1578
#, no-wrap
msgid "M-x global-unset-key @key{RET} @var{key}"
msgstr ""

#. type: table
#: custom.texi.orig:1580
msgid "Make @var{key} undefined in the global map."
msgstr ""

#. type: item
#: custom.texi.orig:1580
#, no-wrap
msgid "M-x local-unset-key @key{RET} @var{key}"
msgstr ""

#. type: table
#: custom.texi.orig:1582
msgid "Make @var{key} undefined locally (in the major mode now in effect)."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1587
msgid ""
"For example, the following binds @kbd{C-z} to the @code{shell} command "
"(@pxref{Interactive Shell}), replacing the normal global definition of "
"@kbd{C-z}:"
msgstr ""

#. type: example
#: custom.texi.orig:1590
#, no-wrap
msgid "M-x global-set-key @key{RET} C-z shell @key{RET}\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1596
msgid ""
"The @code{global-set-key} command reads the command name after the key.  "
"After you press the key, a message like this appears so that you can confirm "
"that you are binding the key you want:"
msgstr ""

#. type: example
#: custom.texi.orig:1599
#, no-wrap
msgid "Set key C-z to command:\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1604
msgid ""
"You can redefine function keys and mouse events in the same way; just type "
"the function key or click the mouse when it's time to specify the key to "
"rebind."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1612
msgid ""
"You can rebind a key that contains more than one event in the same way.  "
"Emacs keeps reading the key to rebind until it is a complete key (that is, "
"not a prefix key).  Thus, if you type @kbd{C-f} for @var{key}, that's the "
"end; it enters the minibuffer immediately to read @var{cmd}.  But if you "
"type @kbd{C-x}, since that's a prefix, it reads another character; if that "
"is @kbd{4}, another prefix character, it reads one more character, and so "
"on.  For example,"
msgstr ""

#. type: example
#: custom.texi.orig:1615
#, no-wrap
msgid "M-x global-set-key @key{RET} C-x 4 $ spell-other-window @key{RET}\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1620
msgid ""
"redefines @kbd{C-x 4 $} to run the (fictitious) command "
"@code{spell-other-window}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1626
msgid ""
"You can remove the global definition of a key with @code{global-unset-key}.  "
"This makes the key @dfn{undefined}; if you type it, Emacs will just beep.  "
"Similarly, @code{local-unset-key} makes a key undefined in the current major "
"mode keymap, which makes the global definition (or lack of one) come back "
"into effect in that major mode."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1633
msgid ""
"If you have redefined (or undefined) a key and you subsequently wish to "
"retract the change, undefining the key will not do the job---you need to "
"redefine the key with its standard definition.  To find the name of the "
"standard definition of a key, go to a Fundamental mode buffer in a fresh "
"Emacs and use @kbd{C-h c}.  The documentation of keys in this manual also "
"lists their command names."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1638
msgid ""
"If you want to prevent yourself from invoking a command by mistake, it is "
"better to disable the command than to undefine the key.  A disabled command "
"is less work to invoke when you really want to.  @xref{Disabling}."
msgstr ""

#. type: subsection
#: custom.texi.orig:1640
#, no-wrap
msgid "Rebinding Keys in Your Init File"
msgstr ""

#. type: cindex
#: custom.texi.orig:1641
#, no-wrap
msgid "rebinding major mode keys"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1648
msgid ""
"If you have a set of key bindings that you like to use all the time, you can "
"specify them in your initialization file by writing Lisp code.  @xref{Init "
"File}, for a description of the initialization file."
msgstr ""

#. type: findex
#: custom.texi.orig:1649
#, no-wrap
msgid "kbd"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1656
msgid ""
"There are several ways to write a key binding using Lisp.  The simplest is "
"to use the @code{kbd} function, which converts a textual representation of a "
"key sequence---similar to how we have written key sequences in this "
"manual---into a form that can be passed as an argument to "
"@code{global-set-key}.  For example, here's how to bind @kbd{C-z} to the "
"@code{shell} command (@pxref{Interactive Shell}):"
msgstr ""

#. type: example
#: custom.texi.orig:1659
#, no-wrap
msgid "(global-set-key (kbd \"C-z\") 'shell)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1666
msgid ""
"The single-quote before the command name, @code{shell}, marks it as a "
"constant symbol rather than a variable.  If you omit the quote, Emacs would "
"try to evaluate @code{shell} as a variable.  This probably causes an error; "
"it certainly isn't what you want."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1669
msgid ""
"Here are some additional examples, including binding function keys and mouse "
"events:"
msgstr ""

#. type: example
#: custom.texi.orig:1677
#, no-wrap
msgid ""
"(global-set-key (kbd \"C-c y\") 'clipboard-yank)\n"
"(global-set-key (kbd \"C-M-q\") 'query-replace)\n"
"(global-set-key (kbd \"<f5>\") 'flyspell-mode)\n"
"(global-set-key (kbd \"C-<f5>\") 'linum-mode)\n"
"(global-set-key (kbd \"C-<right>\") 'forward-sentence)\n"
"(global-set-key (kbd \"<mouse-2>\") 'mouse-save-then-kill)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1684
msgid ""
"Instead of using @code{kbd}, you can use a Lisp string or vector to specify "
"the key sequence.  Using a string is simpler, but only works for "
"@acronym{ASCII} characters and Meta-modified @acronym{ASCII} characters.  "
"For example, here's how to bind @kbd{C-x M-l} to @code{make-symbolic-link} "
"(@pxref{Misc File Ops}):"
msgstr ""

#. type: example
#: custom.texi.orig:1687
#, no-wrap
msgid "(global-set-key \"\\C-x\\M-l\" 'make-symbolic-link)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1693
msgid ""
"To put @key{TAB}, @key{RET}, @key{ESC}, or @key{DEL} in the string, use the "
"Emacs Lisp escape sequences @samp{\\t}, @samp{\\r}, @samp{\\e}, and "
"@samp{\\d} respectively.  Here is an example which binds @kbd{C-x @key{TAB}} "
"to @code{indent-rigidly} (@pxref{Indentation}):"
msgstr ""

#. type: example
#: custom.texi.orig:1696
#, no-wrap
msgid "(global-set-key \"\\C-x\\t\" 'indent-rigidly)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1708
msgid ""
"When the key sequence includes function keys or mouse button events, or "
"non-@acronym{ASCII} characters such as @code{C-=} or @code{H-a}, you can use "
"a vector to specify the key sequence.  Each element in the vector stands for "
"an input event; the elements are separated by spaces and surrounded by a "
"pair of square brackets.  If a vector element is a character, write it as a "
"Lisp character constant: @samp{?} followed by the character as it would "
"appear in a string.  Function keys are represented by symbols "
"(@pxref{Function Keys}); simply write the symbol's name, with no other "
"delimiters or punctuation.  Here are some examples:"
msgstr ""

#. type: example
#: custom.texi.orig:1715
#, no-wrap
msgid ""
"(global-set-key [?\\C-=] 'make-symbolic-link)\n"
"(global-set-key [?\\M-\\C-=] 'make-symbolic-link)\n"
"(global-set-key [?\\H-a] 'make-symbolic-link)\n"
"(global-set-key [f7] 'make-symbolic-link)\n"
"(global-set-key [C-mouse-1] 'make-symbolic-link)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1719
msgid "You can use a vector for the simple cases too:"
msgstr ""

#. type: example
#: custom.texi.orig:1722
#, no-wrap
msgid "(global-set-key [?\\C-z ?\\M-l] 'make-symbolic-link)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1726
msgid ""
"Language and coding systems may cause problems with key bindings for "
"non-@acronym{ASCII} characters.  @xref{Init Non-ASCII}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1731
msgid ""
"As described in @ref{Local Keymaps}, major modes and minor modes can define "
"local keymaps.  These keymaps are constructed when the mode is used for the "
"first time in a session.  If you wish to change one of these keymaps, you "
"must use the @dfn{mode hook} (@pxref{Hooks})."
msgstr ""

#. type: findex
#: custom.texi.orig:1732
#, no-wrap
msgid "define-key"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1736
msgid ""
"For example, Texinfo mode runs the hook @code{texinfo-mode-hook}.  Here's "
"how you can use the hook to add local bindings for @kbd{C-c n} and @kbd{C-c "
"p} in Texinfo mode:"
msgstr ""

#. type: example
#: custom.texi.orig:1744
#, no-wrap
msgid ""
"(add-hook 'texinfo-mode-hook\n"
"          (lambda ()\n"
"            (define-key texinfo-mode-map \"\\C-cp\"\n"
"                        'backward-paragraph)\n"
"            (define-key texinfo-mode-map \"\\C-cn\"\n"
"                        'forward-paragraph)))\n"
msgstr ""

#. type: cindex
#: custom.texi.orig:1748
#, no-wrap
msgid "modifier keys"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1756
msgid ""
"The default key bindings in Emacs are set up so that modified alphabetical "
"characters are case-insensitive.  In other words, @kbd{C-A} does the same "
"thing as @kbd{C-a}, and @kbd{M-A} does the same thing as @kbd{M-a}.  This "
"concerns only alphabetical characters, and does not apply to ``shifted'' "
"versions of other keys; for instance, @kbd{C-@@} is not the same as "
"@kbd{C-2}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1761
msgid ""
"A @key{Control}-modified alphabetical character is always considered "
"case-insensitive: Emacs always treats @kbd{C-A} as @kbd{C-a}, @kbd{C-B} as "
"@kbd{C-b}, and so forth.  The reason for this is historical."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1765
msgid ""
"For all other modifiers, you can make the modified alphabetical characters "
"case-sensitive when you customize Emacs.  For instance, you could make "
"@kbd{M-a} and @kbd{M-A} run different commands."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1775
msgid ""
"Although only the @key{Control} and @key{META} modifier keys are commonly "
"used, Emacs supports three other modifier keys.  These are called "
"@key{Super}, @key{Hyper} and @key{Alt}.  Few terminals provide ways to use "
"these modifiers; the key labeled @key{Alt} on most keyboards usually issues "
"the @key{META} modifier, not @key{Alt}.  The standard key bindings in Emacs "
"do not include any characters with these modifiers.  However, you can "
"customize Emacs to assign meanings to them.  The modifier bits are labeled "
"as @samp{s-}, @samp{H-} and @samp{A-} respectively."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1783
msgid ""
"Even if your keyboard lacks these additional modifier keys, you can enter it "
"using @kbd{C-x @@}: @kbd{C-x @@ h} adds the ``hyper'' flag to the next "
"character, @kbd{C-x @@ s} adds the ``super'' flag, and @kbd{C-x @@ a} adds "
"the ``alt'' flag.  For instance, @kbd{C-x @@ h C-a} is a way to enter "
"@kbd{Hyper-Control-a}.  (Unfortunately, there is no way to add two modifiers "
"by using @kbd{C-x @@} twice for the same character, because the first one "
"goes to work on the @kbd{C-x}.)"
msgstr ""

#. type: subsection
#: custom.texi.orig:1785
#, no-wrap
msgid "Rebinding Function Keys"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1793
msgid ""
"Key sequences can contain function keys as well as ordinary characters.  "
"Just as Lisp characters (actually integers) represent keyboard characters, "
"Lisp symbols represent function keys.  If the function key has a word as its "
"label, then that word is also the name of the corresponding Lisp symbol.  "
"Here are the conventional Lisp names for common function keys:"
msgstr ""

#. type: item
#: custom.texi.orig:1795
#, no-wrap
msgid "@code{LEFT}, @code{UP}, @code{RIGHT}, @code{DOWN}"
msgstr ""

#. type: table
#: custom.texi.orig:1797
msgid "Cursor arrow keys."
msgstr ""

#. type: item
#: custom.texi.orig:1798
#, no-wrap
msgid "@code{Begin}, @code{End}, @code{Home}, @code{next}, @code{prior}"
msgstr ""

#. type: table
#: custom.texi.orig:1800
msgid "Other cursor repositioning keys."
msgstr ""

#. type: item
#: custom.texi.orig:1801
#, no-wrap
msgid "@code{select}, @code{print}, @code{execute}, @code{backtab}"
msgstr ""

#. type: itemx
#: custom.texi.orig:1802
#, no-wrap
msgid "@code{insert}, @code{undo}, @code{redo}, @code{clearline}"
msgstr ""

#. type: itemx
#: custom.texi.orig:1803
#, no-wrap
msgid "@code{insertline}, @code{deleteline}, @code{insertchar}, @code{deletechar}"
msgstr ""

#. type: table
#: custom.texi.orig:1805
msgid "Miscellaneous function keys."
msgstr ""

#. type: item
#: custom.texi.orig:1806
#, no-wrap
msgid "@code{f1}, @code{f2}, @dots{} @code{f35}"
msgstr ""

#. type: table
#: custom.texi.orig:1808
msgid "Numbered function keys (across the top of the keyboard)."
msgstr ""

#. type: item
#: custom.texi.orig:1809
#, no-wrap
msgid "@code{kp-add}, @code{kp-subtract}, @code{kp-multiply}, @code{kp-divide}"
msgstr ""

#. type: itemx
#: custom.texi.orig:1810
#, no-wrap
msgid "@code{kp-backtab}, @code{kp-space}, @code{kp-tab}, @code{kp-enter}"
msgstr ""

#. type: itemx
#: custom.texi.orig:1811
#, no-wrap
msgid "@code{kp-separator}, @code{kp-decimal}, @code{kp-equal}"
msgstr ""

#. type: table
#: custom.texi.orig:1813
msgid ""
"Keypad keys (to the right of the regular keyboard), with names or "
"punctuation."
msgstr ""

#. type: item
#: custom.texi.orig:1814
#, no-wrap
msgid "@code{kp-0}, @code{kp-1}, @dots{} @code{kp-9}"
msgstr ""

#. type: table
#: custom.texi.orig:1816
msgid "Keypad keys with digits."
msgstr ""

#. type: item
#: custom.texi.orig:1817
#, no-wrap
msgid "@code{kp-f1}, @code{kp-f2}, @code{kp-f3}, @code{kp-f4}"
msgstr ""

#. type: table
#: custom.texi.orig:1819
msgid "Keypad PF keys."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1825
msgid ""
"These names are conventional, but some systems (especially when using X) may "
"use different names.  To make certain what symbol is used for a given "
"function key on your terminal, type @kbd{C-h c} followed by that key."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1827
msgid "@xref{Init Rebinding}, for examples of binding function keys."
msgstr ""

#. type: cindex
#: custom.texi.orig:1828
#, no-wrap
msgid "keypad"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1843
msgid ""
"Many keyboards have a ``numeric keypad'' on the right hand side.  The "
"numeric keys in the keypad double up as cursor motion keys, toggled by a key "
"labeled @samp{Num Lock}.  By default, Emacs translates these keys to the "
"corresponding keys in the main keyboard.  For example, when @samp{Num Lock} "
"is on, the key labeled @samp{8} on the numeric keypad produces @code{kp-8}, "
"which is translated to @kbd{8}; when @samp{Num Lock} is off, the same key "
"produces @code{kp-up}, which is translated to @key{UP}.  If you rebind a key "
"such as @kbd{8} or @key{UP}, it affects the equivalent keypad key too.  "
"However, if you rebind a @samp{kp-} key directly, that won't affect its "
"non-keypad equivalent.  Note that the modified keys are not translated: for "
"instance, if you hold down the @key{META} key while pressing the @samp{8} "
"key on the numeric keypad, that generates @kbd{M-@key{kp-8}}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1851
msgid ""
"Emacs provides a convenient method for binding the numeric keypad keys, "
"using the variables @code{keypad-setup}, @code{keypad-numlock-setup}, "
"@code{keypad-shifted-setup}, and @code{keypad-numlock-shifted-setup}.  These "
"can be found in the @samp{keyboard} customization group (@pxref{Easy "
"Customization}).  You can rebind the keys to perform other tasks, such as "
"issuing numeric prefix arguments."
msgstr ""

#. type: subsection
#: custom.texi.orig:1853
#, no-wrap
msgid "Named @acronym{ASCII} Control Characters"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1863
msgid ""
"@key{TAB}, @key{RET}, @key{BS}, @key{LFD}, @key{ESC} and @key{DEL} started "
"out as names for certain @acronym{ASCII} control characters, used so often "
"that they have special keys of their own.  For instance, @key{TAB} was "
"another name for @kbd{C-i}.  Later, users found it convenient to distinguish "
"in Emacs between these keys and the ``same'' control characters typed with "
"the @key{Ctrl} key.  Therefore, on most modern terminals, they are no longer "
"the same: @key{TAB} is different from @kbd{C-i}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1871
msgid ""
"Emacs can distinguish these two kinds of input if the keyboard does.  It "
"treats the ``special'' keys as function keys named @code{tab}, "
"@code{return}, @code{backspace}, @code{linefeed}, @code{escape}, and "
"@code{delete}.  These function keys translate automatically into the "
"corresponding @acronym{ASCII} characters @emph{if} they have no bindings of "
"their own.  As a result, neither users nor Lisp programs need to pay "
"attention to the distinction unless they care to."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1876
msgid ""
"If you do not want to distinguish between (for example) @key{TAB} and "
"@kbd{C-i}, make just one binding, for the @acronym{ASCII} character "
"@key{TAB} (octal code 011).  If you do want to distinguish, make one binding "
"for this @acronym{ASCII} character, and another for the ``function key'' "
"@code{tab}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1880
msgid ""
"With an ordinary @acronym{ASCII} terminal, there is no way to distinguish "
"between @key{TAB} and @kbd{C-i} (and likewise for other such pairs), because "
"the terminal sends the same character in both cases."
msgstr ""

#. type: subsection
#: custom.texi.orig:1882
#, no-wrap
msgid "Rebinding Mouse Buttons"
msgstr ""

#. type: cindex
#: custom.texi.orig:1883
#, no-wrap
msgid "mouse button events"
msgstr ""

#. type: cindex
#: custom.texi.orig:1884
#, no-wrap
msgid "rebinding mouse buttons"
msgstr ""

#. type: cindex
#: custom.texi.orig:1885
#, no-wrap
msgid "click events"
msgstr ""

#. type: cindex
#: custom.texi.orig:1886
#, no-wrap
msgid "drag events"
msgstr ""

#. type: cindex
#: custom.texi.orig:1887
#, no-wrap
msgid "down events"
msgstr ""

#. type: cindex
#: custom.texi.orig:1888
#, no-wrap
msgid "button down events"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1895
msgid ""
"Emacs uses Lisp symbols to designate mouse buttons, too.  The ordinary mouse "
"events in Emacs are @dfn{click} events; these happen when you press a button "
"and release it without moving the mouse.  You can also get @dfn{drag} "
"events, when you move the mouse while holding the button down.  Drag events "
"happen when you finally let go of the button."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1899
msgid ""
"The symbols for basic click events are @code{mouse-1} for the leftmost "
"button, @code{mouse-2} for the next, and so on.  Here is how you can "
"redefine the second mouse button to split the current window:"
msgstr ""

#. type: example
#: custom.texi.orig:1902
#, no-wrap
msgid "(global-set-key [mouse-2] 'split-window-below)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1907
msgid ""
"The symbols for drag events are similar, but have the prefix @samp{drag-} "
"before the word @samp{mouse}.  For example, dragging the first button "
"generates a @code{drag-mouse-1} event."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1913
msgid ""
"You can also define bindings for events that occur when a mouse button is "
"pressed down.  These events start with @samp{down-} instead of "
"@samp{drag-}.  Such events are generated only if they have key bindings.  "
"When you get a button-down event, a corresponding click or drag event will "
"always follow."
msgstr ""

#. type: cindex
#: custom.texi.orig:1914
#, no-wrap
msgid "double clicks"
msgstr ""

#. type: cindex
#: custom.texi.orig:1915
#, no-wrap
msgid "triple clicks"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1922
msgid ""
"If you wish, you can distinguish single, double, and triple clicks.  A "
"double click means clicking a mouse button twice in approximately the same "
"place.  The first click generates an ordinary click event.  The second "
"click, if it comes soon enough, generates a double-click event instead.  The "
"event type for a double-click event starts with @samp{double-}: for example, "
"@code{double-mouse-3}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1926
msgid ""
"This means that you can give a special meaning to the second click at the "
"same place, but it must act on the assumption that the ordinary single click "
"definition has run when the first click was received."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1932
msgid ""
"This constrains what you can do with double clicks, but user interface "
"designers say that this constraint ought to be followed in any case.  A "
"double click should do something similar to the single click, only ``more "
"so''.  The command for the double-click event should perform the extra work "
"for the double click."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1937
msgid ""
"If a double-click event has no binding, it changes to the corresponding "
"single-click event.  Thus, if you don't define a particular double click "
"specially, it executes the single-click command twice."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1948
msgid ""
"Emacs also supports triple-click events whose names start with "
"@samp{triple-}.  Emacs does not distinguish quadruple clicks as event types; "
"clicks beyond the third generate additional triple-click events.  However, "
"the full number of clicks is recorded in the event list, so if you know "
"Emacs Lisp you can distinguish if you really want to (@pxref{Click Events,,, "
"elisp, The Emacs Lisp Reference Manual}).  We don't recommend distinct "
"meanings for more than three clicks, but sometimes it is useful for "
"subsequent clicks to cycle through the same set of three meanings, so that "
"four clicks are equivalent to one click, five are equivalent to two, and six "
"are equivalent to three."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1955
msgid ""
"Emacs also records multiple presses in drag and button-down events.  For "
"example, when you press a button twice, then move the mouse while holding "
"the button, Emacs gets a @samp{double-drag-} event.  And at the moment when "
"you press it down for the second time, Emacs gets a @samp{double-down-} "
"event (which is ignored, like all button-down events, if it has no binding)."
msgstr ""

#. type: vindex
#: custom.texi.orig:1956
#, no-wrap
msgid "double-click-time"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1962
msgid ""
"The variable @code{double-click-time} specifies how much time can elapse "
"between clicks and still allow them to be grouped as a multiple click.  Its "
"value is in units of milliseconds.  If the value is @code{nil}, double "
"clicks are not detected at all.  If the value is @code{t}, then there is no "
"time limit.  The default is 500."
msgstr ""

#. type: vindex
#: custom.texi.orig:1963
#, no-wrap
msgid "double-click-fuzz"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1969
msgid ""
"The variable @code{double-click-fuzz} specifies how much the mouse can move "
"between clicks and still allow them to be grouped as a multiple click.  Its "
"value is in units of pixels on windowed displays and in units of 1/8 of a "
"character cell on text-mode terminals; the default is 3."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1974
msgid ""
"The symbols for mouse events also indicate the status of the modifier keys, "
"with the usual prefixes @samp{C-}, @samp{M-}, @samp{H-}, @samp{s-}, "
"@samp{A-} and @samp{S-}.  These always precede @samp{double-} or "
"@samp{triple-}, which always precede @samp{drag-} or @samp{down-}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:1982
msgid ""
"A frame includes areas that don't show text from the buffer, such as the "
"mode line and the scroll bar.  You can tell whether a mouse button comes "
"from a special area of the screen by means of dummy ``prefix keys''.  For "
"example, if you click the mouse in the mode line, you get the prefix key "
"@code{mode-line} before the ordinary mouse-button symbol.  Thus, here is how "
"to define the command for clicking the first button in a mode line to run "
"@code{scroll-up-command}:"
msgstr ""

#. type: example
#: custom.texi.orig:1985
#, no-wrap
msgid "(global-set-key [mode-line mouse-1] 'scroll-up-command)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:1989
msgid "Here is the complete list of these dummy prefix keys and their meanings:"
msgstr ""

#. type: item
#: custom.texi.orig:1991
#, no-wrap
msgid "mode-line"
msgstr ""

#. type: table
#: custom.texi.orig:1993
msgid "The mouse was in the mode line of a window."
msgstr ""

#. type: item
#: custom.texi.orig:1993
#, no-wrap
msgid "vertical-line"
msgstr ""

#. type: table
#: custom.texi.orig:1996
msgid ""
"The mouse was in the vertical line separating side-by-side windows.  (If you "
"use scroll bars, they appear in place of these vertical lines.)"
msgstr ""

#. type: item
#: custom.texi.orig:1996
#, no-wrap
msgid "vertical-scroll-bar"
msgstr ""

#. type: table
#: custom.texi.orig:1999
msgid ""
"The mouse was in a vertical scroll bar.  (This is the only kind of scroll "
"bar Emacs currently supports.)"
msgstr ""

#. type: item
#: custom.texi.orig:1999
#, no-wrap
msgid "menu-bar"
msgstr ""

#. type: table
#: custom.texi.orig:2001
msgid "The mouse was in the menu bar."
msgstr ""

#. type: item
#: custom.texi.orig:2001
#, no-wrap
msgid "header-line"
msgstr ""

#. type: table
#: custom.texi.orig:2003
msgid "The mouse was in a header line."
msgstr ""

#. type: item
#: custom.texi.orig:2004
#, no-wrap
msgid "horizontal-scroll-bar"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2012
msgid ""
"You can put more than one mouse button in a key sequence, but it isn't usual "
"to do so."
msgstr ""

#. type: subsection
#: custom.texi.orig:2014
#, no-wrap
msgid "Disabling Commands"
msgstr ""

#. type: cindex
#: custom.texi.orig:2015
#, no-wrap
msgid "disabled command"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2021
msgid ""
"Disabling a command means that invoking it interactively asks for "
"confirmation from the user.  The purpose of disabling a command is to "
"prevent users from executing it by accident; we do this for commands that "
"might be confusing to the uninitiated."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2031
msgid ""
"Attempting to invoke a disabled command interactively in Emacs displays a "
"window containing the command's name, its documentation, and some "
"instructions on what to do immediately; then Emacs asks for input saying "
"whether to execute the command as requested, enable it and execute it, or "
"cancel.  If you decide to enable the command, you must then answer another "
"question---whether to do this permanently, or just for the current session.  "
"(Enabling permanently works by automatically editing your initialization "
"file.)  You can also type @kbd{!} to enable @emph{all} commands, for the "
"current session only."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2035
msgid ""
"The direct mechanism for disabling a command is to put a non-@code{nil} "
"@code{disabled} property on the Lisp symbol for the command.  Here is the "
"Lisp program to do this:"
msgstr ""

#. type: example
#: custom.texi.orig:2038
#, no-wrap
msgid "(put 'delete-region 'disabled t)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2042
msgid ""
"If the value of the @code{disabled} property is a string, that string is "
"included in the message displayed when the command is used:"
msgstr ""

#. type: example
#: custom.texi.orig:2046
#, no-wrap
msgid ""
"(put 'delete-region 'disabled\n"
"     \"It's better to use `kill-region' instead.\\n\")\n"
msgstr ""

#. type: findex
#: custom.texi.orig:2048
#, no-wrap
msgid "disable-command"
msgstr ""

#. type: findex
#: custom.texi.orig:2049
#, no-wrap
msgid "enable-command"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2055
msgid ""
"You can make a command disabled either by editing the initialization file "
"directly, or with the command @kbd{M-x disable-command}, which edits the "
"initialization file for you.  Likewise, @kbd{M-x enable-command} edits the "
"initialization file to enable a command permanently.  @xref{Init File}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2060
msgid ""
"If Emacs was invoked with the @option{-q} or @option{--no-init-file} options "
"(@pxref{Initial Options}), it will not edit your initialization file.  Doing "
"so could lose information because Emacs has not read your initialization "
"file."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2065
msgid ""
"Whether a command is disabled is independent of what key is used to invoke "
"it; disabling also applies if the command is invoked using @kbd{M-x}.  "
"However, disabling a command has no effect on calling it as a function from "
"Lisp programs."
msgstr ""

#. type: section
#: custom.texi.orig:2067
#, no-wrap
msgid "The Emacs Initialization File"
msgstr ""

#. type: cindex
#: custom.texi.orig:2068
#, no-wrap
msgid "init file"
msgstr ""

#. type: cindex
#: custom.texi.orig:2069
#, no-wrap
msgid ".emacs file"
msgstr ""

#. type: cindex
#: custom.texi.orig:2070
#, no-wrap
msgid "~/.emacs file"
msgstr ""

#. type: cindex
#: custom.texi.orig:2071
#, no-wrap
msgid "Emacs initialization file"
msgstr ""

#. type: cindex
#: custom.texi.orig:2072
#, no-wrap
msgid "key rebinding, permanent"
msgstr ""

#. type: cindex
#: custom.texi.orig:2073
#, no-wrap
msgid "rebinding keys, permanently"
msgstr ""

#. type: cindex
#: custom.texi.orig:2074
#, no-wrap
msgid "startup (init file)"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2083
msgid ""
"When Emacs is started, it normally tries to load a Lisp program from an "
"@dfn{initialization file}, or @dfn{init file} for short.  This file, if it "
"exists, specifies how to initialize Emacs for you.  Emacs looks for your "
"init file using the filenames @file{~/.emacs}, @file{~/.emacs.el}, or "
"@file{~/.emacs.d/init.el}; you can choose to use any one of these three "
"names (@pxref{Find Init}).  Here, @file{~/} stands for your home directory."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2087
msgid ""
"You can use the command line switch @samp{-q} to prevent loading your init "
"file, and @samp{-u} (or @samp{--user}) to specify a different user's init "
"file (@pxref{Initial Options})."
msgstr ""

#. type: cindex
#: custom.texi.orig:2088
#, no-wrap
msgid "@file{default.el}, the default init file"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2097
msgid ""
"There can also be a @dfn{default init file}, which is the library named "
"@file{default.el}, found via the standard search path for libraries.  The "
"Emacs distribution contains no such library; your site may create one for "
"local customizations.  If this library exists, it is loaded whenever you "
"start Emacs (except when you specify @samp{-q}).  But your init file, if "
"any, is loaded first; if it sets @code{inhibit-default-init} non-@code{nil}, "
"then @file{default} is not loaded."
msgstr ""

#. type: cindex
#: custom.texi.orig:2098
#, no-wrap
msgid "site init file"
msgstr ""

#. type: cindex
#: custom.texi.orig:2099
#, no-wrap
msgid "@file{site-start.el}, the site startup file"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2109
msgid ""
"Your site may also have a @dfn{site startup file}; this is named "
"@file{site-start.el}, if it exists.  Like @file{default.el}, Emacs finds "
"this file via the standard search path for Lisp libraries.  Emacs loads this "
"library before it loads your init file.  To inhibit loading of this library, "
"use the option @samp{--no-site-file}.  @xref{Initial Options}.  We recommend "
"against using @file{site-start.el} for changes that some users may not "
"like.  It is better to put them in @file{default.el}, so that users can more "
"easily override them."
msgstr ""

#. type: cindex
#: custom.texi.orig:2110
#, no-wrap
msgid "site-lisp directories"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2117
msgid ""
"You can place @file{default.el} and @file{site-start.el} in any of the "
"directories which Emacs searches for Lisp libraries.  The variable "
"@code{load-path} (@pxref{Lisp Libraries}) specifies these directories.  Many "
"sites put these files in a subdirectory named @file{site-lisp} in the Emacs "
"installation directory, such as @file{/usr/local/share/emacs/site-lisp}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2126
msgid ""
"Byte-compiling your init file is not recommended (@pxref{Byte Compilation,, "
"Byte Compilation, elisp, the Emacs Lisp Reference Manual}).  It generally "
"does not speed up startup very much, and often leads to problems when you "
"forget to recompile the file.  A better solution is to use the Emacs server "
"to reduce the number of times you have to start Emacs (@pxref{Emacs "
"Server}).  If your init file defines many functions, consider moving them to "
"a separate (byte-compiled)  file that you load in your init file."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2129
msgid ""
"If you are going to write actual Emacs Lisp programs that go beyond minor "
"customization, you should read the @cite{Emacs Lisp Reference Manual}."
msgstr ""

#. type: ifnottex
#: custom.texi.orig:2132
msgid "@xref{Top, Emacs Lisp, Emacs Lisp, elisp, the Emacs Lisp Reference Manual}."
msgstr ""

#. type: node
#: custom.texi.orig:2140 custom.texi.orig:2142
#, no-wrap
msgid "Init Syntax"
msgstr ""

#. type: menuentry
#: custom.texi.orig:2140
msgid "Syntax of constants in Emacs Lisp."
msgstr ""

#. type: node
#: custom.texi.orig:2140 custom.texi.orig:2216
#, no-wrap
msgid "Init Examples"
msgstr ""

#. type: menuentry
#: custom.texi.orig:2140
msgid "How to do some things with an init file."
msgstr ""

#. type: node
#: custom.texi.orig:2140 custom.texi.orig:2442
#, no-wrap
msgid "Terminal Init"
msgstr ""

#. type: menuentry
#: custom.texi.orig:2140
msgid "Each terminal type can have an init file."
msgstr ""

#. type: node
#: custom.texi.orig:2140 custom.texi.orig:2482
#, no-wrap
msgid "Find Init"
msgstr ""

#. type: menuentry
#: custom.texi.orig:2140
msgid "How Emacs finds the init file."
msgstr ""

#. type: node
#: custom.texi.orig:2140 custom.texi.orig:2505
#, no-wrap
msgid "Init Non-ASCII"
msgstr ""

#. type: menuentry
#: custom.texi.orig:2140
msgid "Using non-@acronym{ASCII} characters in an init file."
msgstr ""

#. type: subsection
#: custom.texi.orig:2143
#, no-wrap
msgid "Init File Syntax"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2150
msgid ""
"The init file contains one or more Lisp expressions.  Each of these consists "
"of a function name followed by arguments, all surrounded by parentheses.  "
"For example, @code{(setq fill-column 60)} calls the function @code{setq} to "
"set the variable @code{fill-column} (@pxref{Filling}) to 60."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2160
msgid ""
"You can set any Lisp variable with @code{setq}, but with certain variables "
"@code{setq} won't do what you probably want in the @file{.emacs} file.  Some "
"variables automatically become buffer-local when set with @code{setq}; what "
"you want in @file{.emacs} is to set the default value, using "
"@code{setq-default}.  Some customizable minor mode variables do special "
"things to enable the mode when you set them with Customize, but ordinary "
"@code{setq} won't do that; to enable the mode in your @file{.emacs} file, "
"call the minor mode command.  The following section has examples of both of "
"these methods."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2165
msgid ""
"The second argument to @code{setq} is an expression for the new value of the "
"variable.  This can be a constant, a variable, or a function call "
"expression.  In @file{.emacs}, constants are used most of the time.  They "
"can be:"
msgstr ""

#. type: item
#: custom.texi.orig:2167
#, no-wrap
msgid "Numbers:"
msgstr ""

#. type: table
#: custom.texi.orig:2169
msgid "Numbers are written in decimal, with an optional initial minus sign."
msgstr ""

#. type: item
#: custom.texi.orig:2170
#, no-wrap
msgid "Strings:"
msgstr ""

#. type: cindex
#: custom.texi.orig:2171
#, no-wrap
msgid "Lisp string syntax"
msgstr ""

#. type: cindex
#: custom.texi.orig:2172
#, no-wrap
msgid "string syntax"
msgstr ""

#. type: table
#: custom.texi.orig:2175
msgid ""
"Lisp string syntax is the same as C string syntax with a few extra "
"features.  Use a double-quote character to begin and end a string constant."
msgstr ""

#. type: table
#: custom.texi.orig:2184
msgid ""
"In a string, you can include newlines and special characters literally.  But "
"often it is cleaner to use backslash sequences for them: @samp{\\n} for "
"newline, @samp{\\b} for backspace, @samp{\\r} for carriage return, "
"@samp{\\t} for tab, @samp{\\f} for formfeed (control-L), @samp{\\e} for "
"escape, @samp{\\\\} for a backslash, @samp{\\\"} for a double-quote, or "
"@samp{\\@var{ooo}} for the character whose octal code is @var{ooo}.  "
"Backslash and double-quote are the only characters for which backslash "
"sequences are mandatory."
msgstr ""

#. type: table
#: custom.texi.orig:2189
msgid ""
"@samp{\\C-} can be used as a prefix for a control character, as in "
"@samp{\\C-s} for @acronym{ASCII} control-S, and @samp{\\M-} can be used as a "
"prefix for a Meta character, as in @samp{\\M-a} for @kbd{@key{META}-A} or "
"@samp{\\M-\\C-a} for @kbd{@key{Ctrl}-@key{META}-A}."
msgstr ""

#. type: table
#: custom.texi.orig:2192
msgid ""
"@xref{Init Non-ASCII}, for information about including non-@acronym{ASCII} "
"in your init file."
msgstr ""

#. type: item
#: custom.texi.orig:2193
#, no-wrap
msgid "Characters:"
msgstr ""

#. type: cindex
#: custom.texi.orig:2194
#, no-wrap
msgid "Lisp character syntax"
msgstr ""

#. type: cindex
#: custom.texi.orig:2195
#, no-wrap
msgid "character syntax"
msgstr ""

#. type: table
#: custom.texi.orig:2201
msgid ""
"Lisp character constant syntax consists of a @samp{?} followed by either a "
"character or an escape sequence starting with @samp{\\}.  Examples: "
"@code{?x}, @code{?\\n}, @code{?\\\"}, @code{?\\)}.  Note that strings and "
"characters are not interchangeable in Lisp; some contexts require one and "
"some contexts require the other."
msgstr ""

#. type: table
#: custom.texi.orig:2204
msgid ""
"@xref{Init Non-ASCII}, for information about binding commands to keys which "
"send non-@acronym{ASCII} characters."
msgstr ""

#. type: item
#: custom.texi.orig:2205
#, no-wrap
msgid "True:"
msgstr ""

#. type: table
#: custom.texi.orig:2207
msgid "@code{t} stands for `true'."
msgstr ""

#. type: item
#: custom.texi.orig:2208
#, no-wrap
msgid "False:"
msgstr ""

#. type: table
#: custom.texi.orig:2210
msgid "@code{nil} stands for `false'."
msgstr ""

#. type: item
#: custom.texi.orig:2211
#, no-wrap
msgid "Other Lisp objects:"
msgstr ""

#. type: cindex
#: custom.texi.orig:2212
#, no-wrap
msgid "Lisp object syntax"
msgstr ""

#. type: table
#: custom.texi.orig:2214
msgid "Write a single-quote (@code{'}) followed by the Lisp object you want."
msgstr ""

#. type: subsection
#: custom.texi.orig:2217
#, no-wrap
msgid "Init File Examples"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2221
msgid ""
"Here are some examples of doing certain commonly desired things with Lisp "
"expressions:"
msgstr ""

#. type: itemize
#: custom.texi.orig:2227
msgid ""
"Add a directory to the variable @code{load-path}.  You can then put Lisp "
"libraries that are not included with Emacs in this directory, and load them "
"with @kbd{M-x load-library}.  @xref{Lisp Libraries}."
msgstr ""

#. type: example
#: custom.texi.orig:2230
#, no-wrap
msgid "(add-to-list 'load-path \"/path/to/lisp/libraries\")\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2235
msgid ""
"Make @key{TAB} in C mode just insert a tab if point is in the middle of a "
"line."
msgstr ""

#. type: example
#: custom.texi.orig:2238
#, no-wrap
msgid "(setq c-tab-always-indent nil)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2242
msgid ""
"Here we have a variable whose value is normally @code{t} for `true' and the "
"alternative is @code{nil} for `false'."
msgstr ""

#. type: itemize
#: custom.texi.orig:2246
msgid ""
"Make searches case sensitive by default (in all buffers that do not override "
"this)."
msgstr ""

#. type: example
#: custom.texi.orig:2249
#, no-wrap
msgid "(setq-default case-fold-search nil)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2256
msgid ""
"This sets the default value, which is effective in all buffers that do not "
"have local values for the variable (@pxref{Locals}).  Setting "
"@code{case-fold-search} with @code{setq} affects only the current buffer's "
"local value, which is probably not what you want to do in an init file."
msgstr ""

#. type: vindex
#: custom.texi.orig:2258
#, no-wrap
msgid "user-mail-address"
msgstr ""

#. type: itemize
#: custom.texi.orig:2260
msgid "Specify your own email address, if Emacs can't figure it out correctly."
msgstr ""

#. type: example
#: custom.texi.orig:2263
#, no-wrap
msgid "(setq user-mail-address \"cheney@@torture.gov\")\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2268
msgid ""
"Various Emacs packages, such as Message mode, consult "
"@code{user-mail-address} when they need to know your email address.  "
"@xref{Mail Headers}."
msgstr ""

#. type: itemize
#: custom.texi.orig:2271
msgid "Make Text mode the default mode for new buffers."
msgstr ""

#. type: example
#: custom.texi.orig:2274
#, no-wrap
msgid "(setq-default major-mode 'text-mode)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2280
msgid ""
"Note that @code{text-mode} is used because it is the command for entering "
"Text mode.  The single-quote before it makes the symbol a constant; "
"otherwise, @code{text-mode} would be treated as a variable name."
msgstr ""

#. type: itemize
#: custom.texi.orig:2285
msgid ""
"Set up defaults for the Latin-1 character set which supports most of the "
"languages of Western Europe."
msgstr ""

#. type: example
#: custom.texi.orig:2288
#, no-wrap
msgid "(set-language-environment \"Latin-1\")\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2293
msgid "Turn off Line Number mode, a global minor mode."
msgstr ""

#. type: example
#: custom.texi.orig:2296
#, no-wrap
msgid "(line-number-mode 0)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2302
msgid ""
"Turn on Auto Fill mode automatically in Text mode and related modes "
"(@pxref{Hooks})."
msgstr ""

#. type: itemize
#: custom.texi.orig:2310
msgid ""
"Load the installed Lisp library named @file{foo} (actually a file "
"@file{foo.elc} or @file{foo.el} in a standard Emacs directory)."
msgstr ""

#. type: example
#: custom.texi.orig:2313
#, no-wrap
msgid "(load \"foo\")\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2318
msgid ""
"When the argument to @code{load} is a relative file name, not starting with "
"@samp{/} or @samp{~}, @code{load} searches the directories in "
"@code{load-path} (@pxref{Lisp Libraries})."
msgstr ""

#. type: itemize
#: custom.texi.orig:2321
msgid "Load the compiled Lisp file @file{foo.elc} from your home directory."
msgstr ""

#. type: example
#: custom.texi.orig:2324
#, no-wrap
msgid "(load \"~/foo.elc\")\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2327
msgid "Here a full file name is used, so no searching is done."
msgstr ""

#. type: cindex
#: custom.texi.orig:2329
#, no-wrap
msgid "loading Lisp libraries automatically"
msgstr ""

#. type: cindex
#: custom.texi.orig:2330
#, no-wrap
msgid "autoload Lisp libraries"
msgstr ""

#. type: itemize
#: custom.texi.orig:2334
msgid ""
"Tell Emacs to find the definition for the function @code{myfunction} by "
"loading a Lisp library named @file{mypackage} (i.e., a file "
"@file{mypackage.elc} or @file{mypackage.el}):"
msgstr ""

#. type: example
#: custom.texi.orig:2337
#, no-wrap
msgid "(autoload 'myfunction \"mypackage\" \"Do what I say.\" t)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2348
msgid ""
"Here the string @code{\"Do what I say.\"} is the function's documentation "
"string.  You specify it in the @code{autoload} definition so it will be "
"available for help commands even when the package is not loaded.  The last "
"argument, @code{t}, indicates that this function is interactive; that is, it "
"can be invoked interactively by typing @kbd{M-x myfunction @key{RET}} or by "
"binding it to a key.  If the function is not interactive, omit the @code{t} "
"or use @code{nil}."
msgstr ""

#. type: itemize
#: custom.texi.orig:2352
msgid ""
"Rebind the key @kbd{C-x l} to run the function @code{make-symbolic-link} "
"(@pxref{Init Rebinding})."
msgstr ""

#. type: example
#: custom.texi.orig:2355
#, no-wrap
msgid "(global-set-key \"\\C-xl\" 'make-symbolic-link)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2358
msgid "or"
msgstr ""

#. type: example
#: custom.texi.orig:2361
#, no-wrap
msgid "(define-key global-map \"\\C-xl\" 'make-symbolic-link)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2365
msgid ""
"Note once again the single-quote used to refer to the symbol "
"@code{make-symbolic-link} instead of its value as a variable."
msgstr ""

#. type: itemize
#: custom.texi.orig:2368
msgid "Do the same thing for Lisp mode only."
msgstr ""

#. type: example
#: custom.texi.orig:2371
#, no-wrap
msgid "(define-key lisp-mode-map \"\\C-xl\" 'make-symbolic-link)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2376
msgid ""
"Redefine all keys which now run @code{next-line} in Fundamental mode so that "
"they run @code{forward-line} instead."
msgstr ""

#. type: findex
#: custom.texi.orig:2377
#, no-wrap
msgid "substitute-key-definition"
msgstr ""

#. type: example
#: custom.texi.orig:2381
#, no-wrap
msgid ""
"(substitute-key-definition 'next-line 'forward-line\n"
"                           global-map)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2385
msgid "Make @kbd{C-x C-v} undefined."
msgstr ""

#. type: example
#: custom.texi.orig:2388
#, no-wrap
msgid "(global-unset-key \"\\C-x\\C-v\")\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2394
msgid ""
"One reason to undefine a key is so that you can make it a prefix.  Simply "
"defining @kbd{C-x C-v @var{anything}} will make @kbd{C-x C-v} a prefix, but "
"@kbd{C-x C-v} must first be freed of its usual non-prefix definition."
msgstr ""

#. type: itemize
#: custom.texi.orig:2398
msgid ""
"Make @samp{$} have the syntax of punctuation in Text mode.  Note the use of "
"a character constant for @samp{$}."
msgstr ""

#. type: example
#: custom.texi.orig:2401
#, no-wrap
msgid "(modify-syntax-entry ?\\$ \".\" text-mode-syntax-table)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2405
msgid "Enable the use of the command @code{narrow-to-region} without confirmation."
msgstr ""

#. type: example
#: custom.texi.orig:2408
#, no-wrap
msgid "(put 'narrow-to-region 'disabled nil)\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2412
msgid "Adjusting the configuration to various platforms and Emacs versions."
msgstr ""

#. type: itemize
#: custom.texi.orig:2419
msgid ""
"Users typically want Emacs to behave the same on all systems, so the same "
"init file is right for all platforms.  However, sometimes it happens that a "
"function you use for customizing Emacs is not available on some platforms or "
"in older Emacs versions.  To deal with that situation, put the customization "
"inside a conditional that tests whether the function or facility is "
"available, like this:"
msgstr ""

#. type: example
#: custom.texi.orig:2423
#, no-wrap
msgid ""
"(if (fboundp 'blink-cursor-mode)\n"
"    (blink-cursor-mode 0))\n"
"\n"
msgstr ""

#. type: example
#: custom.texi.orig:2426
#, no-wrap
msgid ""
"(if (boundp 'coding-category-utf-8)\n"
"    (set-coding-priority '(coding-category-utf-8)))\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2431
msgid ""
"You can also simply disregard the errors that occur if the function is not "
"defined."
msgstr ""

#. type: example
#: custom.texi.orig:2436
#, no-wrap
msgid ""
"(condition case ()\n"
"    (set-face-background 'region \"grey75\")\n"
"  (error nil))\n"
msgstr ""

#. type: itemize
#: custom.texi.orig:2440
msgid ""
"A @code{setq} on a variable which does not exist is generally harmless, so "
"those do not need a conditional."
msgstr ""

#. type: subsection
#: custom.texi.orig:2443
#, no-wrap
msgid "Terminal-specific Initialization"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2452
msgid ""
"Each terminal type can have a Lisp library to be loaded into Emacs when it "
"is run on that type of terminal.  For a terminal type named @var{termtype}, "
"the library is called @file{term/@var{termtype}} and it is found by "
"searching the directories @code{load-path} as usual and trying the suffixes "
"@samp{.elc} and @samp{.el}.  Normally it appears in the subdirectory "
"@file{term} of the directory where most Emacs libraries are kept."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2461
msgid ""
"The usual purpose of the terminal-specific library is to map the escape "
"sequences used by the terminal's function keys onto more meaningful names, "
"using @code{input-decode-map} (or @code{function-key-map} before it).  See "
"the file @file{term/lk201.el} for an example of how this is done.  Many "
"function keys are mapped automatically according to the information in the "
"Termcap data base; the terminal-specific library needs to map only the "
"function keys that Termcap does not specify."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2467
msgid ""
"When the terminal type contains a hyphen, only the part of the name before "
"the first hyphen is significant in choosing the library name.  Thus, "
"terminal types @samp{aaa-48} and @samp{aaa-30-rv} both use the library "
"@file{term/aaa}.  The code in the library can use @code{(getenv \"TERM\")} "
"to find the full terminal type name."
msgstr ""

#. type: vindex
#: custom.texi.orig:2468
#, no-wrap
msgid "term-file-prefix"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2473
msgid ""
"The library's name is constructed by concatenating the value of the variable "
"@code{term-file-prefix} and the terminal type.  Your @file{.emacs} file can "
"prevent the loading of the terminal-specific library by setting "
"@code{term-file-prefix} to @code{nil}."
msgstr ""

#. type: vindex
#: custom.texi.orig:2474
#, no-wrap
msgid "tty-setup-hook"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2481
msgid ""
"Emacs runs the hook @code{tty-setup-hook} at the end of initialization, "
"after both your @file{.emacs} file and any terminal-specific library have "
"been read in.  Add hook functions to this hook if you wish to override part "
"of any of the terminal-specific libraries and to define initializations for "
"terminals that do not have a library.  @xref{Hooks}."
msgstr ""

#. type: subsection
#: custom.texi.orig:2483
#, no-wrap
msgid "How Emacs Finds Your Init File"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2491
msgid ""
"Normally Emacs uses the environment variable @env{HOME} (@pxref{General "
"Variables, HOME}) to find @file{.emacs}; that's what @samp{~} means in a "
"file name.  If @file{.emacs} is not found inside @file{~/} (nor "
"@file{.emacs.el}), Emacs looks for @file{~/.emacs.d/init.el} (which, like "
"@file{~/.emacs.el}, can be byte-compiled)."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2496
msgid ""
"However, if you run Emacs from a shell started by @code{su}, Emacs tries to "
"find your own @file{.emacs}, not that of the user you are currently "
"pretending to be.  The idea is that you should get your own editor "
"customizations even if you are running as the super user."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2504
msgid ""
"More precisely, Emacs first determines which user's init file to use.  It "
"gets your user name from the environment variables @env{LOGNAME} and "
"@env{USER}; if neither of those exists, it uses effective user-ID@.  If that "
"user name matches the real user-ID, then Emacs uses @env{HOME}; otherwise, "
"it looks up the home directory corresponding to that user name in the "
"system's data base of users."
msgstr ""

#. type: subsection
#: custom.texi.orig:2506
#, no-wrap
msgid "Non-@acronym{ASCII} Characters in Init Files"
msgstr ""

#. type: cindex
#: custom.texi.orig:2507
#, no-wrap
msgid "international characters in @file{.emacs}"
msgstr ""

#. type: cindex
#: custom.texi.orig:2508
#, no-wrap
msgid "non-@acronym{ASCII} characters in @file{.emacs}"
msgstr ""

#. type: cindex
#: custom.texi.orig:2509
#, no-wrap
msgid "non-@acronym{ASCII} keys, binding"
msgstr ""

#. type: cindex
#: custom.texi.orig:2510
#, no-wrap
msgid "rebinding non-@acronym{ASCII} keys"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2515
msgid ""
"Language and coding systems may cause problems if your init file contains "
"non-@acronym{ASCII} characters, such as accented letters, in strings or key "
"bindings."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2526
msgid ""
"If you want to use non-@acronym{ASCII} characters in your init file, you "
"should put a @w{@samp{-*-coding: @var{coding-system}-*-}} tag on the first "
"line of the init file, and specify a coding system that supports the "
"character(s) in question.  @xref{Recognize Coding}.  This is because the "
"defaults for decoding non-@acronym{ASCII} text might not yet be set up by "
"the time Emacs reads those parts of your init file which use such strings, "
"possibly leading Emacs to decode those strings incorrectly.  You should then "
"avoid adding Emacs Lisp code that modifies the coding system in other ways, "
"such as calls to @code{set-language-environment}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2531
msgid ""
"To bind non-@acronym{ASCII} keys, you must use a vector (@pxref{Init "
"Rebinding}).  The string syntax cannot be used, since the "
"non-@acronym{ASCII} characters will be interpreted as meta keys.  For "
"instance:"
msgstr ""

#. type: example
#: custom.texi.orig:2534
#, no-wrap
msgid "(global-set-key [?@var{char}] 'some-function)\n"
msgstr ""

#. type: Plain text
#: custom.texi.orig:2538
msgid "Type @kbd{C-q}, followed by the key you want to bind, to insert @var{char}."
msgstr ""

#. type: Plain text
#: custom.texi.orig:2545
msgid ""
"@strong{Warning:} if you change the keyboard encoding, or change between "
"multibyte and unibyte mode, or anything that would alter which code "
"@kbd{C-q} would insert for that character, this key binding may stop "
"working.  It is therefore advisable to use one and only one coding system, "
"for your init file as well as the files you edit.  For example, don't mix "
"the @samp{latin-1} and @samp{latin-9} coding systems."
msgstr ""
