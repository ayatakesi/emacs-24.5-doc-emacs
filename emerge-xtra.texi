@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 2004-2015 Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@c
@c This file is included either in emacs-xtra.texi (when producing the
@c printed version) or in the main Emacs manual (for the on-line version).
@node Emerge
@section Merging Files with Emerge
@cindex Emerge
@cindex merging files

  行き違いの指示を受けて、同じプログラムを異なる2つの方向に修正してしまうのは、プログラマーにとって珍しいことではありません。この混乱を正常な状態に戻すには、2つのバージョンをマージする必要があります。Emergeはこれを簡単にします。ファイルを比較する他の方法については、
@iftex
@ref{Comparing Files,,, emacs, the Emacs Manual}、
@end iftex
@ifnottex
@ref{Comparing Files}、
@end ifnottex
および@ref{Top,, Ediff, ediff, The Ediff Manual}を参照してください。

@menu
* Overview of Emerge::       Emergeを開始する方法と、基本的な概念。
* Submodes of Emerge::       Fastモード vs. Editモード。Skip 
                               PrefersモードとAuto Advanceモード。
* State of Difference::      各相違にたいして、AまたはBの状態を指定することによりマージを行う。
* Merge Commands::           相違を選択したり、相違の状態を変更するコマンドなど。
* Exiting Emerge::           マージを終えた後に行うこと。
* Combining in Emerge::      相違にたいする両方の候補を維持する方法。
* Fine Points of Emerge::    その他の問題。
@end menu

@node Overview of Emerge
@subsection Overview of Emerge

  Emergeを開始するには、以下の4つのコマンドの1つを実行します:

@table @kbd
@item M-x emerge-files
@findex emerge-files
指定した2つのファイルをマージします。

@item M-x emerge-files-with-ancestor
@findex emerge-files-with-ancestor
共通の祖先(ancestor)を参照して、指定した2つのファイルをマージします。

@item M-x emerge-buffers
@findex emerge-buffers
2つのバッファーをマージします。

@item M-x emerge-buffers-with-ancestor
@findex emerge-buffers-with-ancestor
第3のバッファーにある共通の祖先を参照して、2つのバッファーをマージします。
@end table

@cindex merge buffer (Emerge)
@cindex A and B buffers (Emerge)
  Emergeコマンドは2つのファイルまたはバッファーを比較して、3つのバッファーにそれ表示します。最初の2つは入力テキスト(@dfn{Aバッファー}と@dfn{Bバッファー})で、残りの1つ(@dfn{マージバッファー})はどこにマージが行われたかを表示します。マージバッファーは相違だけではなく、マージされたテキストをすべて表示します。2つの入力テキストが異なる場所では、どちらをマージバッファーに含めるか選択できます。

  既存のバッファーから入力を得るEmergeコマンドは、そのバッファーがナローされている場合は、バッファーのアクセス可能な部分だけを使用します。
@iftex
@ref{Narrowing,,, emacs, the Emacs Manual}を参照してください。
@end iftex
@ifnottex
@ref{Narrowing}を参照してください。
@end ifnottex


  2つのマージされるテキストの元となる、共通の祖先となるバージョンが利用可能な場合は、Emergeはどちらが正しい候補かを推測するために、それを使用することができます。一方のカレントバージョンが祖先に一致する場合、Emergeはもう一方のカレントバージョンが、マージされたバージョンに残すべき、意図した変更であると仮定します。共通の祖先となるテキストを指定したい場合は、@samp{with-ancestor}がつくコマンドを使用します。これらのコマンドは3つのファイルまたはバッファーの名前
--- バージョンA、バージョンB、そして共通の祖先の名前を読み取ります。

  比較が終了してバッファーの準備ができた後、対話的なマージが開始されます。マージバッファーで特別な@dfn{マージコマンド}をタイプすることにより、マージを制御できます(@ref{Merge
Commands}を参照してください)。入力テキストの相違それぞれにたいして、どちらを残すか、または両方編集するか選択することができます。

  マージバッファーはこれらの選択を行うために、Emergeモードという特別なメジャーモードを使用します。しかし、そのバッファーでは通常のEmacsコマンドで編集することもできます。

  常にEmergeの注目は、@dfn{選択された}相違と呼ばれる、特定の相違に焦点を置きます。この相違は、3つのバッファーで以下のようにマークされます:

@example
vvvvvvvvvvvvvvvvvvvv
@var{text that differs}
^^^^^^^^^^^^^^^^^^^^
@end example

@noindent
Emergeはすべての相違に順番に番号をふり、モードラインには選択された相違の番号が常に表示されます。

  マージバッファーは通常、バージョンAのテキストで開始されます。しかしバージョンAの相違が共通の祖先と一致する場合、その相違の初期値にはバージョンBが優先されます。

  マージバッファーを抜けるとき、Emergeはマージされたテキストを残します。このとき、@kbd{C-x
C-w}で、それをファイルに保存できます。@code{emerge-files}または@code{emerge-files-with-ancestor}に数引数を与えた場合、ミニバッファーを使用して、出力するファイル名を読み取ります(これは、このコマンドが読み取るファイル名の最後のファイル名です)。その後Emergeから抜けると、マージされたテキストを出力ファイルに保存します。

  通常、Emergeコマンドは終了するとき出力バッファーを、そのバッファーのファイルに保存します。Emergeを@kbd{C-]}で中断した場合、Emergeコマンドは出力バッファーを保存しませんが、もし保存したいときは自分で保存することができます。

@node Submodes of Emerge
@subsection Submodes of Emerge

  マージコマンドに与える2つのモード ---
FastモードとEditモードを選択することができます。Fastモードでは、基本的なマージコマンドは1文字ですが、通常のEmacsコマンドは利用不可です。これはマージコマンドだけを使いたいときは便利です。Editモードでは、すべてのマージコマンドはプレフィクスキー@kbd{C-c
C-c}で始まり、通常のEmacsコマンドも利用可能です。これによりマージバッファーで編集することができますが、Emerge操作は遅くなります。

  @kbd{e}でEditモード、@kbd{C-c C-c
f}でFastモードに切り替わります。モードラインにはEditモードおよびFastモードは、@samp{E}と@samp{F}で示されます。

  Emergeは、特定のマージコマンドがどのように機能するかに影響を与える、2つの追加的なサブモード --- Auto AdvanceモードとSkip
Prefersモードがあります。

  Auto
Advanceモードが効力をもつ場合、@kbd{a}または@kbd{b}コマンドで次の相違に移動します。これは候補を単に選んでいくだけで、素早くマージすることができます。Auto
Advanceモードの場合、モードラインに@samp{A}が示されます。

  Skip
Prefersモードが効力をもつ場合、@kbd{n}および@kbd{p}コマンドは、状態が``prefer-A''と``prefer-B''の相違をスキップします(@ref{State
of Difference}を参照してください)。したがって、どちらのバージョンも``正しい''と推定できない相違だけを見ていくことができます。Skip
Prefersモードの場合、モードラインに@samp{S}が示されます。このモードは祖先がある場合にだけ適しています。

@findex emerge-auto-advance
@findex emerge-skip-prefers
  Auto Advanceをセットまたはクリアーするには、コマンド@kbd{s a}
(@code{emerge-auto-advance})を使用します。Skip Prefersモードをセットまたはクリアーするには、@kbd{s s}
(@code{emerge-skip-prefers})を使用します。これらのコマンドは、正の引数の場合はモードをオンにして、負または0の引数のときはモードをオフにし、引数がないときはモードのオン・オフを切り替えます。

@node State of Difference
@subsection State of a Difference

  マージバッファーでは、相違は文字@samp{v}および@samp{^}のラインでマークされます。各相違は、以下の7つの状態のうち1つをもちます:

@table @asis
@item A
相違にはバージョンAが表示されています。@kbd{a}コマンドは常にこの状態を生成します。モードラインには@samp{A}が示されます。

@item B
相違にはバージョンBが表示されています。@kbd{b}コマンドは常にこの状態を生成します。モードラインには@samp{B}が示されます。

@item default-A
@itemx default-B
選択を行っていないので、相違にはデフォルトとしてAまたはBの状態が表示されています。すべての相違はdefault-A状態で開始されます(したがってマージバッファーはAバッファーのコピーとなります)が、例外として、もう一方のほうが``preferred(好ましい)''場合を除きます(以下参照)。

相違を選択したときに、状態はdefault-Aまたはdefault-Bから、AまたはBに遷移します。したがって、選択された相違が状態default-Aまたはdefault-Bをもつことはなく、これらの状態がモードラインに表示されることはありません。

コマンド@kbd{d a}は、デフォルトの状態にdefault-Aを選択し、@kbd{d
b}はdefault-Bを選択します。これらで選択されるデフォルトは、まだ1度も選択していないか、好ましい候補をもたないすべての相違に適用されます。順番に移動しながらマージを行っている場合、一度も選択されていない相違とは、選択された相違の後のすべての相違です。したがって順番に移動しながら、セクションの間で@kbd{d
a}と@kbd{d
b}を使い分けることにより、マージバッファーのあるセクションにたいしてはバージョンAをデフォルトに、他のセクションにはバージョンBを効果的に選択できます。

@item prefer-A
@itemx prefer-B
相違には、状態Aまたは状態Bが表示されています。なぜなら、それが@dfn{preferred(好ましい)}からです。これはまだ明示的な選択を行なっていないが、一方の候補は共通の祖先と同じなので、もう一方の候補の方が正しく見えることを意味します。したがってAバッファーが共通の祖先と同じ場合、バージョンBの方が好ましいといえます。なぜなら、それは実際に変更されているからです。

これら2つの状態は、モードラインに@samp{A*}と@samp{B*}で表示されます。

@item combined
@kbd{x c}または@kbd{x C}コマンドの結果として、相違は状態Aおよび状態Bが混合されたものを表示しています。

相違が1度この状態になると、@kbd{a}コマンドと@kbd{b}コマンドは、数引数を与えないかぎり何もしません。

モードラインには状態@samp{comb}が表示されます。
@end table

@node Merge Commands
@subsection Merge Commands

  以下はFastモードのマージコマンドです。Editモードでは前に@kbd{C-c C-c}をつけてください:

@table @kbd
@item p
前の相違を選択します。

@item n
次の相違を選択します。

@item a
この相違にバージョンAを選択します。

@item b
この相違にバージョンBを選択します。

@item C-u @var{n} j
番号@var{n}の相違を選択します。

@item .
@c [Does not work in the A or B buffer?]
@c You can use this command in the merge buffer or in the A or B buffer.
ポイントを含む相違を選択します。

@item q
終了 --- マージを終了します。

@item C-]
中断 --- マージをexitして出力を保存しません。

@item f
Fastモードに移行します(Editモードでは実際には@kbd{C-c C-c f}です)。

@item e
Editモードに移行します。

@item l
3つのウィンドウにたいして、(@kbd{C-l}のように)再センタリングをします。引数を指定すると、デフォルトの3ウィンドウ表示を再構築します。

@item -
数引数の一部を指定します。

@item @var{digit}
これも数引数の一部を指定します。

@item d a
ポイント位置からマージバッファーの下方へ、バージョンAをデフォルトとして選択します。

@item d b
ポイント位置からマージバッファーの下方へ、バージョンBをデフォルトとして選択します。

@item c a
この相違のバージョンAを、killリングにコピーします。

@item c b
この相違のバージョンBを、killリングにコピーします。

@item i a
この相違のバージョンAを、ポイント位置に挿入します。

@item i b
この相違のバージョンBを、ポイント位置に挿入します。

@item m
相違の周囲に、ポイントとマークを配します。

@item ^
3つのウィンドウすべてを、(@kbd{M-v}のように)下にスクロールします。

@item v
3つのウィンドウすべてを、(@kbd{C-v}のように)上にスクロールします。

@item <
3つのウィンドウすべてを、(@kbd{C-x <}のように)左にスクロールします。

@item >
3つのウィンドウすべてを、(@kbd{C-x >}のように)右にスクロールします。

@item |
3つのウィンドウすべての水平スクロールをリセットします。

@item x 1
マージウィンドウを1行に縮めます(フルサイズに復元するには@kbd{C-u l}を使用します)。

@item x c
この相違の2つのバージョンを合成します(@ref{Combining in Emerge}を参照してください)。

@item x f
Emergeが操作しているファイルまたはバッファーの名前を、Helpウィンドウに表示します(ウィンドウを復元するには@kbd{C-u
l}を使用します)。

@item x j
この相違を次の相違に結合します(@kbd{C-u x j}は前の相違に結合します)。

@item x s
この相違を2つの相違に分割します。このコマンドを使う前に、3つのバッファーで、相違を分割したい位置にポイントを配してください。

@item x t
相違の上部と下部にある、同じ行を取り除きます。このような行は、バージョンAとバージョンBが同じでも、それらが祖先となるバージョンと異なる場合に発生します。
@end table

@node Exiting Emerge
@subsection Exiting Emerge

  @kbd{q}コマンド(@code{emerge-quit})はマージを終了して、指定されている場合は結果を出力ファイルに保存します。これはバッファーAおよびBの内容を正しいものに復元するか、もしそれらがEmergeにより作成され、何も変更されていないときはkillします。これによりマージバッファーでEmergeコマンドは使えなくなります。なぜならそれらを実行することにより、さまざまなバッファーの内容にダメージを与えるからです。

  @kbd{C-]}はマージを中断します。これは出力ファイルに書き込まずに終了することを意味します。出力ファイルを指定していない場合、マージの終了と中断に実際の違いはありません。

  Emergeコマンドが他のLispプログラムから呼び出された場合、正常終了の戻り値は@code{t}で、中断(abort)のときは@code{nil}です。

@node Combining in Emerge
@subsection Combining the Two Versions

  特定の相違にたいして両方の候補を使いたいときがあります。これを行なうにはマージバッファーを以下のように編集する@kbd{x c}を使用します:

@example
@group
#ifdef NEW
@var{version from B buffer}
#else /* not NEW */
@var{version from A buffer}
#endif /* not NEW */
@end group
@end example

@noindent
@vindex emerge-combine-versions-template
この例はCプリプロセッサー条件が2つのバージョン候補を区切っていますが、区切りに使う文字列は、変数@code{emerge-combine-versions-template}に選択した文字列をセットすることにより、指定することができます。この文字列で@samp{%a}はバージョンA、@samp{%b}はバージョンBです。上記の結果を生成するデフォルトのセッティングは、以下のようなものです:

@example
@group
"#ifdef NEW\n%b#else /* not NEW */\n%a#endif /* not NEW */\n"
@end group
@end example

@node Fine Points of Emerge
@subsection Fine Points of Emerge

  マージの間、AおよびBバッファーを自分で編集してはいけません。Emergeは一時的にこれらを変更しますが、最終的には元の内容に戻します。

  複数のマージを一度に行うことができます ---
ただし、ある1つのバッファーを複数のマージの入力として使用しないでください。なぜなら、これらのバッファーに加えられる一時的な変更が、1つのバッファーに加えられてしまうからです。

  ファイル全体を比較する必要があるため、Emergeの開始には時間がかかることもあります。Emacsは、@code{diff}が終了するまで他のことを行なえません。入力ファイルが大きいときはバックグラウンドで比較を行なうように、誰かがEmergeを変更するかもしれません
--- そうなればEmergeがコマンドを受け付けられるようになるまでの間、Emacsで他の作業を続けることができるでしょう。

@vindex emerge-startup-hook
  マージをセットアップした後、Emergeはフック@code{emerge-startup-hook}を実行します。
@iftex
@ref{Hooks,,, emacs, the Emacs Manual}を参照してください。
@end iftex
@ifnottex
@ref{Hooks}を参照してください。
@end ifnottex
