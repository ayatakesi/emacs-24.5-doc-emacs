@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2000-2015 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Keyboard Macros
@chapter Keyboard Macros
@cindex defining keyboard macros
@cindex keyboard macro

  このチャプターでは一連の編集コマンドを記録して、後で簡単に繰り返す方法を説明します。

  @dfn{キーボードマクロ(keyboard
macro)}とは、Emacsのユーザーにより定義される、一連のキー入力からなるコマンドです。たとえば@kbd{C-n M-d
C-d}を40回繰り返しタイプしていることに気付いたとしましょう。@kbd{C-n M-d
C-d}を行うキーボードマクロを定義して、それを39回以上繰り返すことにより、作業スピードをあげることができます。

  キーボードマクロは、コマンドを実行・記録することにより定義します。違う言い方をすると、キーボードマクロの定義では、初回はマクロの定義が実行されるということです。この方法により、頭だけで考えるのではなく、コマンドの影響を目で見ることができます。コマンド列の入力を終了して定義を終了するときは、キーボードマクロが定義されるとともに、入力したコマンド列の影響としてマクロが1回実行されたことになります。その後はマクロを呼び出すことにより、コマンド列全体を実行することができます。

  キーボードマクロは、LispではなくEmacsコマンド言語(Emacs command
language)で記述されている点が、通常のEmacsコマンドと異なります。しかしEmacsコマンド言語は、高度なことや一般的なことを記述するプログラム言語として、充分にパワフルとはいえません。そのような事項には、Lispを使わなければなりません。

@menu
* Basic Keyboard Macro::     キーボードマクロの定義と実行。
* Keyboard Macro Ring::      以前のキーボードマクロが保存される場所。
* Keyboard Macro Counter::   マクロに増加する番号を挿入する。
* Keyboard Macro Query::     毎回違うことを行うマクロの作成。
* Save Keyboard Macro::      キーボードマクロの命名とファイルへの保存。
* Edit Keyboard Macro::      キーボードマクロを編集するには。
* Keyboard Macro Step-Edit::  キーボードマクロのインタラクティブな実行と編集。
@end menu

@node Basic Keyboard Macro
@section Basic Use

@table @kbd
@item @key{F3}
キーボードマクロの定義を開始します(@code{kmacro-start-macro-or-insert-counter})。
@item @key{F4}
キーボードマクロを定義しているときは定義を終了します。それ以外の場合は一番最近のキーボードマクロを実行します(@code{kmacro-end-or-call-macro})。
@item C-u @key{F3}
最後のキーボードマクロを再実行してから、キーをマクロ定義に追加します。
@item C-u C-u @key{F3}
最後のキーボードマクロを再実行せずに、キーをマクロ定義に追加します。
@item C-x C-k r
リージョンの中の各行の行頭にたいして、最後のキーボードマクロを実行します(@code{apply-macro-to-region-lines})。
@end table

@kindex F3
@kindex F4
@findex kmacro-start-macro-or-insert-counter
@findex kmacro-end-or-call-macro
@findex kmacro-end-and-call-macro
  キーボードマクロの定義を開始するには、@key{F3}をタイプします。それからはキーを入力して実行を続けますが、それは同時にマクロ定義の一部になります。その間は、モードラインに@samp{Def}が表示されて、マクロの定義中であることを示します。終了するときは@key{F4}
(@code{kmacro-end-or-call-macro})をタイプして、定義を終了します。たとえば、

@example
@key{F3} M-f foo @key{F4}
@end example

@noindent
これは1単語前方に移動してから、@samp{foo}を挿入するマクロを定義します。@key{F3}と@key{F4}は、マクロの一部とはならないことに注意してください。

  マクロを定義した後は、@key{F4}でそれを呼び出すことができます。上記の例では、それは@kbd{M-f foo}
againをタイプしたのと同じ効果をもちます(@key{F4}コマンドの2つの役割に注意してください。これはマクロを定義しているときはマクロの定義を終了し、そうでないときは最後のマクロを呼び出します)。@key{F4}に数引数@samp{n}を与えることもできます。これはマクロを@samp{n}回呼び出すことを意味します。引数に0を与えると、エラーになるか、@kbd{C-g}(MS-DOSでは@kbd{C-@key{BREAK}})をタイプするまで、マクロを永久に繰り返します。

  上記の例は、キーボードマクロを使った便利なトリックをデモンストレイトする例です。テキストの一定間隔の位置にたいして繰り返し操作を行いたいときは、マクロの一部に移動コマンドを含めます。この例ではマクロの繰り返しにより、連続する単語の後ろに文字列@samp{foo}を挿入していきます。

  キーボードマクロの定義を終了した後でも、@kbd{C-u
@key{F3}}をタイプすることにより、マクロの定義にキーストロークを追加できます。これは@key{F3}に続けてマクロの定義を再タイプするのと同じです。結果として、そのマクロの以前の定義が再実行されることになります。変数@code{kmacro-execute-before-append}を@code{nil}に変更すると、既存のマクロにキーストロークが追加されるまでは実行されません(デフォルトは@code{t})。最後に実行したキーボードマクロを再実行することなく、定義の最後にキーストロークを追加するには、@kbd{C-u
C-u @key{F3}}をタイプしてください。

  コマンドがミニバッファーから引数を読みとる場合、ミニバッファーにたいする入力は、コマンドと一緒にマクロの一部となります。したがってマクロを再生すると、そのコマンドの引数は入力されたのと同じになります。たとえば、

@example
@key{F3} C-a C-k C-x b foo @key{RET} C-y C-x b @key{RET} @key{F4}
@end example

@noindent
これはカレント行をkillして、バッファー@samp{foo}にそれをyankした後、元のバッファーに戻ります。

  ほとんどのキーボードコマンドは、キーボードマクロの定義で普通に機能しますが、いくつか例外があります。@kbd{C-g}
(@code{keyboard-quit})をタイプすると、キーボードマクロの定義が終了します。@kbd{C-M-c}
(@code{exit-recursive-edit})は信頼できません。これはマクロの中で再帰編集(recursive
edit)を開始したときは期待通りに再帰編集から抜け出しますが、キーボードマクロの呼び出し前に開始された再帰編集を抜け出すには、キーボードマクロからも抜け出す必要があります。同様に、マウスイベントもキーボードマクロで使用できますが。信頼はできません。マクロによりマウスイベントが再生されるときは、マクロを定義したときのマウス位置が使用されます。この効果は予測が困難です。

@findex apply-macro-to-region-lines
@kindex C-x C-k r
  コマンド@kbd{C-x C-k r}
(@code{apply-macro-to-region-lines})は、リージョン内の各行のにたいして、最後に定義されたキーボードマクロを繰り返します。これは1行ずつポイントをリージョン内の行頭に移動してからマクロを実行します。

@kindex C-x (
@kindex C-x )
@kindex C-x e
@findex kmacro-start-macro
@findex kmacro-end-macro
  上記で説明した@key{F3}と@key{F4}に加えて、Emacsはキーボードマクロを定義したり実行するための、古いキーバインドもサポートします。@key{F3}と同様ににマクロ定義を開始するには、@kbd{C-x
(}
(@code{kmacro-start-macro})とタイプします。プレフィクス引数を指定すると、最後のキーボードマクロの定義に追加します。マクロ定義を終了するには@kbd{C-x
)} (@code{kmacro-end-macro})とタイプします。一番最近のマクロを実行するには、@kbd{C-x e}
(@code{kmacro-end-and-call-macro})とタイプします。マクロ定義中に@kbd{C-x
e}を入力すると、マクロ定義を終了してからすぐに実行されます。@kbd{C-x
e}をタイプした後すぐに@key{e}をタイプすることにより、そのマクロを１回以上繰り返すことができます。@key{F4}と同様、@kbd{C-x
e}には繰り返し回数を引数指定できます。

  @kbd{C-x
)}に、繰り返し回数を引数として与えることができます。これはマクロを定義した後、すぐにマクロが繰り返されることを意味します。マクロの定義は、定義することによりマクロが実行されるので、最初の1回として数えられます。したがって@kbd{C-u
4 C-x )}は、マクロを3回すぐに追加実行します。

@node Keyboard Macro Ring
@section The Keyboard Macro Ring

  すべての定義されたキーボードマクロは、@dfn{キーボードマクロリング(keyboard macro
ring)}に記録されます。キーボードマクロリングはすべてのバッファーで共有され、1つだけしかありません。

@table @kbd
@item C-x C-k C-k
リングの先頭にあるキーボードマクロを実行します(@code{kmacro-end-or-call-macro-repeat})。
@item C-x C-k C-n
キーボードマクロリングを、次のマクロ(古く定義されたもの)にローテートします(@code{kmacro-cycle-ring-next})。
@item C-x C-k C-p
キーボードマクロリングを前のマクロ(新しく定義されたもの)にローテートします(@code{kmacro-cycle-ring-previous})。
@end table

  キーボードマクロリングを操作するすべてのコマンドは、同じ@kbd{C-x
C-k}を使います。これらのコマンドでは、すぐ後にコマンドを実行して繰り返す場合には、互いに@kbd{C-x
C-k}プレフィクスを必要としません。たとえば、

@example
C-x C-k C-p C-p C-k C-k C-k C-n C-n C-k C-p C-k C-d
@end example

@noindent
これは、キーボードマクロリングを``2つ前''のマクロが先頭にくるようにローテートして、3回実行します。次にキーボードマクロリングをローテートして、元は先頭だったマクロを先頭に戻して１回実行します。次にキーボードマクロリングを``1つ前''のマクロが先頭にくるようにローテートして、それを実行します。そして最後にそれを削除しています。

@findex kmacro-end-or-call-macro-repeat
@kindex C-x C-k C-k
  コマンド@kbd{C-x C-k C-k}
(@code{kmacro-end-or-call-macro-repeat})は、マクロリングの先頭にあるキーボードマクロを実行します。もう一度すぐに@kbd{C-k}をタイプすると、マクロを繰り返すことができます。すぐに@kbd{C-n}か@kbd{C-p}をタイプすれば、マクロリングをローテートすることができます。

  キーボードマクロを定義しているとき、@kbd{C-x C-k
C-k}は@key{F4}と同様に振る舞いますが、すぐ後にタイプされた場合は異なります。このセクションで説明するほとんどのキーバインドは、@kbd{C-x
C-k}プレフィクスが必要ない場合があります。たとえば、すぐに@kbd{C-k}をタイプした場合は、マクロを再実行します。

@findex kmacro-cycle-ring-next
@kindex C-x C-k C-n
@findex kmacro-cycle-ring-previous
@kindex C-x C-k C-p
  コマンド@kbd{C-x C-k C-n} (@code{kmacro-cycle-ring-next})および@kbd{C-x C-k C-p}
(@code{kmacro-cycle-ring-previous})は、マクロリングをローテートして、次または前のキーボードマクロをリングの先頭に移動させます。新しく先頭となったマクロの定義は、エコーエリアに表示されます。お望みのマクロが先頭にくるまで、すぐに@kbd{C-n}または@kbd{C-p}を繰り返しタイプすれば、マクロリングのローテートを続けることができます。新しくマクロリングの先頭にきたマクロを実行するには、単に@kbd{C-k}をタイプします。

  Emacsはマクロリングの先頭を、``最後に定義されたキーボードマクロ''として扱います。たとえば、そのマクロは@key{F4}で実行でき、@kbd{C-x
C-k n}で名前をつけることができます。

@vindex kmacro-ring-max
  キーボードマクロリングに格納できるマクロの最大数は、カスタマイズ可能な変数@code{kmacro-ring-max}により決定されます。

@node Keyboard Macro Counter
@section The Keyboard Macro Counter

  キーボードマクロには、それぞれカウンターが割り当てられています。これはマクロの定義を開始したとき0に初期化されます。カウンターの数値をバッファーに挿入することもできます。カウンターの数値は、マクロが呼び出された回数にもとづきます。バッファーにカウンターの値が挿入される度に、カウンターは増加します。

@table @kbd
@item @key{F3}
キーボードマクロの定義では、キーボードマクロカウンターの値をバッファーに挿入します(@code{kmacro-start-macro-or-insert-counter})。
@item C-x C-k C-i
キーボードマクロカウンターの値をバッファーに挿入します(@code{kmacro-insert-counter})。
@item C-x C-k C-c
キーボードマクロカウンターをセットします(@code{kmacro-set-counter})。
@item C-x C-k C-a
プレフィクス引数をキーボードマクロカウンターに加えます(@code{kmacro-add-counter})。
@item C-x C-k C-f
挿入するキーボードマクロカウンターの書式を指定します(@code{kmacro-set-format})。
@end table

@findex kmacro-insert-counter
@kindex C-x C-k C-i
  キーボードマクロを定義しているとき、コマンド@key{F3}
(@code{kmacro-start-macro-or-insert-counter})は、キーボードマクロカウンターの現在の値をバッファーに挿入して、カウンターを1増加させます(マクロを定義していないとき、@key{F3}はマクロの定義を開始します。@ref{Basic
Keyboard
Macro}を参照してください)。異なる増分の指定には、数引数を使うことができます。単にプレフィクス@kbd{C-u}を指定すると、それは0増加させるのと同じです。つまり現在のカウンターの値を挿入しますが、カウンターの値は変化しません。

  例として数字が振られたリストを構築するために、キーボードマクロカウンターを使う方法を見てみましょう。以下のキーシーケンスを考えてください:

@example
@key{F3} C-a @key{F3} . @key{SPC} @key{F4}
@end example

@noindent
マクロ定義の一部として、現在の行の先頭に文字列@samp{0.
}が挿入されます。バッファーの他の箇所で@key{F4}でマクロを呼び出すと、その行の先頭に文字列@samp{1.
}が挿入されます。その後に呼び出すと@samp{2. }、@samp{3. }、...が挿入されます。

  コマンド@kbd{C-x C-k C-i}
(@code{kmacro-insert-counter})は、@key{F3}と同様のことを行いますが、これはキーボードマクロの定義外でも使用できます。キーボードマクロが定義中でなく実行もされていない場合、これはキーボードマクロリングの先頭にあるマクロのカウンター値を挿入および増加します。

@findex kmacro-set-counter
@kindex C-x C-k C-c
  コマンド@kbd{C-x C-k C-c}
(@code{kmacro-set-counter})は現在のマクロカウンターを、数引数の値にセットします。マクロ内で使用した場合、マクロ実行ごとに処理します。プレフィクス引数に単に@kbd{C-u}を指定した場合、マクロの現在の繰り返し実行おいて、カウンターが最初にもっていた値に、カウンターをリセットします(この繰り返しにおける増加を取り消します)。

@findex kmacro-add-counter
@kindex C-x C-k C-a
  コマンド@kbd{C-x C-k C-a}
(@code{kmacro-add-counter})は、プレフィクス引数を現在のマクロカウンターに加えます。単に@kbd{C-u}を引数に指定すると、任意のキーボードマクロにより最後に挿入された値に、カウンターをリセットします(通常これを使うときは、最後の挿入は同じマクロによる同じカウンターです)。

@findex kmacro-set-format
@kindex C-x C-k C-f
  コマンド@kbd{C-x C-k C-f}
(@code{kmacro-set-format})は、マクロカウンターを挿入するときに使われる書式の入力を求めます。デフォルトの書式は@samp{%d}で、これはパディングなしの10進数字が挿入されることを意味します。ミニバッファーに何も入力せずにexitすることにより、このデフォルト書式にリセットできます。@code{format}関数(この関数はさらに1つの整数の引数をとります)が受け入れる書式文字列を指定できます(@ref{Formatting
Strings,,, elisp, The Emacs Lisp Reference
Manual}を参照してください)。ミニバッファーに書式文字列を入力するときは、書式文字列をダブルクォーテーションで括らないでください。

  キーボードマクロの定義および実行がされていないときにこのコマンドを使うと、新しい書式はそれ以降のマクロ定義すべてに影響を及ぼします。既存のマクロは、それが定義されたときの書式を使いつづけます。キーボードマクロ定義中に書式をセットすると、そのマクロが定義されている箇所に影響を及ぼしますが、それ以降のマクロには影響を与えません。マクロの実行においては、そのマクロ定義の時点の書式が使われます。マクロの実行中にマクロ書式を変更すると、これは定義中における書式の変更と同様、それ以降のマクロに影響を与えません。

  @kbd{C-x C-k C-f}によりセットされた書式は、レジスターに格納された数字の挿入には影響しません。

  マクロの繰り返しにおいてレジスターを増加してカウンターとして使う場合、これはキーボードマクロカウンターと同じことです。@ref{Number
Registers}を参照してください。大抵の用途では、キーボードマクロカウンターを使う方が単純です。

@node Keyboard Macro Query
@section Executing Macros with Variations

  キーボードマクロで、@code{query-replace}のように変更を行うか応答を求める効果を作ることができます。

@table @kbd
@item C-x q
マクロ実行中にこの箇所に到達すると確認を求めます(@code{kbd-macro-query})。
@end table

@kindex C-x q
@findex kbd-macro-query
  マクロ定義中に問い合わせを行いたい箇所で@kbd{C-x q}をタイプします。マクロ定義中は@kbd{C-x
q}は何も行いませんが、後でマクロを実行すると@kbd{C-x q}は実行を続けるか対話的に確認を求めます。

  以下は@kbd{C-x q}にたいする有効な応答です:

@table @asis
@item @key{SPC} (または@kbd{y})
キーボードマクロの実行を続けます。

@item @key{DEL} (または@kbd{n})
マクロのこの繰り返しでの残りの部分をスキップして、次の繰り返しを開始します。

@item @key{RET} (または@kbd{q})
マクロのこの繰り返しでの残りの部分をスキップして、これ以上の繰り返しを取り消します。

@item @kbd{C-r}
マクロの一部ではない編集を行うことができる、再帰編集レベル(recursive editing
level)に入ります。@kbd{C-M-c}を使って再帰編集を抜けると、キーボードマクロを続行するか再び確認を求められます。ここで@key{SPC}をタイプすると、マクロ定義の残りの部分が実行されます。マクロの残りの部分が期待したように動作するためにポイントとテキストを残すのは、ユーザーの責任です。
@end table

  @kbd{C-x q}に数引数を指定した@kbd{C-u C-x
q}は、完全に異なる関数を実行します。これはマクロ定義中およびマクロ実行中の両方で、キーボード入力を読みとる再帰編集に入ります。定義中のときは、再帰編集の中で行った編集はマクロの一部とはなりません。マクロ実行中は、再帰編集により各繰り返しにおいて特別な編集を行う機会が与えられます。@ref{Recursive
Edit}を参照してください。

@node Save Keyboard Macro
@section Naming and Saving Keyboard Macros

@table @kbd
@item C-x C-k n
一番最近定義したキーボードマクロに、名前(持続期間はEmacsセッション中)を与えます(@code{kmacro-name-last-macro})。
@item C-x C-k b
一番最近定義したキーボードマクロを、キーにバインド(持続期間はEmacsセッション中)します(@code{kmacro-bind-to-key})。
@item M-x insert-kbd-macro
キーボードマクロの定義を、Lispコードとしてバッファーに挿入します。
@end table

@cindex saving keyboard macros
@findex kmacro-name-last-macro
@kindex C-x C-k n
  キーボードマクロを後で使うために保存するには、@kbd{C-x C-k n}
(@code{kmacro-name-last-macro})を使って、それに名前を与えることができます。これはミニバッファーを使って名前を引数として読み取り、最後のキーボードマクロの現在の定義を実行するための、名前を定義します(後でこのマクロの定義を追加した場合、その名前のマクロ定義は変更されません)。マクロ名はLispシンボルで、@kbd{M-x}で呼び出せ、@code{global-set-key}でキーにバインドできる有効な名前をつけます。キーボードマクロ以外に定義されている名前を指定すると、エラーメッセージが表示され何も変更はされません。

@cindex binding keyboard macros
@findex kmacro-bind-to-key
@kindex C-x C-k b
  @kbd{C-x C-k b}
(@code{kmacro-bind-to-key})の後に、バインドしたいキーシーケンスを続けることにより、最後のキーボードマクロ(の現在の定義)をキーにバインドすることもできます。グローバルキーマップ(global
keymap)の任意のキーシーケンスにバインドできますが、大部分のキーシーケンスはすでに他のバインドをもっているので、キーシーケンスの選択は慎重に行う必要があります。任意のキーマップで既存のバインドをもつキーシーケンスにバインドしようとすると、既存のバインドを置き換える前に確認を求めます。

  既存のバインドの上書きに起因する問題を避けるには、キーシーケンス@kbd{C-x C-k 0}から@kbd{C-x C-k 9}と、@kbd{C-x
C-k A}から@kbd{C-x C-k
Z}を使います。これらのキーシーケンスは、キーボードマクロのバインド用に予約されています。これらのキーシーケンスにバインドするには、キーシーケンス全体ではなく数字か文字だけをタイプすればバインドできます。たとえば、

@example
C-x C-k b 4
@end example

@noindent
これは最後のキーボードマクロをキーシーケンス@kbd{C-x C-k 4}にバインドします。

@findex insert-kbd-macro
  1度マクロにコマンド名をつければ、その定義をファイルに保存できます。それは他の編集セッションでも使用できます。最初に定義を保存したいファイルをvisitします。次に以下のコマンドを使います:

@example
M-x insert-kbd-macro @key{RET} @var{macroname} @key{RET}
@end example

@noindent
これは後で実行するとき、今と同じ定義のマクロとなるLispコードをバッファーに挿入します(これを行うためにLispコードを理解する必要はありません。なぜならあなたのかわりに@code{insert-kbd-macro}がLispコードを記述するからです)。それからファイルを保存します。後でそのファイルを@code{load-file}
(@ref{Lisp Libraries}を参照してください)でロードできます。initファイル@file{~/.emacs} (@ref{Init
File}を参照してください)に保存すれば、そのマクロはEmacsを実行する度に定義されます。

  @code{insert-kbd-macro}に数引数を与えると、(もしあれば)@var{macroname}にバインドしたキーを記録するためのLispコードが追加されるので、ファイルをロードしたとき同じキーにマクロが割り当てられます。

@node Edit Keyboard Macro
@section Editing a Keyboard Macro

@table @kbd
@item C-x C-k C-e
最後に定義されたキーボードマクロを編集します(@code{kmacro-edit-macro})。
@item C-x C-k e @var{name} @key{RET}
以前に定義されたキーボードマクロ@var{name}を編集します(@code{edit-kbd-macro})。
@item C-x C-k l
過去300回分のキーストロークを、キーボードマクロとして編集します(@code{kmacro-edit-lossage})。
@end table

@findex kmacro-edit-macro
@kindex C-x C-k C-e
@kindex C-x C-k RET
  @kbd{C-x C-k C-e}または@kbd{C-x C-k @key{RET}}
(@code{kmacro-edit-macro})をとタイプして、最後のキーボードマクロを編集できます。これはマクロ定義をバッファーに整形出力して、それを編集するために特化したモードに入ります。そのバッファーで@kbd{C-h
m}をタイプすると、マクロを編集する方法の詳細が表示されます。編集を終了するには@kbd{C-c C-c}をタイプしてください。

@findex edit-kbd-macro
@kindex C-x C-k e
  名前をつけたキーボードマクロ、またはキーにバインドしたマクロは、@kbd{C-x C-k e}
(@code{edit-kbd-macro})とタイプして編集できます。このコマンドに続けてそのマクロを呼び出すときのキー入力(@kbd{C-x
e}、@kbd{M-x @var{name}}、またはその他のキーシーケンス)を入力します。

@findex kmacro-edit-lossage
@kindex C-x C-k l
  @kbd{C-x C-k l}
(@code{kmacro-edit-lossage})とタイプして、最近300回のキーストロークをマクロとして編集できます。

@node Keyboard Macro Step-Edit
@section Stepwise Editing a Keyboard Macro

@findex kmacro-step-edit-macro
@kindex C-x C-k SPC
  @kbd{C-x C-k @key{SPC}}
(@code{kmacro-step-edit-macro})とタイプして、最後のキーボードマクロをインタラクティブに1コマンドずつ再生および編集できます。マクロを@kbd{q}または@kbd{C-g}で終了しなければ、編集されたマクロでマクロリングの最後のマクロを置き換えます。

  このマクロ編集機能は、最初(または次)に実行されるコマンドと、それにたいする操作を尋ねるプロンプトをミニバッファーに表示します。@kbd{?}を入力すれば、オプションの要約を表示できます。以下のオプションが利用可能です:

@itemize @bullet{}
@item
@key{SPC}および@kbd{y}は、現在のコマンドを実行して、キーボードマクロの次のコマンドに進みます。
@item
@kbd{n}、@kbd{d}、および@key{DEL}は、現在のコマンドをスキップして削除します。
@item
@kbd{f}は、キーボードマクロの実行において現在のコマンドをスキップしますが、マクロから削除はしません。
@item
@key{TAB}は、現在のコマンドと、現在のコマンドのすぐ後に続く同じようなコマンドを実行します。たとえば連続する文字の挿入(@code{self-insert-command}に相当)には、@key{TAB}が使われます。
@item
@kbd{c}は、(これ以上の編集は行わずに)キーボードマクロの最後まで実行を続けます。実行が正常に終了した場合、編集されたマクロで元のキーボードマクロを置き換えます。
@item
@kbd{C-k}は、キーボードマクロの残りの部分をスキップおよび削除して、ステップ編集を終了し、編集されたマクロで元のキーボードマクロを置き換えます。
@item
@kbd{q}および@kbd{C-g}は、キーボードマクロのステップ編集を取り消して、キーボードマクロにたいして行った編集を破棄します。
@item
@kbd{i @var{key}@dots{}
C-j}は、一連のキーシーケンス(最後の@kbd{C-j}は含まれません)を読み取って実行し、キーボードマクロの現在のコマンドの前に挿入します(現在のコマンドはスキップしません)。
@item
@kbd{I
@var{key}@dots{}}は、1つのキーシーケンスを読み取って実行し、キーボードマクロの現在のコマンドの前に挿入します(現在のコマンドはスキップしません)。
@item
@kbd{r @var{key}@dots{}
C-j}は、一連のキーシーケンス(最後の@kbd{C-j}は含まれません)を読み取って実行し、現在のコマンドをそれで置き換えます(実行は挿入されたキーシーケンスの次に移ります)。
@item
@kbd{R
@var{key}@dots{}}は、1つのキーシーケンスを読み取って実行し、キーボードマクロの現在のコマンドを、そのキーシーケンスで置き換えます(実行は挿入されたキーシーケンスの次に移ります)。
@item
@kbd{a @var{key}@dots{}
C-j}は、現在のコマンドを実行してから、一連のキーシーケンス(最後の@kbd{C-j}は含まれません)を読み取って実行してから、それをキーボードマクロの現在のコマンドの後ろに挿入します(実行は現在のコマンドと、その後ろに挿入されたキーシーケンスの次に移ります)。
@item
@kbd{A @var{key}@dots{}
C-j}は、キーボードマクロの残りのコマンドを実行してから、一連のキーシーケンス(最後の@kbd{C-j}は含まれません)を読み取って実行し、それらをキーボードマクロの最後に追加します。それからステップ編集を終了し、編集されたマクロで元の元のキーボードマクロを置き換えます。
@end itemize
