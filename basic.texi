@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2000-2015 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Basic
@chapter Basic Editing Commands

@kindex C-h t
@findex help-with-tutorial
  ここではテキストの入力、修正、ファイルへの保存といった基本操作について説明します。これらに接するのが初めてなら、learn-by-doing(行ってみることで学ぶ)形式のチュートリアルをやってみることを提案します。チュートリアルを行うには@kbd{C-h
t} (@code{help-with-tutorial})とタイプしてください。

@menu


* Inserting Text::           単純に入力してテキストを挿入する。
* Moving Point::             何か修正したい場所にカーソルを移動する。
* Erasing::                  テキストの削除とkill。
* Basic Undo::               テキストの最近の変更を取り消す。
* Files: Basic Files.        ファイルの読み込み、作成、保存。
* Help: Basic Help.          文字が何を行うか尋ねる。
* Blank Lines::              空行の作成と削除
* Continuation Lines::       Emacsがスクリーンに収まりきれない行を表示する方法。
* Position Info::            ポイントのある場所の行と列は何か?
* Arguments::                コマンドをN回繰り返すための数引数。
* Repeating::                素早く前のコマンドを繰り返す。
@end menu

@node Inserting Text
@section Inserting Text

@cindex insertion
@cindex graphic characters
  普通の@dfn{グラフィック文字(graphic character)}(例
@samp{a}、@samp{B}、@samp{3}、@samp{=})は、対応するキーをタイプして挿入することができます。これによりバッファーのポイント位置に文字が追加されます。挿入によりポイントは前方に移動するので、ポイントは挿入された文字の直後になります。@ref{Point}を参照してください。

@kindex RET
@kindex C-j
@cindex newline
@c @findex electric-indent-just-newline
  行を終了して新しい行を開始するには@key{RET}(@code{newline})を入力します(キーボードで@key{RET}キーは、@key{Return}や@key{Enter}というラベルがついているかもしれませんが、このマニュアルでは@key{RET}と呼ぶことにします)。このコマンドは改行文字をバッファーに挿入してから、メジャーモードに基づきインデント(@ref{Indentation}を参照してください)を行います。ポイントが行末にある場合には、新しく空行を作成してから新しい行をインデントします。もしポイントが行の途中にある場合、行はその位置で分割されます。自動インデントをオフにするには、Electric
Indentモード(@ref{Indent
Convenience}を参照してください)を無効にするか、自動インデントを行わず改行だけを挿入する@kbd{C-j}を入力します。

  マニュアルの後ろで説明しますが、@dfn{マイナーモード(minor
modes)}を利用することにより、Emacsが挿入を処理する方法を変更できます。たとえばAuto
Fillモードというマイナーモードは行が長くなりすぎたとき自動的に行を分割します(@pxref{Filling})。Overwrite
modeというマイナーモードは、既存の文字を右方に押しやるかわりに、既存の文字を置き換え(上書き)ます。@ref{Minor
Modes}を参照してください。

@cindex quoting
@kindex C-q
@findex quoted-insert
  対応するキーを押して挿入できるのはグラフィック文字だけです。他のキーは編集コマンドとして動作し、文字自体の挿入はしません。たとえば、デフォルトでは@key{DEL}は、コマンド@code{delete-backward-char}を実行します(違うコマンドにバインドされているモードもあります)。このキーはリテラルの@samp{DEL}(@acronym{ASCII}の文字コード127)を入力する訳ではありません。

  非グラフィック文字や、キーボードがサポートしていない文字を挿入するには、最初に@kbd{C-q}
(@code{quoted-insert})で文字を@dfn{クォート(quote)}します。@kbd{C-q}の使い方は2つあります:

@itemize @bullet
@item
@kbd{C-q}に続けて非グラフィック文字(@kbd{C-g}でさえも)をタイプすると、その文字が挿入されます。たとえば@kbd{C-q
@key{DEL}}は、リテラルの@samp{DEL}文字を挿入します。

@item
@kbd{C-q}に続けて8進文字のシーケンスを入力すると、8進の文字コードに対応する文字が挿入されます。任意の8進数字を使うことができます。非8進数字により入力は終了します。もし終了文字が@key{RET}の場合、@key{RET}は入力の終了だけに用いられます。他の非8進文字は入力を終了させてから、通常の入力として扱われます。つまり@kbd{C-q
1 0 1 B}は@samp{AB}を挿入します。

8進数字での入力は、通常の非バイナリーのOverwriteモードでは無効になっています。それにより上書きすることなく数字を挿入する便利な方法が提供されます。
@end itemize

@vindex read-quoted-char-radix
@noindent
8進のかわりに10進や16進を使うには、変数@code{read-quoted-char-radix}に、10や16をセットします。もし基数が16の場合、@kbd{a}から@kbd{f}は文字コードの一部として扱われます。大文字小文字は区別されません。

@findex insert-char
@kindex C-x 8 RET
@cindex Unicode characters, inserting
@cindex insert Unicode character
@cindex characters, inserting by name or code-point
  かわりにコマンド@kbd{C-x 8 @key{RET}}
(@code{insert-char})を使うこともできます。これはミニバッファーを使って、Unicode名かコードポイント(code-point)の入力を求めます。もし名前を入力する時、コマンドが補完機能を提供します(@ref{Completion}を参照してください)。コードポイントを入力する場合、それは16進(Unicodeの規約による)、または指定した基数の数字(例
@code{#o23072} (octal); @ref{Integer Basics,,, elisp, The Emacs Lisp
Reference
Manual}を参照してください)であるべきです。このコマンドは対応する文字をバッファーに挿入します。たとえば以下の2つはどちらも無限記号(infinity
sign: Unicode code-point @code{U+221E})を挿入します。

@example
@kbd{C-x 8 @key{RET} infinity @key{RET}}
@kbd{C-x 8 @key{RET} 221e @key{RET}}
@end example

  @kbd{C-q}または@kbd{C-x 8
@key{RET}}への数引数は、文字のコピーを何個挿入するかを指定します(@ref{Arguments}を参照してください)。

@node Moving Point
@section Changing the Location of Point

@cindex arrow keys
@cindex moving point
@cindex movement
@cindex cursor motion
@cindex moving the cursor
  文字の挿入以上のことを行うには、ポイントを移動する方法について知る必要があります(@ref{Point}を参照してください)。キーボードのコマンド@kbd{C-f}、@kbd{C-b}、@kbd{C-n}、@kbd{C-p}は、それぞれ右・左・下・上にポイントを移動します。ほとんどのキーボードにある矢印キー
---
@key{RIGHT}、@key{LEFT}、@key{DOWN}、@key{UP}でもポイントを移動できます。しかし多くのEmacsユーザーは矢印キーより、コントロールキーのほうが速いと考えています。なぜなら矢印キーを押すためにそれらが配置されている領域に手を動かす必要があるからです。

  ポイントを移動したい場所でマウスの左ボタンをクリックしてもポイントを移動できます。Emacsは、さらに洗練された方法でポイントを移動する、さまざまなキーボードコマンドを提供します。

@table @kbd

@item C-f
@kindex C-f
@findex forward-char
1文字前方(forward)に移動します (@code{forward-char})。

@item @key{RIGHT}
@kindex RIGHT
@findex right-char
@vindex visual-order-cursor-movement
@cindex cursor, visual-order motion
このコマンド(@code{right-char})は、@kbd{C-f}と同じように振る舞いますが1つ例外があります。もしアラビア語のようにright-to-left(右から左に記述する)な文書を編集する場合、現在のパラグラフが右から左で記述するパラグラフなら、@emph{後方}に移動することになるのです。@ref{Bidirectional
Editing}を参照してください。もし@code{visual-order-cursor-movement}が非@code{nil}の場合、このコマンドは現在のスクリーン位置の右の文字に移動し、前または次のスクリーン行に適切に移動します。これはその場所の双方向コンテキストに依存するので、多くのバッファーのポイントがあいまいになる可能性があることに注意してください。

@item C-b
@kindex C-b
@findex backward-char
1文字後方(backward)に移動します (@code{backward-char})。

@item @key{LEFT}
@kindex LEFT
@findex left-char
このコマンド(@code{left-char})は、@kbd{C-b}と同じように振る舞いますが1つ例外があります。もしアラビア語のようにright-to-leftの文書を編集する場合、現在のパラグラフが右から左で記述するパラグラフなら、@emph{前方}に移動することになるのです。@ref{Bidirectional
Editing}を参照してください。もし@code{visual-order-cursor-movement}が非@code{nil}の場合、このコマンドは現在のスクリーン位置の左の文字に移動し、前または次のスクリーン行に適切に移動します。

@item C-n
@itemx @key{DOWN}
@kindex C-n
@kindex DOWN
@findex next-line
スクリーンに表示された行で1行下に移動します(@code{next-line})。このコマンドは横方向の位置を変更しないよう試みます。そのため行の途中でコマンドを開始すると、次の行の途中に移動することになります。

@item C-p
@itemx @key{UP}
@kindex C-p
@kindex UP
@findex previous-line
スクリーンに表示された行で1行上に移動します(@code{previous-line})。このコマンドは@kbd{C-n}と同様、行内の位置を保ちます。

@item C-a
@itemx @key{Home}
@kindex C-a
@kindex HOME key
@findex move-beginning-of-line
行の先頭に移動します(@code{move-beginning-of-line})。

@item C-e
@itemx @key{End}
@kindex C-e
@kindex END key
@findex move-end-of-line
行の最後に移動します(@code{move-end-of-line})。

@item M-f
@kindex M-f
@findex forward-word
1単語前方に移動します(@code{forward-word})。

@item C-@key{RIGHT}
@itemx M-@key{RIGHT}
@kindex C-RIGHT
@kindex M-RIGHT
@findex right-word
このコマンド(@code{right-word})は@kbd{M-f}と同様に振る舞います。例外は現在のパラグラフがright-to-leftの場合、1語@emph{後方}に移動することになります。@ref{Bidirectional
Editing}を参照してください。

@item M-b
@kindex M-b
@findex backward-word
1単語後方に移動します(@code{backward-word})。

@item C-@key{LEFT}
@itemx M-@key{LEFT}
@kindex C-LEFT
@kindex M-LEFT
@findex left-word
このコマンド(@code{left-word})は@kbd{M-b}と同様に振る舞います。例外は現在のパラグラフがright-to-leftの場合、1語@emph{前方}に移動することになります。@ref{Bidirectional
Editing}を参照してください。

@item M-r
@kindex M-r
@findex move-to-window-line-top-bottom
スクリーン上のテキストを移動させることなく、ポイントの位置をウィンドウ上で中央にもっとも近いテキスト行の左端に移動します。連続して呼び出すと、最上行の左端、最下行の左端へと循環的にポイントを移動します(@code{move-to-window-line-top-bottom})。

数引数はスクリーンの行の何行目にポイントを移動するか指定します。数値はウィンドウの最上行から数えた行数です(0は最上行を意味します)。負の引数は最下行から数えた行数です(@minus{}1は最下行を意味します。数引数については詳細は、@ref{Arguments}を参照してください。

@item M-<
@kindex M-<
@findex beginning-of-buffer
バッファーの先頭に移動します(@code{beginning-of-buffer})。数引数@var{n}が与えられた場合、最上行から@var{n}/10に移動します。

@item M->
@kindex M->
@findex end-of-buffer
バッファーの最後に移動します(@code{end-of-buffer})。

@item C-v
@itemx @key{PageDown}
@itemx @key{next}
画面を1画面前方にスクロールします。もし必要ならポイントをスクリーン上の位置に移動します(@code{scroll-up-command})。@ref{Scrolling}を参照してください。

@item M-v
@itemx @key{PageUp}
@itemx @key{prior}
画面を1画面後方にスクロールします。もし必要ならポイントをスクリーン上の位置に移動します(@code{scroll-down-command})。@ref{Scrolling}を参照してください。

@item M-g c
@kindex M-g c
@findex goto-char
数値@var{n}を読み取り、ポイントをバッファー位置@var{n}に移動します。1を指定するとバッファーの先頭に移動します。

@item M-g M-g
@itemx M-g g
@kindex M-g M-g
@kindex M-g g
@findex goto-line
数値@var{n}を読み、ポイントをバッファーの先頭から@var{n}行目に移動します。行に1を指定するとバッファーの先頭に移動します。もしポイントがバッファーの数字の上または直後にある場合、その数が@var{n}のデフォルトになります。ミニバッファーで単に@key{RET}を押すと、その数が使われます。数値のプレフィクス引数で@var{n}を指定して@kbd{M-g
M-g}に与えることもできます。単にプレフィクス引数を与えた場合の@kbd{M-g M-g}の動作については、@ref{Select
Buffer}を参照してください。

@item M-g @key{TAB}
@kindex M-g TAB
@findex move-to-column
数値@var{n}を読み取り、現在行の@var{n}列目に移動します。列0は最左列です。プレフィクス引数とともに呼び出された場合、引数で指定された数の列に移動します。

@item C-x C-n
@kindex C-x C-n
@findex set-goal-column
現在ポイントがある列を@kbd{C-n}や@kbd{C-p}の@dfn{半恒久的な目標列(semipermanent goal
column)}として使用します。目標列が有効な場合、これらのコマンドで垂直に移動すると、その列もしくはできる限り近い列に移動しようと試みます。目標列はキャンセルされるまで有効です。

@item C-u C-x C-n
目標列をキャンセルします。それ以降の@kbd{C-n}や@kbd{C-p}は通常どおり水平位置を保とうと試みます。
@end table

@vindex line-move-visual
  バッファーのテキストがウィンドウの幅より長い場合、通常Emacsは2行以上の@dfn{スクリーン行(screen
lines)}で表示します。便宜上、@kbd{C-n}と@kbd{C-p}そして@kbd{@key{down}}と@kbd{@key{up}}も、同様にスクリーン行にしたがってポイントを移動します。これらのコマンドを@dfn{論理行(logical
lines)}(たとえばバッファーのテキスト行)にしたがって移動させるには、@code{line-move-visual}に@code{nil}をセットします。そうすると論理行が複数のスクリーン行となるような場合、カーソルは追加されたスクリーン行をスキップします。詳細は@ref{Continuation
Lines}を参照してください。@code{line-move-visual}などの変数をセットする方法については、@ref{Variables}を参照してください。

  @kbd{C-n}や@kbd{C-p}と異なり、ほとんどのEmacsコマンドは@emph{論理的}な行に作用します。たとえば@kbd{C-a}
(@code{move-beginning-of-line})や@kbd{C-e}
(@code{move-end-of-line})は、論理行の先頭もしくは最後に移動します。@kbd{C-n}や@kbd{C-p}のようにスクリーン行に作用するコマンドの場合、わたしたちはそれを示すようにします。

@vindex track-eol
  @code{line-move-visual}が@code{nil}の場合、変数@code{track-eol}にも非@code{nil}値をセットできます。そうすると論理行の行末で@kbd{C-n}や@kbd{C-p}を開始すると、次の論理行の行末に移動します。通常@code{track-eol}は@code{nil}です。

@vindex next-line-add-newlines
  通常@kbd{C-n}をバッファーの最後の行で使用した場合、バッファーの最後でストップします。しかし変数@code{next-line-add-newlines}に非@code{nil}値をセットした場合、バッファーの最後の行で@kbd{C-n}を押すと、行を追加してその行に移動します。

@node Erasing
@section Erasing Text
@cindex killing characters and lines
@cindex deleting characters and lines
@cindex erasing characters and lines

@table @kbd
@item @key{DEL}
@itemx @key{BACKSPACE}
ポイントの前の文字、またはリージョンがアクティブのときはリージョンを削除します(@code{delete-backward-char})。

@item @key{Delete}
ポイントの後の文字、またはリージョンがアクティブのときはリージョンを削除します(@code{delete-forward-char})。

@item C-d
ポイントの後ろの文字を削除します(@code{delete-char})。

@item C-k
行末までkillします(@code{kill-line})。
@item M-d
次の単語(word)の末尾までを前方にkillします(@code{kill-word})。
@item M-@key{DEL}
前の単語の先頭までを後方にkillします(@code{backward-kill-word})。
@end table

  コマンド@kbd{@key{DEL}}
(@code{delete-backward-char})は、ポイントの前の文字を削除して、カーソルと後ろの文字を後方に移動します。ポイントが行の先頭にある場合、前の改行を削除して、その行を前の行と連結します。

  しかしリージョンがアクティブのとき、@kbd{@key{DEL}}はリージョンのテキストを削除します。リージョンの説明は、@ref{Mark}を参照してください。

  ほとんどのキーボードでは、@key{DEL}には@key{BACKSPACE}というラベルがついていますが、このマニュアルでは@key{DEL}と呼ぶことにします(@key{DEL}を@key{Delete}と混同しないでください。@key{Delete}についてはこの後で議論します)。いくつかのテキスト端末では、Emacsは@key{DEL}を正しく認識しません。もしこの問題に遭遇したときには、@ref{DEL
Does Not Delete}を参照してください。

  コマンド@key{Delete}
(@code{delete-forward-char})は、``反対方向''に削除します。これはポイントの後ろの文字、たとえばカーソルの下の文字を削除します。ポイントが行末にある場合は、その行を次の行と連結します。@kbd{@key{DEL}}と同様、リージョンがアクティブのときはリージョンのテキストを削除します(@ref{Mark}を参照してください)。

  @kbd{C-d}
(@code{delete-char})は、@key{Delete}と同じようにポイントの後ろの文字を削除しますが、リージョンがアクティブかどうかは関係ありません。

  上述した削除コマンドについての詳細な情報は、@ref{Deletion}を参照してください。

  @kbd{C-k}
(@code{kill-line})は行を一度に消去(kill)します。もし行頭または行の途中で@kbd{C-k}とタイプすると、行末までのすべてのテキストをkillします。行末で@kbd{C-k}とタイプすると、その行を次の行と連結します。

  @kbd{C-k}と関連するコマンドについては、@ref{Killing}を参照してください。

@node Basic Undo
@section Undoing Changes

@table @kbd
@item C-/
undoレコードにあるエントリーをundoします。通常1つのコマンドを元に戻す(@code{undo})ことに相当します。

@item C-x u
@itemx C-_
同じです。
@end table

  Emacsはバッファー内のテキストに行われた変更のリストを記録しているので、最近の変更はundoできます。これは@kbd{C-/}(および@kbd{C-x
u}と@kbd{C-_})にバインドされているコマンド@code{undo}を使って行われます。通常このコマンドは最後の変更をundoして、ポイントを変更前の位置に移動します。undoコマンドはバッファーへの変更のみに適用されるので、カーソルの動きをundoすることはできません。

  個々の編集コマンドは、通常undoレコードの個別のエントリーとなりますが、とても単純なコマンドはグループ化される場合があります。1つのエントリーが、実は複雑なコマンドのほんの一部の場合もあります。

  もし@kbd{C-/}(またはそれの別名コマンド)を繰り返すと、undoされた箇所はさらにundoされ、初期の変更もundoされ、ついには利用可能なundo情報の限界に達します。もし記録された変更がすべてundoされている場合、undoコマンドはエラーメッセージを表示して、何も行いません。

  @code{undo}コマンドについてさらに学ぶには、@ref{Undo}を参照してください。

@node Basic Files
@section Files

  Emacsのバッファーに挿入したテキストは、Emacsのセッションの間だけ存在します。テキストを永続化させるためには、それを@dfn{ファイル(file)}に保存しなければなりません。

  ホームディレクトリーに、@file{test.emacs}という名前のファイルがあるとしましょう。このファイルをEmacsで編集するには、以下を入力します

@example
C-x C-f test.emacs @key{RET}
@end example

@noindent
ここでファイル名は、コマンド@kbd{C-x C-f}
(@code{find-file})に与えられる、@dfn{引数(argument)}です。このコマンドは引数を読み取るために@dfn{ミニバッファー(minibuffer)}を使い、@key{RET}は引数を終端させます(@ref{Minibuffer}を参照してください)。

  このコマンドに従うために、Emacsはそのファイルを@dfn{visit(訪問)}します:
すなわちバッファーを作成し、ファイル内容をバッファーにコピーし、編集のためにバッファーを表示します。テキストを変更したら、@kbd{C-x C-s}
(@code{save-buffer})と入力することにより、ファイルを@dfn{保存(save)}できます。これにより変更されたバッファー内容は、@file{test.emacs}に書き戻され永続化されます。保存するまでは、テキストへの変更はEmacs内部にだけ存在し、ファイル@file{test.emacs}は変更されません。

  ファイルを作成するには、すでにファイルが存在するかのように@kbd{C-x
C-f}でファイルをvisitするだけです。これはファイルに書き込みたいテキストを入力できる、空のバッファーを作成します。最初にこのバッファーを@kbd{C-x
C-s}で保存するとき、Emacsは実際にファイルを作成します。

  Emacsでファイルを使うことについてさらに学ぶには、@ref{Files}を参照してください。

@node Basic Help
@section Help

@cindex getting help with keys
  もしキーが何をするか忘れた場合、@kbd{C-h k}
(@code{describe-key})と入力して、それに続けて関心のあるキーを入力します。たとえば@kbd{C-h k
C-n}は、@kbd{C-n}が何をするか表示します。

  プレフィクスキー@kbd{C-h}は``ヘルプ(help)''が由来です。@key{F1}キーは@kbd{C-h}の別名です。@kbd{C-h
k}以外にも、異なる種類のヘルプを提供する多くのヘルプコマンドがあります。

  詳細については、@ref{Help}を参照してください。

@node Blank Lines
@section Blank Lines

@cindex inserting blank lines
@cindex deleting blank lines
  空行を挿入したり削除するための、特別なコマンドとテクニックがあります。

@table @kbd
@item C-o
カーソルの後ろに空行を挿入します(@code{open-line})。
@item C-x C-o
連続する空行を、1行残してすべて削除します(@code{delete-blank-lines})。
@end table

@kindex C-o
@kindex C-x C-o
@cindex blank lines
@findex open-line
@findex delete-blank-lines
  これまで@kbd{@key{RET}}
(@code{newline})が、どうやってテキストの新しい行を開始するのか見てきました。しかし最初に空行を作ってからテキストを挿入するほうが、何を行っているのかわかりやすいでしょう。これはキー@kbd{C-o}
(@code{open-line})を使えば、簡単に行うことができます。これはポイントの後ろに改行を挿入し、ポイントを改行の前に維持します。@kbd{C-o}の後に新しい行のためのテキストを入力します。

  複数の空行は@kbd{C-o}を数回入力するか、何個の空行を作るのかを数引数で与えれば作れます。方法については、@ref{Arguments}を参照してください。もしフィルプレフィクスがあって、行頭で@kbd{C-o}が入力された場合、新しい行にフィルプレフィクスを挿入します。@ref{Fill
Prefix}を参照してください。

  余分な空行を取り除く簡単な方法は、@kbd{C-x C-o}
(@code{delete-blank-lines})です。連続する空行の中にポイントがあるとき、@kbd{C-x
C-o}は1行残してすべての空行を削除します。ポイントが単独の空行にある場合、@kbd{C-x
C-o}はその空行を削除します。ポイントが空でない行にある場合、@kbd{C-x C-o}は、後続する空行があれば、それらすべてを削除します。

@node Continuation Lines
@section Continuation Lines

@cindex continuation line
@cindex wrapping
@cindex line wrapping
@cindex fringes, and continuation lines
  バッファー内のテキストの行 --- @dfn{論理行(logical line)} ---
がウィンドウに収まらないほど長い場合、Emacsがそれを2行以上の@dfn{スクリーン行(screen
lines)}で表示するときがあります。これは@dfn{行の折り返し(line
wrapping)}または@dfn{継続(continuation)}と呼ばれ、論理行は@dfn{継続された行(continued
line)}と呼ばれます。グラフィカルなディスプレーでは、Emacsは行の折り返しをウィンドウの左右のフリンジ(fringes、縁)の小さな曲矢印で示します。テキスト端末では、Emacsは右の余白に@samp{\}を表示して行の折り返しを示します。

  ほとんどのコマンドは、スクリーン行ではなく論理行にたいして作用します。たとえば@kbd{C-k}は論理行をkillします。前に説明したように、@kbd{C-n}
(@code{next-line})と@kbd{C-p}
(@code{previous-line})は特別な例外です。これらはスクリーン行にたいしてポイントを上下に移動させます(@ref{Moving
Point}を参照してください)。

@cindex truncation
@cindex line truncation, and fringes
  Emacsはオプションで長い論理行を継続するかわりに、@dfn{切り詰める(truncate)}ことができます。これは論理行が1つのスクリーン行を占めることを意味します。もし論理行がウィンドウ幅より長い場合、行の残りは表示されません。グラフィカルなディスプレーでは切り詰められた行は、右フリンジの小さな直矢印で示されます。テキスト端末では右余白の@samp{$}で示されます。@ref{Line
Truncation}を参照してください。

  デフォルトでは継続行はウィンドウの右端で折り返されます。折り返しが単語の途中で発生すると、継続された行は読むのが難しくなります。普通の解決策は、行が長くなりすぎる前に改行を挿入することです。もしお好みなら、行が長くなりすぎたときにEmacsが自動的に改行を挿入するように、Auto
Fillモードを使うことができます。@ref{Filling}を参照してください。

@cindex word wrap
  多くの長い論理行を含むファイルを編集する必要があり、それらすべてを改行で分割するのが実用的でない場合があります。そのようなケースでは@dfn{単語折り返し(word
wrapping)}が有効なVisual
Lineモードを使うことができます。これは長い行を正確にウィンドウの右端で折り返すのではなく、ウィンドウの右端に一番近い単語境界(スペースやタブなど)で折り返します。Visual
Lineモードでは、@code{C-a}、@code{C-n}、@code{C-k}などの編集コマンドも、論理行ではなくスクリーン行を処理するように再定義されます。@ref{Visual
Line Mode}を参照してください。

@node Position Info
@section Cursor Position Information

  バッファーのある部分にたいしてサイズや位置、単語数や行数についての情報を得るためのコマンドがあります。

@table @kbd
@item M-x what-line
ポイントの行番号を表示します。
@item M-x line-number-mode
@itemx M-x column-number-mode
現在の行番号および列番号の自動表示を切り替えます。@ref{Optional Mode Line}を参照してください。

@item M-=
現在のリージョンの行数、単語数、文字数を表示します(@code{count-words-region})。リージョンについては、@ref{Mark}を参照してください。

@item M-x count-words
現在のバッファーの行数、単語数、文字数を表示します。リージョン(@ref{Mark}を参照してください)がアクティブのときは、かわりにリージョンの数字を表示します。

@item C-x =
ポイントの後ろの文字の文字コード、ポイントの文字位置、ポイントの列位置を表示します(@code{what-cursor-position})。
@item M-x hl-line-mode
現在行のハイライト表示を有効または無効にします。@ref{Cursor Display}を参照してください。
@item M-x size-indication-mode
バッファーのサイズの自動表示を切り替えます。@ref{Optional Mode Line}を参照してください。
@end table

@findex what-line
@cindex line number commands
@cindex location of point
@cindex cursor location
@cindex point location
  @kbd{M-x
what-line}は、エコーエリアに現在の行番号を表示します。通常このコマンドは不必要です。なぜならモードラインに現在の行番号が、すでに表示されているからです
(@ref{Mode Line}を参照してください)。しかしバッファーがナロー(narrow:
制限)されている場合、モードラインはアクセスできる範囲についての行番号しか表示しません(@ref{Narrowing}を参照してください)。それにくらべて@code{what-line}は、制限されたリージョンとバッファー全体、両方の行番号を表示します。

@kindex M-=
@findex count-words-region
  @kbd{M-=}
(@code{count-words-region})はリージョン内の行数、単語数、文字数を報告するメッセージを表示します(リージョンについての説明は、@ref{Mark}を参照してください)。プレフィクス引数@kbd{C-u
M-=}を指定すると、このコマンドはバッファー全体の数字を表示します。

@findex count-words
  @kbd{M-x
count-words}は同じことを行いますが、呼び出し規約が異なります。もしリージョンがアクティブの場合はリージョン、そうでない場合はバッファーの数字を表示します。

@kindex C-x =
@findex what-cursor-position
  コマンド@kbd{C-x =}
(@code{what-cursor-position})は現在のカーソル位置と、その位置にあるバッファー内容についての情報を表示します。エコーエリアには、以下のような行が表示されます:

@smallexample
Char: c (99, #o143, #x63) point=28062 of 36168 (78%) column=53
@end smallexample

  @samp{Char:}には、バッファー中のそのポイントにある文字が表示されます。カッコ内にはその文字に対応する文字コードが10進、8進、16進で表示されます。@kbd{C-x
=}が文字の情報について表示する方法については、@ref{International
Chars}を参照してください。@samp{point=}はポイント位置を文字数(バッファーの最初の文字は1、次の文字は2、...)で表示します。その後ろの数字ではバッファー内の文字数の合計が表示され、カッコ内にはその位置が全体から見て何パーセントの位置なのかが表示されます。@samp{column=}にはポイントの水平位置、すなわちウィンドウの左端から数えて何番目の列かが表示されます。

  もしバッファーがナローされている場合、最初と最後の部分のテキストが一時的にアクセス不能になります。@kbd{C-x
=}は現在アクセス可能な範囲についての追加説明を表示します。たとえば以下のように表示します:

@smallexample
Char: C (67, #o103, #x43) point=252 of 889 (28%) <231-599> column=0
@end smallexample

@noindent
ここで、新たに追加された2つの数字が、ポイントを設定できる文字位置の下限と上限を示します。これら2つの位置のあいだの文字が参照可能な文字です。@ref{Narrowing}を参照してください。

@node Arguments
@section Numeric Arguments
@cindex numeric arguments
@cindex prefix arguments
@cindex arguments to commands

  数学や計算機の用語では、引数(argument)という単語は、``関数や操作に与えるデータ''を意味します。Emacsのコマンドには、数引数(numeric
argument)(プレフィクス引数(prefix
argument)とも呼ぶ)を指定できるものがあります。引数を反復回数として解釈するコマンドもあります。たとえば、引数10を@kbd{C-f}に指定すると、カーソルを通常の1文字ではなく、10文字分前向きに移動します。これらのコマンドでは、引数を指定しないと引数1を指定したのと同等になります。この種のコマンドの多くでは、負の引数を指定すると、逆向きの移動や逆の操作を指示することになります。

@kindex M-1
@kindex M-@t{-}
@findex digit-argument
@findex negative-argument
  数引数を指定するもっとも簡単な方法は、@key{META}キーを押しながら数字またはマイナス記号(と数字)を入力する方法です。以下はその例です:

@example
M-5 C-n
@end example

@noindent
これは５行下に移動します。キー@kbd{M-1}、@kbd{M-2}、...、同様に@kbd{M--}は、次のコマンドへの引数をセットアップするコマンド、(@code{digit-argument}と@code{negative-argument})にバインドされています。数字をともなわない@kbd{M--}は、通常@minus{}1を意味します。

2桁以上の数字を入力したい場合、2文字目以降の数字を入力するときに@key{META}を押しつづける必要はありません。つまり50行下に移動するときは、以下のように入力します:

@example
M-5 0 C-n
@end example

@noindent
これは、(あなたが期待するように)@samp{0}を5つコピーして挿入してから1行下がるのでは@emph{ない}ことに注意してください。@samp{0}はプレフィクス引数の一部として扱われます。

(@samp{0}を5つコピーして挿入するときは、@kbd{M-5 C-u
0}と入力します。ここで@kbd{C-u}はプレフィクス引数を``終端させる''ので、次のキー入力はあなたが実行したいコマンドです。ここでの@kbd{C-u}の意味はこのケースだけに適用される使い方です。@kbd{C-u}の通常の役割については以下を参照してください。)

@kindex C-u
@findex universal-argument
  数引数を指定する別の方法として、@kbd{M-1}、@kbd{M-2}、...と入力するかわりに、@kbd{C-u}
(@code{universal-argument})のあとに数字(負の引数の場合はマイナス記号と数字)を入力する方法があります。通常、数字をともなわないマイナス記号は@minus{}1を意味します。

  単独の@kbd{C-u}は、``4倍''という特別な意味をもち、次のコマンドの引数を4倍にします。@kbd{C-u
C-u}は16倍です。つまり@kbd{C-u C-u C-f}は16文字前方に移動します。その他に便利な使い方としては@kbd{C-u
C-n}、@kbd{C-u C-u C-n}(適当な割り合いで画面を下に移動する)や、@kbd{C-u C-u
C-o}(空行を``たくさん''作る)、@kbd{C-u C-k}(4行削除する)、などがあります。

  自分自身を挿入する文字の前に数引数を使えば、指定した分のコピーを挿入できます。これは挿入したい文字が数字でないときは簡単です。たとえば@kbd{C-u
6 4 a}は、@samp{a}を64個コピーして挿入します。しかし数字を挿入したいときは、これではうまくいきません。@kbd{C-u 6 4
1}は引数に641を指定することになってしまいます。このようなときは引数と挿入したい数字を分けるために、他の@kbd{C-u}を使うことができます。たとえば@kbd{C-u
6 4 C-u 1}とすれば、これは@samp{1}を64個コピーして挿入します。

  引数の有無は確認しても、その値は無視するコマンドもあります。たとえばコマンド@kbd{M-q}
(@code{fill-paragraph})は、1行に収まるようできるだけテキストをフィルしますが、引数をともなうと、余分なスペースを挿入してテキストが正確に1行の最大幅を使うよう均等に割り付けてフィルします(@kbd{M-q}については、@ref{Filling}を参照してください)。このようなコマンドは、引数として単に@kbd{C-u}を指定するだけで充分です。

  引数の値を繰り返しの回数として使いますが、引数がないときは特別な処理を行うコマンドもあります。たとえばコマンド@kbd{C-k}
(@code{kill-line})に引数@var{n}を指定すると、これは行末の改行も含めて@var{n}行をkillします。しかし引数を指定しないで@kbd{C-k}した場合、ポイントから改行までのテキストをkillするか、ポイントが行末にある場合は改行をkillします。つまりコマンド@kbd{C-k}を引数なしで2回呼び出すと、@kbd{C-k}に引数1を指定したのと同様、空でない行をkillできます(@kbd{C-k}についての情報は、@ref{Killing}を参照してください)。

  いくつかのコマンドは、@kbd{C-u}だけの引数を通常の引数とは異なるものとして扱います。また、マイナス記号のみの引数を、@minus{}1とは区別するコマンドもあります。これらの例外については、必要になったときに説明します。これらの例外は、それぞれのコマンドを使いやすくするためにあり、コマンドのドキュメント文字列に記載されています。

  コマンドの前に引数を入力するという点を強調するために、そしてコマンドが呼び出されてから入力されるミニバッファー引数(@ref{Minibuffer}を参照してください)と区別するために、わたしたちは@dfn{プレフィクス引数(prefix
argument)}という言葉を使います。

@node Repeating
@section Repeating a Command
@cindex repeating a command

  単純なキーで呼び出されるものや、@kbd{M-x @var{command-name}
@key{RET}}で実行できるような多くのコマンドは、数引数で繰り返し回数(@ref{Arguments}を参照してください)を与えることで、その回数だけ繰り返すことができます。しかし、入力を求めるものや数引数を別の目的に使うコマンドでは、この方法はうまくいきません。

@kindex C-x z
@findex repeat
  コマンド@kbd{C-x z}
(@code{repeat})は、Emacsコマンドを何回も反復する別の方法です。このコマンドは、直前のEmacsコマンドが何であっても、それを繰り返します。繰り返されるコマンドは、まえと同じ引数を使います。毎回新たに引数を読み取ることはしません。

  コマンドを2回以上繰り返すには@kbd{z}を追加して入力します。1つの@kbd{z}でコマンドを1回繰り返します。@kbd{z}以外の文字を入力するか、マウスボタンを押すと繰り返しを終了します。

  たとえば、20文字削除するために@kbd{C-u 2 0 C-d}と入力したとしましょう。@kbd{C-x z z
z}と入力すれば、(引数を含めて)削除コマンドをさらに3回繰り返し、全部で80文字削除できます。始めの@kbd{C-x
z}でコマンドを1回繰り返し、そのあとのそれぞれの@kbd{z}で1回ずつ繰り返します。
