@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2001-2015 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@iftex
@chapter 文字、キー、コマンド

  この章では、Emacsがコマンド入力に使う文字セット、および@dfn{キー(keys)}と@dfn{コマンド(commands)}の基本的な概念と、それによってEmacsがどのようにキーボードやマウス入力を解釈するかを説明します。
@end iftex

@ifnottex
@raisesections
@end ifnottex

@node User Input
@section ユーザーインプットの種類
@cindex input with the keyboard
@cindex keyboard input
@cindex character set (keyboard)
@cindex @acronym{ASCII}
@cindex C-
@cindex Control

  GNU
Emacsは、主にキーボードを使うようにデザインされています。マウスを使ってメニューバーやツールバーの編集コマンドを実行することはできますが、キーボードを使う場合に比べて効率的ではありません。したがって、このマニュアルには主にキーボードで編集する方法を記します。

@cindex control character
  Emacsにたいするキーボード入力は、@acronym{ASCII}を大きく拡張したバージョンが基本となっています。@samp{a}、@samp{B}、@samp{3}、@samp{=}や空白文字(@key{SPC})と表記します)などの単純な文字は、それぞれに対応するキーをタイプして入力します。@key{RET}、@key{TAB}、@key{DEL}、@key{ESC}、@key{F1}、@key{Home}、@key{LEFT}などの制御文字なども、この方法で入力できますし、非英語キーボードの特定の文字も同様です(@ref{International}を参照してください)。

@cindex modifier keys
@cindex Control
@cindex C-
@cindex META
@cindex M-
  Emacsは@dfn{修飾キー(modifier
keys)}を用いて入力された制御文字も認識します。よく使用される修飾キーは、@key{Control}(通常@key{Ctrl})というラベル)と、@key{META}(通常@key{Alt}@footnote{歴史的な理由により、@key{Alt}のことを@key{META}という名前で参照します。}というラベル)の2つです。たとえば、@kbd{Control-a}は@key{Ctrl}を押したままで@kbd{a}を押して入力しますが、これを短く@kbd{C-a}と記します。同様に、@kbd{@key{META}-a}または短く@kbd{M-a}は、@key{Alt}を押したまま@kbd{a}を押すことです。修飾キーは英数文字以外のキーにも適用できます。例:
@kbd{C-@key{F1}}、@kbd{M-@key{LEFT}}

@cindex @key{ESC} replacing @key{META} key
  @key{ESC}で始まる2文字キーシーケンスを使って、Meta文字を入力することもできます。したがって@kbd{M-a}を@kbd{@key{ESC}
a}と入力することができます。@kbd{C-M-a}は@kbd{@key{ESC}
C-a}と入力できます。@key{META}と違い、@key{ESC}は切り離された文字です。次の文字を押すとき@key{ESC}を押しっぱなしにするのではなく、@key{ESC}を押して離してから次の文字を入力します。この機能は@key{META}キーをあてにできない、一部のテキスト端末で有用です。

@cindex keys stolen by window manager
@cindex window manager, keys stolen by
  グラフィカルなディスプレーでは、ウィンドウマネージャーが@kbd{M-@key{TAB}}、@kbd{M-@key{SPC}}、@kbd{C-M-d}、@kbd{C-M-l}などのキーボード入力をブロックするかもしれません。このような問題がある場合、ウィンドウマネージャーがこれらのキーをブロックしないようにカスタマイズしたり、影響を受けるEmacsのコマンドを``リバインド(rebind)''したりできます(@ref{Customization}を参照してください)。

@cindex input event
  単純な文字や制御文字、同様にマウスのクリックなどの非キーボード入力は、総じて@dfn{入力イベント(input
events)}と呼ばれます。Emacsが内部で入力イベントをどのように処理するかについての詳細は、@ref{Input Events,,,
elisp, The Emacs Lisp Reference Manual}を参照してください.

@node Keys
@section キー

  Emacsコマンドには、ただ1つの入力イベントで呼び出されるものが、いくつかあります。たとえば@kbd{C-f}はバッファーを1文字前方に移動します。他のコマンドは、@kbd{C-x
C-f}や@kbd{C-x 4 C-f}のように、2つ以上の入力イベントにより呼び出されます。

@cindex key
@cindex key sequence
@cindex complete key
@cindex prefix key
  @dfn{キーシーケンス(key
sequence)}、短く書くと@dfn{キー(key)}は、1つの単位として考えることのできる、1つまたはそれ以上の一連の入力イベントの集まりのことです。もし、あるキーシーケンスがコマンドを呼び出すような場合、それを@dfn{コンプリートキー(complete
key)}と呼ぶことにします。たとえば@kbd{C-f}、@kbd{C-x C-f}、@kbd{C-x 4
C-f}などはコンプリートキーです。もし、あるキーシーケンスがコマンドを呼び出すほど十分長くないとき、それを@dfn{プレフィクスキー(prefix
key)}と呼ぶことにします。たとえば前の例でいうと、@kbd{C-x}や@kbd{C-x
4}はプレフィクスキーです。すべてのキーシーケンスは、コンプリートキーかプレフィクスキーのどちらかになります。

  プレフィクスキーは、その後の入力イベントと組み合わせて、もっと長いキーシーケンスを作るためのものです。たとえば@kbd{C-x}
はプレフィクスキーなので、@kbd{C-x}と入力しただけではコマンドは呼び出されません。かわりにEmacsは更なる入力を待ちます(もし１秒以上入力がない場合、入力を促すために@kbd{C-x}がエコーされます。@ref{Echo
Area}を参照してください)。@kbd{C-x}は、それに続く次の入力イベントと組み合わされる、2イベントのキーシーケンスで、それはプレフィクスキー(@kbd{C-x
4})など)のときもあれば、コンプリートキー(@kbd{C-x
C-f}など)のときもあります。キーシーケンスの長さに制限はありませんが、実際に3つ、4つ以上の入力イベントの場合は、ほとんどありません。

  コンプリートキーに入力イベントを付け加えることはできません。たとえば、@kbd{C-f}はコンプリートキーなので、2イベントのシーケンス@kbd{C-f
C-k}は、1つではなく2つのキーシーケンスです。

  デフォルトではEmacsのプレフィクスキーは@kbd{C-c}、@kbd{C-h}、@kbd{C-x}、@kbd{C-x
@key{RET}}、@kbd{C-x @@}、@kbd{C-x a}、@kbd{C-x n}、@kbd{C-x r}、@kbd{C-x
v}、@kbd{C-x 4}、@kbd{C-x 5}、@kbd{C-x
6}、@key{ESC}、@kbd{M-g}、@kbd{M-o}です(@key{F1}と@key{F2}は、@kbd{C-h}と@kbd{C-x
6}のエイリアスです)。このリストは不変のものではありません。Emacsをカスタマイズすれば、新しいプレフィクスキーを作ることができます。標準のプレフィクスキーを無効にすることさえできますが、これはほとんどのユーザーにたいして推奨はできません。たとえばプレフィクス定義@kbd{C-x
4}を削除すると、@kbd{C-x 4 C-f}は無効なキーシーケンスになります。@ref{Key Bindings}を参照してください。

  プレフィックスキーのあとにヘルプ文字(@kbd{C-h}や@key{F1})を押すと、そのプレフィックスで始まるコマンド一覧を表示できます。唯一の例外は@key{ESC}です。@kbd{@key{ESC}
C-h}は@kbd{C-M-h}と同じで、これは何かまったく別のことを行うコマンドです。しかし@key{F1}ならば、@key{ESC}で始まるコマンドの一覧を表示できます。

@node Commands
@section キーとコマンド

@cindex binding
@cindex command
  このマニュアルは、特定のキーが何を行うかを説明するページばかりです。しかし、Emacsは直接キーに意味を与えてはいません。そのかわりに、Emacsは名前を付けた@dfn{コマンド(commands)}に意味を持たせ、キーとコマンドを@dfn{バインディング(binding)}することによって、キーに意味を与えています。

  すべてのコマンドには、プログラマーが選んだ名前が付いています。名前は、たとえば@code{next-line}、@code{forward-word}のように、いくつかの英単語をダッシュで区切って作られます。内部的には、それぞれのコマンドはLispの@dfn{関数(function)}の特別な型で、コマンドに関連付けられたアクションは、関数を実行することによって機能します。@ref{What
Is a Function,, What Is a Function, elisp, The Emacs Lisp Reference
Manual}を参照してください。

  キーとコマンドの間のバインディングは、@dfn{keymaps}というテーブルに記憶されます。@ref{Keymaps}を参照してください。

  ``@kbd{C-n}は下に1行動きます''という言い方は、通常の使用では関係ないが、Emacsをカスタマイズする上では重要になる点を隠蔽しています。1行下に移動するコマンドは@code{next-line}です。@kbd{C-n}が@code{next-line}にバインドされているから効果があるのです。もし@kbd{C-n}をコマンド@code{forward-word}にリバインドしたら、@kbd{C-n}で1語前方に動くことになります。

  厳密に言えばキーはコマンドにバインドされているだけですが、このマニュアルでは@kbd{C-n}をコマンドであるかのような言い回しをするときがあります。そのようなときは、処理を実行させるキーの後ろに、本当に処理を行うコマンドの名前をカッコ内に記します。たとえば、``コマンド@kbd{C-n}
(@code{next-line})は、ポイントを垂直下方に移動します''というときは、コマンド@code{next-line}がポイントを垂直下方に移動し、それは通常@kbd{C-n}にバインドされている、ということを意味します。

  カスタマイズについて議論したので、@dfn{変数(variables)}にもふれておくべきでしょう。コマンドの説明で、``これを変更する場合、変数
@code{mumble-foo}をセットしてください''というときがあります。変数とは、値を保存するときに使用する名前のことです。このマニュアルに記載されている変数は、ほとんどがカスタマイズに関するものです。いくつかのコマンド、およびEmacsのある部分は、変数調べてその変数にセットされた値により、動作がかわります。カスタマイズに興味がでるまでは、、変数に関する情報は無視してかまいません。その後で変数(@ref{Variables}を参照してください)の基本を読めば、特定の変数についての情報に合点がいくでしょう。

@ifnottex
@lowersections
@end ifnottex
