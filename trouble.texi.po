# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-06-25 01:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: trouble.texi.orig:6
#, no-wrap
msgid "Dealing with Common Problems"
msgstr ""

#. type: iftex
#: trouble.texi.orig:12
msgid ""
"If you type an Emacs command you did not intend, the results are often "
"mysterious.  This chapter tells what you can do to cancel your mistake or "
"recover from a mysterious situation.  Emacs bugs and system crashes are also "
"considered."
msgstr ""

#. type: ifnottex
#: trouble.texi.orig:16
msgid "@raisesections"
msgstr ""

#. type: node
#: trouble.texi.orig:18
#, no-wrap
msgid "Quitting"
msgstr ""

#. type: section
#: trouble.texi.orig:19
#, no-wrap
msgid "Quitting and Aborting"
msgstr ""

#. type: cindex
#: trouble.texi.orig:20 trouble.texi.orig:46
#, no-wrap
msgid "quitting"
msgstr ""

#. type: kindex
#: trouble.texi.orig:23 trouble.texi.orig:47
#, no-wrap
msgid "C-g"
msgstr ""

#. type: itemx
#: trouble.texi.orig:24
#, no-wrap
msgid "C-@key{Break} @r{(MS-DOS only)}"
msgstr ""

#. type: table
#: trouble.texi.orig:26
msgid "Quit: cancel running or partially typed command."
msgstr ""

#. type: kindex
#: trouble.texi.orig:26 trouble.texi.orig:97
#, no-wrap
msgid "C-]"
msgstr ""

#. type: table
#: trouble.texi.orig:29
msgid ""
"Abort innermost recursive editing level and cancel the command which invoked "
"it (@code{abort-recursive-edit})."
msgstr ""

#. type: item
#: trouble.texi.orig:29
#, no-wrap
msgid "@key{ESC} @key{ESC} @key{ESC}"
msgstr ""

#. type: table
#: trouble.texi.orig:31
msgid "Either quit or abort, whichever makes sense (@code{keyboard-escape-quit})."
msgstr ""

#. type: item
#: trouble.texi.orig:31
#, no-wrap
msgid "M-x top-level"
msgstr ""

#. type: table
#: trouble.texi.orig:33
msgid "Abort all recursive editing levels that are currently executing."
msgstr ""

#. type: item
#: trouble.texi.orig:33
#, no-wrap
msgid "C-/"
msgstr ""

#. type: itemx
#: trouble.texi.orig:34
#, no-wrap
msgid "C-x u"
msgstr ""

#. type: itemx
#: trouble.texi.orig:35
#, no-wrap
msgid "C-_"
msgstr ""

#. type: table
#: trouble.texi.orig:37
msgid "Cancel a previously made change in the buffer contents (@code{undo})."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:45
msgid ""
"There are two ways of canceling a command before it has finished: "
"@dfn{quitting} with @kbd{C-g}, and @dfn{aborting} with @kbd{C-]} or @kbd{M-x "
"top-level}.  Quitting cancels a partially typed command, or one which is "
"still running.  Aborting exits a recursive editing level and cancels the "
"command that invoked the recursive edit (@pxref{Recursive Edit})."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:60
msgid ""
"Quitting with @kbd{C-g} is the way to get rid of a partially typed command, "
"or a numeric argument that you don't want.  Furthermore, if you are in the "
"middle of a command that is running, @kbd{C-g} stops the command in a "
"relatively safe way.  For example, if you quit out of a kill command that is "
"taking a long time, either your text will @emph{all} still be in the buffer, "
"or it will @emph{all} be in the kill ring, or maybe both.  If the region is "
"active, @kbd{C-g} deactivates the mark, unless Transient Mark mode is off "
"(@pxref{Disabled Transient Mark}).  If you are in the middle of an "
"incremental search, @kbd{C-g} behaves specially; it may take two successive "
"@kbd{C-g} characters to get out of a search.  @xref{Incremental Search}, for "
"details."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:66
msgid ""
"On MS-DOS, the character @kbd{C-@key{Break}} serves as a quit character like "
"@kbd{C-g}.  The reason is that it is not feasible, on MS-DOS, to recognize "
"@kbd{C-g} while a command is running, between interactions with the user.  "
"By contrast, it @emph{is} feasible to recognize @kbd{C-@key{Break}} at all "
"times."
msgstr ""

#. type: iftex
#: trouble.texi.orig:68
msgid "@xref{MS-DOS Keyboard,,,emacs-xtra, Specialized Emacs Features}."
msgstr ""

#. type: ifnottex
#: trouble.texi.orig:71
msgid "@xref{MS-DOS Keyboard}."
msgstr ""

#. type: findex
#: trouble.texi.orig:73
#, no-wrap
msgid "keyboard-quit"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:79
msgid ""
"@kbd{C-g} works by setting the variable @code{quit-flag} to @code{t} the "
"instant @kbd{C-g} is typed; Emacs Lisp checks this variable frequently, and "
"quits if it is non-@code{nil}.  @kbd{C-g} is only actually executed as a "
"command if you type it while Emacs is waiting for input.  In that case, the "
"command it runs is @code{keyboard-quit}."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:83
msgid ""
"On a text terminal, if you quit with @kbd{C-g} a second time before the "
"first @kbd{C-g} is recognized, you activate the ``emergency escape'' feature "
"and return to the shell.  @xref{Emergency Escape}."
msgstr ""

#. type: cindex
#: trouble.texi.orig:84
#, no-wrap
msgid "NFS and quitting"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:94
msgid ""
"There are some situations where you cannot quit.  When Emacs is waiting for "
"the operating system to do something, quitting is impossible unless special "
"pains are taken for the particular system call within Emacs where the "
"waiting occurs.  We have done this for the system calls that users are "
"likely to want to quit from, but it's possible you will encounter a case not "
"handled.  In one very common case---waiting for file input or output using "
"NFS---Emacs itself knows how to quit, but many NFS implementations simply do "
"not allow user programs to stop waiting for NFS when the NFS server is hung."
msgstr ""

#. type: cindex
#: trouble.texi.orig:95
#, no-wrap
msgid "aborting recursive edit"
msgstr ""

#. type: findex
#: trouble.texi.orig:96
#, no-wrap
msgid "abort-recursive-edit"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:106
msgid ""
"Aborting with @kbd{C-]} (@code{abort-recursive-edit}) is used to get out of "
"a recursive editing level and cancel the command which invoked it.  Quitting "
"with @kbd{C-g} does not do this, and could not do this, because it is used "
"to cancel a partially typed command @emph{within} the recursive editing "
"level.  Both operations are useful.  For example, if you are in a recursive "
"edit and type @kbd{C-u 8} to enter a numeric argument, you can cancel that "
"argument with @kbd{C-g} and remain in the recursive edit."
msgstr ""

#. type: findex
#: trouble.texi.orig:107
#, no-wrap
msgid "keyboard-escape-quit"
msgstr ""

#. type: kindex
#: trouble.texi.orig:108
#, no-wrap
msgid "ESC ESC ESC"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:119
msgid ""
"The sequence @kbd{@key{ESC} @key{ESC} @key{ESC}} "
"(@code{keyboard-escape-quit}) can either quit or abort.  (We defined it this "
"way because @key{ESC} means ``get out'' in many PC programs.)  It can cancel "
"a prefix argument, clear a selected region, or get out of a Query Replace, "
"like @kbd{C-g}.  It can get out of the minibuffer or a recursive edit, like "
"@kbd{C-]}.  It can also get out of splitting the frame into multiple "
"windows, as with @kbd{C-x 1}.  One thing it cannot do, however, is stop a "
"command that is running.  That's because it executes as an ordinary command, "
"and Emacs doesn't notice it until it is ready for the next command."
msgstr ""

#. type: findex
#: trouble.texi.orig:120
#, no-wrap
msgid "top-level"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:130
msgid ""
"The command @kbd{M-x top-level} is equivalent to ``enough'' @kbd{C-]} "
"commands to get you out of all the levels of recursive edits that you are "
"in; it also exits the minibuffer if it is active.  @kbd{C-]} gets you out "
"one level at a time, but @kbd{M-x top-level} goes out all levels at once.  "
"Both @kbd{C-]} and @kbd{M-x top-level} are like all other commands, and "
"unlike @kbd{C-g}, in that they take effect only when Emacs is ready for a "
"command.  @kbd{C-]} is an ordinary key and has its meaning only because of "
"its binding in the keymap.  @xref{Recursive Edit}."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:135
msgid ""
"@kbd{C-/} (@code{undo}) is not strictly speaking a way of canceling a "
"command, but you can think of it as canceling a command that already "
"finished executing.  @xref{Undo}, for more information about the undo "
"facility."
msgstr ""

#. type: node
#: trouble.texi.orig:136
#, no-wrap
msgid "Lossage"
msgstr ""

#. type: section
#: trouble.texi.orig:137
#, no-wrap
msgid "Dealing with Emacs Trouble"
msgstr ""

#. type: cindex
#: trouble.texi.orig:138
#, no-wrap
msgid "troubleshooting Emacs"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:143
msgid ""
"This section describes how to recognize and deal with situations in which "
"Emacs does not work as you expect, such as keyboard code mixups, garbled "
"displays, running out of memory, and crashes and hangs."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:146
msgid "@xref{Bugs}, for what to do when you think you have found a bug in Emacs."
msgstr ""

#. type: node
#: trouble.texi.orig:156 trouble.texi.orig:158
#, no-wrap
msgid "DEL Does Not Delete"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:156
msgid "What to do if @key{DEL} doesn't delete."
msgstr ""

#. type: node
#: trouble.texi.orig:156 trouble.texi.orig:215
#, no-wrap
msgid "Stuck Recursive"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:156
msgid "`[...]' in mode line around the parentheses."
msgstr ""

#. type: node
#: trouble.texi.orig:156 trouble.texi.orig:230
#, no-wrap
msgid "Screen Garbled"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:156
msgid "Garbage on the screen."
msgstr ""

#. type: node
#: trouble.texi.orig:156 trouble.texi.orig:250
#, no-wrap
msgid "Text Garbled"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:156
msgid "Garbage in the text."
msgstr ""

#. type: node
#: trouble.texi.orig:156 trouble.texi.orig:266
#, no-wrap
msgid "Memory Full"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:156
msgid "How to cope when you run out of memory."
msgstr ""

#. type: node
#: trouble.texi.orig:156 trouble.texi.orig:290
#, no-wrap
msgid "Crashing"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:156
msgid "What Emacs does when it crashes."
msgstr ""

#. type: node
#: trouble.texi.orig:156 trouble.texi.orig:358
#, no-wrap
msgid "After a Crash"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:156
msgid "Recovering editing in an Emacs session that crashed."
msgstr ""

#. type: subsection
#: trouble.texi.orig:156 trouble.texi.orig:405 trouble.texi.orig:406
#, no-wrap
msgid "Emergency Escape"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:156
msgid "What to do if Emacs stops responding."
msgstr ""

#. type: subsection
#: trouble.texi.orig:159
#, no-wrap
msgid "If @key{DEL} Fails to Delete"
msgstr ""

#. type: cindex
#: trouble.texi.orig:160
#, no-wrap
msgid "@key{DEL} vs @key{BACKSPACE}"
msgstr ""

#. type: cindex
#: trouble.texi.orig:161
#, no-wrap
msgid "@key{BACKSPACE} vs @key{DEL}"
msgstr ""

#. type: cindex
#: trouble.texi.orig:162
#, no-wrap
msgid "@key{DEL} does not delete"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:167
msgid ""
"Every keyboard has a large key, usually labeled @key{BACKSPACE}, which is "
"ordinarily used to erase the last character that you typed.  In Emacs, this "
"key is supposed to be equivalent to @key{DEL}."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:172
msgid ""
"When Emacs starts up on a graphical display, it determines automatically "
"which key should be @key{DEL}.  In some unusual cases, Emacs gets the wrong "
"information from the system, and @key{BACKSPACE} ends up deleting forwards "
"instead of backwards."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:177
msgid ""
"Some keyboards also have a @key{Delete} key, which is ordinarily used to "
"delete forwards.  If this key deletes backward in Emacs, that too suggests "
"Emacs got the wrong information---but in the opposite sense."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:182
msgid ""
"On a text terminal, if you find that @key{BACKSPACE} prompts for a Help "
"command, like @kbd{Control-h}, instead of deleting a character, it means "
"that key is actually sending the @samp{BS} character.  Emacs ought to be "
"treating @key{BS} as @key{DEL}, but it isn't."
msgstr ""

#. type: findex
#: trouble.texi.orig:183
#, no-wrap
msgid "normal-erase-is-backspace-mode"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:191
msgid ""
"In all of those cases, the immediate remedy is the same: use the command "
"@kbd{M-x normal-erase-is-backspace-mode}.  This toggles between the two "
"modes that Emacs supports for handling @key{DEL}, so if Emacs starts in the "
"wrong mode, this should switch to the right mode.  On a text terminal, if "
"you want to ask for help when @key{BS} is treated as @key{DEL}, use "
"@key{F1}; @kbd{C-?} may also work, if it sends character code 127."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:196
msgid ""
"To fix the problem in every Emacs session, put one of the following lines "
"into your initialization file (@pxref{Init File}).  For the first case "
"above, where @key{BACKSPACE} deletes forwards instead of backwards, use this "
"line to make @key{BACKSPACE} act as @key{DEL}:"
msgstr ""

#. type: lisp
#: trouble.texi.orig:199
#, no-wrap
msgid "(normal-erase-is-backspace-mode 0)\n"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:203
msgid "For the other two cases, use this line:"
msgstr ""

#. type: lisp
#: trouble.texi.orig:206
#, no-wrap
msgid "(normal-erase-is-backspace-mode 1)\n"
msgstr ""

#. type: vindex
#: trouble.texi.orig:208
#, no-wrap
msgid "normal-erase-is-backspace"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:214
msgid ""
"Another way to fix the problem for every Emacs session is to customize the "
"variable @code{normal-erase-is-backspace}: the value @code{t} specifies the "
"mode where @key{BS} or @key{BACKSPACE} is @key{DEL}, and @code{nil} "
"specifies the other mode.  @xref{Easy Customization}."
msgstr ""

#. type: subsection
#: trouble.texi.orig:216
#, no-wrap
msgid "Recursive Editing Levels"
msgstr ""

#. type: cindex
#: trouble.texi.orig:217
#, no-wrap
msgid "stuck in recursive editing"
msgstr ""

#. type: cindex
#: trouble.texi.orig:218
#, no-wrap
msgid "recursive editing, cannot exit"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:222
msgid ""
"Recursive editing levels are important and useful features of Emacs, but "
"they can seem like malfunctions if you do not understand them."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:229
msgid ""
"If the mode line has square brackets @samp{[@dots{}]} around the parentheses "
"that contain the names of the major and minor modes, you have entered a "
"recursive editing level.  If you did not do this on purpose, or if you don't "
"understand what that means, you should just get out of the recursive editing "
"level.  To do so, type @kbd{M-x top-level}.  @xref{Recursive Edit}."
msgstr ""

#. type: subsection
#: trouble.texi.orig:231
#, no-wrap
msgid "Garbage on the Screen"
msgstr ""

#. type: cindex
#: trouble.texi.orig:232
#, no-wrap
msgid "garbled display"
msgstr ""

#. type: cindex
#: trouble.texi.orig:233
#, no-wrap
msgid "display, incorrect"
msgstr ""

#. type: cindex
#: trouble.texi.orig:234
#, no-wrap
msgid "screen display, wrong"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:241
msgid ""
"If the text on a text terminal looks wrong, the first thing to do is see "
"whether it is wrong in the buffer.  Type @kbd{C-l} to redisplay the entire "
"screen.  If the screen appears correct after this, the problem was entirely "
"in the previous screen update.  (Otherwise, see the following section.)"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:249
msgid ""
"Display updating problems often result from an incorrect terminfo entry for "
"the terminal you are using.  The file @file{etc/TERMS} in the Emacs "
"distribution gives the fixes for known problems of this sort.  "
"@file{INSTALL} contains general advice for these problems in one of its "
"sections.  If you seem to be using the right terminfo entry, it is possible "
"that there is a bug in the terminfo entry, or a bug in Emacs that appears "
"for certain terminal types."
msgstr ""

#. type: subsection
#: trouble.texi.orig:251
#, no-wrap
msgid "Garbage in the Text"
msgstr ""

#. type: cindex
#: trouble.texi.orig:252
#, no-wrap
msgid "garbled text"
msgstr ""

#. type: cindex
#: trouble.texi.orig:253
#, no-wrap
msgid "buffer text garbled"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:259
msgid ""
"If @kbd{C-l} shows that the text is wrong, first type @kbd{C-h l} to see "
"what commands you typed to produce the observed results.  Then try undoing "
"the changes step by step using @kbd{C-x u}, until it gets back to a state "
"you consider correct."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:265
msgid ""
"If a large portion of text appears to be missing at the beginning or end of "
"the buffer, check for the word @samp{Narrow} in the mode line.  If it "
"appears, the text you don't see is probably still present, but temporarily "
"off-limits.  To make it accessible again, type @kbd{C-x n w}.  "
"@xref{Narrowing}."
msgstr ""

#. type: subsection
#: trouble.texi.orig:267
#, no-wrap
msgid "Running out of Memory"
msgstr ""

#. type: cindex
#: trouble.texi.orig:268
#, no-wrap
msgid "memory full"
msgstr ""

#. type: cindex
#: trouble.texi.orig:269
#, no-wrap
msgid "out of memory"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:278
msgid ""
"If you get the error message @samp{Virtual memory exceeded}, save your "
"modified buffers with @kbd{C-x s}.  This method of saving them has the "
"smallest need for additional memory.  Emacs keeps a reserve of memory which "
"it makes available when this error happens; that should be enough to enable "
"@kbd{C-x s} to complete its work.  When the reserve has been used, "
"@samp{!MEM FULL!} appears at the beginning of the mode line, indicating "
"there is no more reserve."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:285
msgid ""
"Once you have saved your modified buffers, you can exit this Emacs session "
"and start another, or you can use @kbd{M-x kill-some-buffers} to free space "
"in the current Emacs job.  If this frees up sufficient space, Emacs will "
"refill its memory reserve, and @samp{!MEM FULL!} will disappear from the "
"mode line.  That means you can safely go on editing in the same Emacs "
"session."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:289
msgid ""
"Do not use @kbd{M-x buffer-menu} to save or kill buffers when you run out of "
"memory, because the Buffer Menu needs a fair amount of memory itself, and "
"the reserve supply may not be enough."
msgstr ""

#. type: subsection
#: trouble.texi.orig:291
#, no-wrap
msgid "When Emacs Crashes"
msgstr ""

#. type: cindex
#: trouble.texi.orig:293
#, no-wrap
msgid "crash report"
msgstr ""

#. type: cindex
#: trouble.texi.orig:294
#, no-wrap
msgid "backtrace"
msgstr ""

#. type: cindex
#: trouble.texi.orig:295
#, no-wrap
msgid "@file{emacs_backtrace.txt} file, MS-Windows"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:305
msgid ""
"Emacs is not supposed to crash, but if it does, it produces a @dfn{crash "
"report} prior to exiting.  The crash report is printed to the standard error "
"stream.  If Emacs was started from a graphical desktop on a GNU or Unix "
"system, the standard error stream is commonly redirected to a file such as "
"@file{~/.xsession-errors}, so you can look for the crash report there.  On "
"MS-Windows, the crash report is written to a file named "
"@file{emacs_backtrace.txt} in the current directory of the Emacs process, in "
"addition to the standard error stream."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:311
msgid ""
"The format of the crash report depends on the platform.  On some platforms, "
"such as those using the GNU C Library, the crash report includes a "
"@dfn{backtrace} describing the execution state prior to crashing, which can "
"be used to help debug the crash.  Here is an example for a GNU system:"
msgstr ""

#. type: example
#: trouble.texi.orig:323
#, no-wrap
msgid ""
"Fatal error 11: Segmentation fault\n"
"Backtrace:\n"
"emacs[0x5094e4]\n"
"emacs[0x4ed3e6]\n"
"emacs[0x4ed504]\n"
"/lib64/libpthread.so.0[0x375220efe0]\n"
"/lib64/libpthread.so.0(read+0xe)[0x375220e08e]\n"
"emacs[0x509af6]\n"
"emacs[0x5acc26]\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:334
msgid ""
"The number @samp{11} is the system signal number corresponding to the "
"crash---in this case a segmentation fault.  The hexadecimal numbers are "
"program addresses, which can be associated with source code lines using a "
"debugging tool.  For example, the GDB command @samp{list *0x509af6} prints "
"the source-code lines corresponding to the @samp{emacs[0x509af6]} entry.  If "
"your system has the @command{addr2line} utility, the following shell command "
"outputs a backtrace with source-code line numbers:"
msgstr ""

#. type: example
#: trouble.texi.orig:338
#, no-wrap
msgid ""
"sed -n 's/.*\\[\\(.*\\)]$/\\1/p' @var{backtrace} |\n"
"  addr2line -C -f -i -p -e @var{bindir}/@var{emacs-binary}\n"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:348
msgid ""
"Here, @var{backtrace} is the name of a text file containing a copy of the "
"backtrace, @var{bindir} is the name of the directory that contains the Emacs "
"executable, and @var{emacs-binary} is the name of the Emacs executable file, "
"normally @file{emacs} on GNU and Unix systems and @file{emacs.exe} on "
"MS-Windows and MS-DOS.  Omit the @option{-p} option if your version of "
"@command{addr2line} is too old to have it."
msgstr ""

#. type: cindex
#: trouble.texi.orig:349
#, no-wrap
msgid "core dump"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:357
msgid ""
"Optionally, Emacs can generate a @dfn{core dump} when it crashes, on systems "
"that support core files.  A core dump is a file containing voluminous data "
"about the state of the program prior to the crash, usually examined by "
"loading it into a debugger such as GDB@.  On many platforms, core dumps are "
"disabled by default, and you must explicitly enable them by running the "
"shell command @samp{ulimit -c unlimited} (e.g., in your shell startup "
"script)."
msgstr ""

#. type: subsection
#: trouble.texi.orig:359
#, no-wrap
msgid "Recovery After a Crash"
msgstr ""

#. type: cindex
#: trouble.texi.orig:360
#, no-wrap
msgid "recovering crashed session"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:365
msgid ""
"If Emacs or the computer crashes, you can recover the files you were editing "
"at the time of the crash from their auto-save files.  To do this, start "
"Emacs again and type the command @kbd{M-x recover-session}."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:370
msgid ""
"This command initially displays a buffer which lists interrupted session "
"files, each with its date.  You must choose which session to recover from.  "
"Typically the one you want is the most recent one.  Move point to the one "
"you choose, and type @kbd{C-c C-c}."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:378
msgid ""
"Then @code{recover-session} considers each of the files that you were "
"editing during that session; for each such file, it asks whether to recover "
"that file.  If you answer @kbd{y} for a file, it shows the dates of that "
"file and its auto-save file, then asks once again whether to recover that "
"file.  For the second question, you must confirm with @kbd{yes}.  If you do, "
"Emacs visits the file but gets the text from the auto-save file."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:382
msgid ""
"When @code{recover-session} is done, the files you've chosen to recover are "
"present in Emacs buffers.  You should then save them.  Only this---saving "
"them---updates the files themselves."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:390
msgid ""
"As a last resort, if you had buffers with content which were not associated "
"with any files, or if the autosave was not recent enough to have recorded "
"important changes, you can use the @file{etc/emacs-buffer.gdb} script with "
"GDB (the GNU Debugger) to retrieve them from a core dump--provided that a "
"core dump was saved, and that the Emacs executable was not stripped of its "
"debugging symbols."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:393
msgid ""
"As soon as you get the core dump, rename it to another name such as "
"@file{core.emacs}, so that another crash won't overwrite it."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:404
msgid ""
"To use this script, run @code{gdb} with the file name of your Emacs "
"executable and the file name of the core dump, e.g., @samp{gdb "
"/usr/bin/emacs core.emacs}.  At the @code{(gdb)} prompt, load the recovery "
"script: @samp{source /usr/src/emacs/etc/emacs-buffer.gdb}.  Then type the "
"command @code{ybuffer-list} to see which buffers are available.  For each "
"buffer, it lists a buffer number.  To save a buffer, use "
"@code{ysave-buffer}; you specify the buffer number, and the file name to "
"write that buffer into.  You should use a file name which does not already "
"exist; if the file does exist, the script does not make a backup of its old "
"contents."
msgstr ""

#. type: cindex
#: trouble.texi.orig:407
#, no-wrap
msgid "emergency escape"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:418
msgid ""
"On text terminals, the @dfn{emergency escape} feature suspends Emacs "
"immediately if you type @kbd{C-g} a second time before Emacs can actually "
"respond to the first one by quitting.  This is so you can always get out of "
"GNU Emacs no matter how badly it might be hung.  When things are working "
"properly, Emacs recognizes and handles the first @kbd{C-g} so fast that the "
"second one won't trigger emergency escape.  However, if some problem "
"prevents Emacs from handling the first @kbd{C-g} properly, then the second "
"one will get you back to the shell."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:421
msgid ""
"When you resume Emacs after a suspension caused by emergency escape, it asks "
"two questions before going back to what it had been doing:"
msgstr ""

#. type: example
#: trouble.texi.orig:425
#, no-wrap
msgid ""
"Auto-save? (y or n)\n"
"Abort (and dump core)? (y or n)\n"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:429
msgid "Answer each one with @kbd{y} or @kbd{n} followed by @key{RET}."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:433
msgid ""
"Saying @kbd{y} to @samp{Auto-save?} causes immediate auto-saving of all "
"modified buffers in which auto-saving is enabled.  Saying @kbd{n} skips "
"this."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:438
msgid ""
"Saying @kbd{y} to @samp{Abort (and dump core)?} causes Emacs to crash, "
"dumping core.  This is to enable a wizard to figure out why Emacs was "
"failing to quit in the first place.  Execution does not continue after a "
"core dump."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:442
msgid ""
"If you answer this question @kbd{n}, Emacs execution resumes.  With luck, "
"Emacs will ultimately do the requested quit.  If not, each subsequent "
"@kbd{C-g} invokes emergency escape again."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:447
msgid ""
"If Emacs is not really hung, just slow, you may invoke the double @kbd{C-g} "
"feature without really meaning to.  Then just resume and answer @kbd{n} to "
"both questions, and you will get back to the former state.  The quit you "
"requested will happen by and by."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:451
msgid ""
"Emergency escape is active only for text terminals.  On graphical displays, "
"you can use the mouse to kill Emacs or switch to another program."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:455
msgid ""
"On MS-DOS, you must type @kbd{C-@key{Break}} (twice) to cause emergency "
"escape---but there are cases where it won't work, when system call hangs or "
"when Emacs is stuck in a tight loop in C code."
msgstr ""

#. type: node
#: trouble.texi.orig:456
#, no-wrap
msgid "Bugs"
msgstr ""

#. type: section
#: trouble.texi.orig:457
#, no-wrap
msgid "Reporting Bugs"
msgstr ""

#. type: cindex
#: trouble.texi.orig:459
#, no-wrap
msgid "bugs"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:465
msgid ""
"If you think you have found a bug in Emacs, please report it.  We cannot "
"promise to fix it, or always to agree that it is a bug, but we certainly "
"want to hear about it.  The same applies for new features you would like to "
"see added.  The following sections will help you to construct an effective "
"bug report."
msgstr ""

#. type: node
#: trouble.texi.orig:472 trouble.texi.orig:474
#, no-wrap
msgid "Known Problems"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:472
msgid "How to read about known problems and bugs."
msgstr ""

#. type: menuentry
#: trouble.texi.orig:472
msgid "Criteria: Bug Criteria"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:472
msgid "Have you really found a bug?"
msgstr ""

#. type: subsection
#: trouble.texi.orig:472 trouble.texi.orig:594 trouble.texi.orig:595
#, no-wrap
msgid "Understanding Bug Reporting"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:472
msgid "How to report a bug effectively."
msgstr ""

#. type: node
#: trouble.texi.orig:472 trouble.texi.orig:652
#, no-wrap
msgid "Checklist"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:472
msgid "Steps to follow for a good bug report."
msgstr ""

#. type: node
#: trouble.texi.orig:472 trouble.texi.orig:1050
#, no-wrap
msgid "Sending Patches"
msgstr ""

#. type: menuentry
#: trouble.texi.orig:472
msgid "How to send a patch for GNU Emacs."
msgstr ""

#. type: subsection
#: trouble.texi.orig:475
#, no-wrap
msgid "Reading Existing Bug Reports and Known Problems"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:481
msgid ""
"Before reporting a bug, if at all possible please check to see if it is "
"already known about.  Indeed, it may already have been fixed in a later "
"release of Emacs, or in the development version.  Here is a list of the main "
"places you can read about known issues:"
msgstr ""

#. type: itemize
#: trouble.texi.orig:488
msgid ""
"The @file{etc/PROBLEMS} file; type @kbd{C-h C-p} to read it.  This file "
"contains a list of particularly well-known issues that have been encountered "
"in compiling, installing and running Emacs.  Often, there are suggestions "
"for workarounds and solutions."
msgstr ""

#. type: itemize
#: trouble.texi.orig:492
msgid ""
"Some additional user-level problems can be found in @ref{Bugs and problems, "
", Bugs and problems, efaq, GNU Emacs FAQ}."
msgstr ""

#. type: cindex
#: trouble.texi.orig:493
#, no-wrap
msgid "bug tracker"
msgstr ""

#. type: itemize
#: trouble.texi.orig:501
msgid ""
"The GNU Bug Tracker at @url{http://debbugs.gnu.org}.  Emacs bugs are filed "
"in the tracker under the @samp{emacs} package.  The tracker records "
"information about the status of each bug, the initial bug report, and the "
"follow-up messages by the bug reporter and Emacs developers.  You can search "
"for bugs by subject, severity, and other criteria."
msgstr ""

#. type: cindex
#: trouble.texi.orig:502
#, no-wrap
msgid "debbugs package"
msgstr ""

#. type: itemize
#: trouble.texi.orig:509
msgid ""
"Instead of browsing the bug tracker as a webpage, you can browse it from "
"Emacs using the @code{debbugs} package, which can be downloaded via the "
"Package Menu (@pxref{Packages}).  This package provides the command @kbd{M-x "
"debbugs-gnu} to list bugs, and @kbd{M-x debbugs-gnu-search} to search for a "
"specific bug.  User tags, applied by the Emacs maintainers, are shown by "
"@kbd{M-x debbugs-gnu-usertags}."
msgstr ""

#. type: itemize
#: trouble.texi.orig:517
msgid ""
"The @samp{bug-gnu-emacs} mailing list (also available as the newsgroup "
"@samp{gnu.emacs.bug}).  You can read the list archives at "
"@url{http://lists.gnu.org/mailman/listinfo/bug-gnu-emacs}.  This list works "
"as a ``mirror'' of the Emacs bug reports and follow-up messages which are "
"sent to the bug tracker.  It also contains old bug reports from before the "
"bug tracker was introduced (in early 2008)."
msgstr ""

#. type: itemize
#: trouble.texi.orig:522
msgid ""
"If you like, you can subscribe to the list.  Be aware that its purpose is to "
"provide the Emacs maintainers with information about bugs and feature "
"requests, so reports may contain fairly large amounts of data; spectators "
"should not complain about this."
msgstr ""

#. type: itemize
#: trouble.texi.orig:530
msgid ""
"The @samp{emacs-pretest-bug} mailing list.  This list is no longer used, and "
"is mainly of historical interest.  At one time, it was used for bug reports "
"in development (i.e., not yet released) versions of Emacs.  You can read the "
"archives for 2003 to mid 2007 at "
"@url{http://lists.gnu.org/archive/html/emacs-pretest-bug/}.  Nowadays, it is "
"an alias for @samp{bug-gnu-emacs}."
msgstr ""

#. type: itemize
#: trouble.texi.orig:536
msgid ""
"The @samp{emacs-devel} mailing list.  Sometimes people report bugs to this "
"mailing list.  This is not the main purpose of the list, however, and it is "
"much better to send bug reports to the bug list.  You should not feel "
"obliged to read this list before reporting a bug."
msgstr ""

#. type: node
#: trouble.texi.orig:540
#, no-wrap
msgid "Bug Criteria"
msgstr ""

#. type: subsection
#: trouble.texi.orig:541
#, no-wrap
msgid "When Is There a Bug"
msgstr ""

#. type: cindex
#: trouble.texi.orig:542
#, no-wrap
msgid "bug criteria"
msgstr ""

#. type: cindex
#: trouble.texi.orig:543
#, no-wrap
msgid "what constitutes an Emacs bug"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:549
msgid ""
"If Emacs accesses an invalid memory location (``segmentation fault''), or "
"exits with an operating system error message that indicates a problem in the "
"program (as opposed to something like ``disk full''), then it is certainly a "
"bug."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:554
msgid ""
"If the Emacs display does not correspond properly to the contents of the "
"buffer, then it is a bug.  But you should check that features like buffer "
"narrowing (@pxref{Narrowing}), which can hide parts of the buffer or change "
"how it is displayed, are not responsible."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:563
msgid ""
"Taking forever to complete a command can be a bug, but you must make sure "
"that it is really Emacs's fault.  Some commands simply take a long time.  "
"Type @kbd{C-g} (@kbd{C-@key{Break}} on MS-DOS) and then @kbd{C-h l} to see "
"whether the input Emacs received was what you intended to type; if the input "
"was such that you @emph{know} it should have been processed quickly, report "
"a bug.  If you don't know whether the command should take a long time, find "
"out by looking in the manual or by asking for assistance."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:567
msgid ""
"If a command you are familiar with causes an Emacs error message in a case "
"where its usual definition ought to be reasonable, it is probably a bug."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:572
msgid ""
"If a command does the wrong thing, that is a bug.  But be sure you know for "
"certain what it ought to have done.  If you aren't familiar with the "
"command, it might actually be working right.  If in doubt, read the "
"command's documentation (@pxref{Name Help})."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:584
msgid ""
"A command's intended definition may not be the best possible definition for "
"editing with.  This is a very important sort of problem, but it is also a "
"matter of judgment.  Also, it is easy to come to such a conclusion out of "
"ignorance of some of the existing features.  It is probably best not to "
"complain about such a problem until you have checked the documentation in "
"the usual ways, feel confident that you understand it, and know for certain "
"that what you want is not available.  Ask other Emacs users, too.  If you "
"are not sure what the command is supposed to do after a careful reading of "
"the manual, check the index and glossary for any terms that may be unclear."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:590
msgid ""
"If after careful rereading of the manual you still do not understand what "
"the command should do, that indicates a bug in the manual, which you should "
"report.  The manual's job is to make everything clear to people who are not "
"Emacs experts---including you.  It is just as important to report "
"documentation bugs as program bugs."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:593
msgid ""
"If the built-in documentation for a function or variable disagrees with the "
"manual, one of them must be wrong; that is a bug."
msgstr ""

#. type: cindex
#: trouble.texi.orig:596
#, no-wrap
msgid "bug reporting"
msgstr ""

#. type: cindex
#: trouble.texi.orig:597
#, no-wrap
msgid "report an Emacs bug, how to"
msgstr ""

#. type: findex
#: trouble.texi.orig:599
#, no-wrap
msgid "emacs-version"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:604
msgid ""
"When you decide that there is a bug, it is important to report it and to "
"report it in a way which is useful.  What is most useful is an exact "
"description of what commands you type, starting with the shell command to "
"run Emacs, until the problem happens."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:615
msgid ""
"The most important principle in reporting a bug is to report @emph{facts}.  "
"Hypotheses and verbal descriptions are no substitute for the detailed raw "
"data.  Reporting the facts is straightforward, but many people strain to "
"posit explanations and report them instead of the facts.  If the "
"explanations are based on guesses about how Emacs is implemented, they will "
"be useless; meanwhile, lacking the facts, we will have no real information "
"about the bug.  If you want to actually @emph{debug} the problem, and report "
"explanations that are more than guesses, that is useful---but please include "
"the raw facts as well."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:628
msgid ""
"For example, suppose that you type @kbd{C-x C-f /glorp/baz.ugh @key{RET}}, "
"visiting a file which (you know) happens to be rather large, and Emacs "
"displays @samp{I feel pretty today}.  The bug report would need to provide "
"all that information.  You should not assume that the problem is due to the "
"size of the file and say, ``I visited a large file, and Emacs displayed "
"@samp{I feel pretty today}.'' This is what we mean by ``guessing "
"explanations''.  The problem might be due to the fact that there is a "
"@samp{z} in the file name.  If this is so, then when we got your report, we "
"would try out the problem with some ``large file'', probably with no "
"@samp{z} in its name, and not see any problem.  There is no way we could "
"guess that we should try visiting a file with a @samp{z} in its name."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:633
msgid ""
"You should not even say ``visit a file'' instead of @kbd{C-x C-f}.  "
"Similarly, rather than saying ``if I have three characters on the line'', "
"say ``after I type @kbd{@key{RET} A B C @key{RET} C-p}'', if that is the way "
"you entered the text."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:643
msgid ""
"If possible, try quickly to reproduce the bug by invoking Emacs with "
"@command{emacs -Q} (so that Emacs starts with no initial customizations; "
"@pxref{Initial Options}), and repeating the steps that you took to trigger "
"the bug.  If you can reproduce the bug this way, that rules out bugs in your "
"personal customizations.  Then your bug report should begin by stating that "
"you started Emacs with @command{emacs -Q}, followed by the exact sequence of "
"steps for reproducing the bug.  If possible, inform us of the exact contents "
"of any file that is needed to reproduce the bug."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:648
msgid ""
"Some bugs are not reproducible from @command{emacs -Q}; some are not easily "
"reproducible at all.  In that case, you should report what you have---but, "
"as before, please stick to the raw facts about what you did to trigger the "
"bug the first time."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:651
msgid ""
"If you have multiple issues that you want to report, please make a separate "
"bug report for each."
msgstr ""

#. type: subsection
#: trouble.texi.orig:653
#, no-wrap
msgid "Checklist for Bug Reports"
msgstr ""

#. type: cindex
#: trouble.texi.orig:654
#, no-wrap
msgid "checklist before reporting a bug"
msgstr ""

#. type: cindex
#: trouble.texi.orig:655
#, no-wrap
msgid "bug reporting, checklist"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:659
msgid ""
"Before reporting a bug, first try to see if the problem has already been "
"reported (@pxref{Known Problems})."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:665
msgid ""
"If you are able to, try the latest release of Emacs to see if the problem "
"has already been fixed.  Even better is to try the latest development "
"version.  We recognize that this is not easy for some people, so do not feel "
"that you absolutely must do this before making a report."
msgstr ""

#. type: findex
#: trouble.texi.orig:666
#, no-wrap
msgid "report-emacs-bug"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:677
msgid ""
"The best way to write a bug report for Emacs is to use the command @kbd{M-x "
"report-emacs-bug}.  This sets up a mail buffer (@pxref{Sending Mail}) and "
"automatically inserts @emph{some} of the essential information.  However, it "
"cannot supply all the necessary information; you should still read and "
"follow the guidelines below, so you can enter the other crucial information "
"by hand before you send the message.  You may feel that some of the "
"information inserted by @kbd{M-x report-emacs-bug} is not relevant, but "
"unless you are absolutely sure it is best to leave it, so that the "
"developers can decide for themselves."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:680
msgid ""
"When you have finished writing your report, type @kbd{C-c C-c} and it will "
"be sent to the Emacs maintainers at"
msgstr ""

#. type: ifnothtml
#: trouble.texi.orig:682
msgid "@email{bug-gnu-emacs@@gnu.org}."
msgstr ""

#. type: ifhtml
#: trouble.texi.orig:685
msgid "@url{http://lists.gnu.org/mailman/listinfo/bug-gnu-emacs, bug-gnu-emacs}."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:692
msgid ""
"(If you want to suggest an improvement or new feature, use the same "
"address.)  If you cannot send mail from inside Emacs, you can copy the text "
"of your report to your normal mail client (if your system supports it, you "
"can type @kbd{C-c M-i} to have Emacs do this for you)  and send it to that "
"address.  Or you can simply send an email to that address describing the "
"problem."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:698
msgid ""
"Your report will be sent to the @samp{bug-gnu-emacs} mailing list, and "
"stored in the GNU Bug Tracker at @url{http://debbugs.gnu.org}.  Please "
"include a valid reply email address, in case we need to ask you for more "
"information about your report.  Submissions are moderated, so there may be a "
"delay before your report appears."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:702
msgid ""
"You do not need to know how the Gnu Bug Tracker works in order to report a "
"bug, but if you want to, you can read the tracker's online documentation to "
"see the various features you can use."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:709
msgid ""
"All mail sent to the @samp{bug-gnu-emacs} mailing list is also gatewayed to "
"the @samp{gnu.emacs.bug} newsgroup.  The reverse is also true, but we ask "
"you not to post bug reports (or replies) via the newsgroup.  It can make it "
"much harder to contact you if we need to ask for more information, and it "
"does not integrate well with the bug tracker."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:713
msgid ""
"If your data is more than 500,000 bytes, please don't include it directly in "
"the bug report; instead, offer to send it on request, or make it available "
"by ftp and say where."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:716
msgid ""
"To enable maintainers to investigate a bug, your report should include all "
"these things:"
msgstr ""

#. type: itemize
#: trouble.texi.orig:721
msgid ""
"The version number of Emacs.  Without this, we won't know whether there is "
"any point in looking for the bug in the current version of GNU Emacs."
msgstr ""

#. type: itemize
#: trouble.texi.orig:727
msgid ""
"@kbd{M-x report-emacs-bug} includes this information automatically, but if "
"you are not using that command for your report you can get the version "
"number by typing @kbd{M-x emacs-version @key{RET}}.  If that command does "
"not work, you probably have something other than GNU Emacs, so you will have "
"to report the bug somewhere else."
msgstr ""

#. type: itemize
#: trouble.texi.orig:734
msgid ""
"The type of machine you are using, and the operating system name and version "
"number (again, automatically included by @kbd{M-x report-emacs-bug}).  "
"@kbd{M-x emacs-version @key{RET}} provides this information too.  Copy its "
"output from the @file{*Messages*} buffer, so that you get it all and get it "
"accurately."
msgstr ""

#. type: itemize
#: trouble.texi.orig:738
msgid ""
"The operands given to the @code{configure} command when Emacs was installed "
"(automatically included by @kbd{M-x report-emacs-bug})."
msgstr ""

#. type: itemize
#: trouble.texi.orig:744
msgid ""
"A complete list of any modifications you have made to the Emacs source.  (We "
"may not have time to investigate the bug unless it happens in an unmodified "
"Emacs.  But if you've made modifications and you don't tell us, you are "
"sending us on a wild goose chase.)"
msgstr ""

#. type: itemize
#: trouble.texi.orig:747
msgid ""
"Be precise about these changes.  A description in English is not "
"enough---send a context diff for them."
msgstr ""

#. type: itemize
#: trouble.texi.orig:750
msgid ""
"Adding files of your own, or porting to another machine, is a modification "
"of the source."
msgstr ""

#. type: itemize
#: trouble.texi.orig:754
msgid ""
"Details of any other deviations from the standard procedure for installing "
"GNU Emacs."
msgstr ""

#. type: itemize
#: trouble.texi.orig:757
msgid "The complete text of any files needed to reproduce the bug."
msgstr ""

#. type: itemize
#: trouble.texi.orig:764
msgid ""
"If you can tell us a way to cause the problem without visiting any files, "
"please do so.  This makes it much easier to debug.  If you do need files, "
"make sure you arrange for us to see their exact contents.  For example, it "
"can matter whether there are spaces at the ends of lines, or a newline after "
"the last line in the buffer (nothing ought to care whether the last line is "
"terminated, but try telling the bugs that)."
msgstr ""

#. type: itemize
#: trouble.texi.orig:770
msgid ""
"The precise commands we need to type to reproduce the bug.  If at all "
"possible, give a full recipe for an Emacs started with the @samp{-Q} option "
"(@pxref{Initial Options}).  This bypasses your personal customizations."
msgstr ""

#. type: findex
#: trouble.texi.orig:771
#, no-wrap
msgid "open-dribble-file"
msgstr ""

#. type: cindex
#: trouble.texi.orig:772
#, no-wrap
msgid "dribble file"
msgstr ""

#. type: cindex
#: trouble.texi.orig:773
#, no-wrap
msgid "logging keystrokes"
msgstr ""

#. type: itemize
#: trouble.texi.orig:780
msgid ""
"One way to record the input to Emacs precisely is to write a dribble file.  "
"To start the file, use the @kbd{M-x open-dribble-file @key{RET}} command.  "
"From then on, Emacs copies all your input to the specified dribble file "
"until the Emacs process is killed.  Be aware that sensitive information "
"(such as passwords) may end up recorded in the dribble file."
msgstr ""

#. type: findex
#: trouble.texi.orig:782
#, no-wrap
msgid "open-termscript"
msgstr ""

#. type: cindex
#: trouble.texi.orig:783
#, no-wrap
msgid "termscript file"
msgstr ""

#. type: cindex
#: trouble.texi.orig:784
#, no-wrap
msgid "@env{TERM} environment variable"
msgstr ""

#. type: itemize
#: trouble.texi.orig:789
msgid ""
"For possible display bugs, the terminal type (the value of environment "
"variable @env{TERM}), the complete termcap entry for the terminal from "
"@file{/etc/termcap} (since that file is not identical on all machines), and "
"the output that Emacs actually sent to the terminal."
msgstr ""

#. type: itemize
#: trouble.texi.orig:791
msgid "The way to collect the terminal output is to execute the Lisp expression"
msgstr ""

#. type: example
#: trouble.texi.orig:794
#, no-wrap
msgid "(open-termscript \"~/termscript\")\n"
msgstr ""

#. type: itemize
#: trouble.texi.orig:803
msgid ""
"using @kbd{M-:} or from the @file{*scratch*} buffer just after starting "
"Emacs.  From then on, Emacs copies all terminal output to the specified "
"termscript file as well, until the Emacs process is killed.  If the problem "
"happens when Emacs starts up, put this expression into your Emacs "
"initialization file so that the termscript file will be open when Emacs "
"displays the screen for the first time."
msgstr ""

#. type: itemize
#: trouble.texi.orig:807
msgid ""
"Be warned: it is often difficult, and sometimes impossible, to fix a "
"terminal-dependent bug without access to a terminal of the type that "
"stimulates the bug."
msgstr ""

#. type: itemize
#: trouble.texi.orig:813
msgid ""
"If non-@acronym{ASCII} text or internationalization is relevant, the locale "
"that was current when you started Emacs.  On GNU/Linux and Unix systems, or "
"if you use a Posix-style shell such as Bash, you can use this shell command "
"to view the relevant values:"
msgstr ""

#. type: smallexample
#: trouble.texi.orig:817
#, no-wrap
msgid ""
"echo LC_ALL=$LC_ALL LC_COLLATE=$LC_COLLATE LC_CTYPE=$LC_CTYPE \\\n"
"  LC_MESSAGES=$LC_MESSAGES LC_TIME=$LC_TIME LANG=$LANG\n"
msgstr ""

#. type: itemize
#: trouble.texi.orig:821
msgid ""
"Alternatively, use the @command{locale} command, if your system has it, to "
"display your locale settings."
msgstr ""

#. type: itemize
#: trouble.texi.orig:827
msgid ""
"You can use the @kbd{M-!} command to execute these commands from Emacs, and "
"then copy the output from the @file{*Messages*} buffer into the bug report.  "
"Alternatively, @kbd{M-x getenv @key{RET} LC_ALL @key{RET}} will display the "
"value of @code{LC_ALL} in the echo area, and you can copy its output from "
"the @file{*Messages*} buffer."
msgstr ""

#. type: itemize
#: trouble.texi.orig:832
msgid ""
"A description of what behavior you observe that you believe is incorrect.  "
"For example, ``The Emacs process gets a fatal signal'', or, ``The resulting "
"text is as follows, which I think is wrong.''"
msgstr ""

#. type: itemize
#: trouble.texi.orig:836
msgid ""
"Of course, if the bug is that Emacs gets a fatal signal, then one can't miss "
"it.  But if the bug is incorrect text, the maintainer might fail to notice "
"what is wrong.  Why leave it to chance?"
msgstr ""

#. type: itemize
#: trouble.texi.orig:846
msgid ""
"Even if the problem you experience is a fatal signal, you should still say "
"so explicitly.  Suppose something strange is going on, such as, your copy of "
"the source is out of sync, or you have encountered a bug in the C library on "
"your system.  (This has happened!)  Your copy might crash and the copy here "
"might not.  If you @emph{said} to expect a crash, then when Emacs here fails "
"to crash, we would know that the bug was not happening.  If you don't say to "
"expect a crash, then we would not know whether the bug was happening---we "
"would not be able to draw any conclusion from our observations."
msgstr ""

#. type: itemize
#: trouble.texi.orig:852
msgid ""
"If the bug is that the Emacs Manual or the Emacs Lisp Reference Manual fails "
"to describe the actual behavior of Emacs, or that the text is confusing, "
"copy in the text from the manual which you think is at fault.  If the "
"section is small, just the section name is enough."
msgstr ""

#. type: itemize
#: trouble.texi.orig:857
msgid ""
"If the manifestation of the bug is an Emacs error message, it is important "
"to report the precise text of the error message, and a backtrace showing how "
"the Lisp program in Emacs arrived at the error."
msgstr ""

#. type: itemize
#: trouble.texi.orig:861
msgid ""
"To get the error message text accurately, copy it from the @file{*Messages*} "
"buffer into the bug report.  Copy all of it, not just part."
msgstr ""

#. type: findex
#: trouble.texi.orig:862
#, no-wrap
msgid "toggle-debug-on-error"
msgstr ""

#. type: pindex
#: trouble.texi.orig:863
#, no-wrap
msgid "Edebug"
msgstr ""

#. type: itemize
#: trouble.texi.orig:871
msgid ""
"To make a backtrace for the error, use @kbd{M-x toggle-debug-on-error} "
"before the error happens (that is to say, you must give that command and "
"then make the bug happen).  This causes the error to start the Lisp "
"debugger, which shows you a backtrace.  Copy the text of the debugger's "
"backtrace into the bug report.  @xref{Edebug,, Edebug, elisp, the Emacs Lisp "
"Reference Manual}, for information on debugging Emacs Lisp programs with the "
"Edebug package."
msgstr ""

#. type: itemize
#: trouble.texi.orig:875
msgid ""
"This use of the debugger is possible only if you know how to make the bug "
"happen again.  If you can't make it happen again, at least copy the whole "
"error message."
msgstr ""

#. type: vindex
#: trouble.texi.orig:876
#, no-wrap
msgid "debug-on-quit"
msgstr ""

#. type: itemize
#: trouble.texi.orig:882
msgid ""
"If Emacs appears to be stuck in an infinite loop or in a very long "
"operation, typing @kbd{C-g} with the variable @code{debug-on-quit} "
"non-@code{nil} will start the Lisp debugger and show a backtrace.  This "
"backtrace is useful for debugging such long loops, so if you can produce it, "
"copy it into the bug report."
msgstr ""

#. type: vindex
#: trouble.texi.orig:883
#, no-wrap
msgid "debug-on-event"
msgstr ""

#. type: itemize
#: trouble.texi.orig:888
msgid ""
"If you cannot get Emacs to respond to @kbd{C-g} (e.g., because "
"@code{inhibit-quit} is set), then you can try sending the signal specified "
"by @code{debug-on-event} (default SIGUSR2) from outside Emacs to cause it to "
"enter the debugger."
msgstr ""

#. type: itemize
#: trouble.texi.orig:898
msgid ""
"Check whether any programs you have loaded into the Lisp world, including "
"your initialization file, set any variables that may affect the functioning "
"of Emacs.  Also, see whether the problem happens in a freshly started Emacs "
"without loading your initialization file (start Emacs with the @code{-Q} "
"switch to prevent loading the init files).  If the problem does @emph{not} "
"occur then, you must report the precise contents of any programs that you "
"must load into the Lisp world in order to cause the problem to occur."
msgstr ""

#. type: itemize
#: trouble.texi.orig:905
msgid ""
"If the problem does depend on an init file or other Lisp programs that are "
"not part of the standard Emacs system, then you should make sure it is not a "
"bug in those programs by complaining to their maintainers first.  After they "
"verify that they are using Emacs in a way that is supposed to work, they "
"should report the bug."
msgstr ""

#. type: itemize
#: trouble.texi.orig:909
msgid ""
"If you wish to mention something in the GNU Emacs source, show the line of "
"code with a few lines of context.  Don't just give a line number."
msgstr ""

#. type: itemize
#: trouble.texi.orig:914
msgid ""
"The line numbers in the development sources don't match those in your "
"sources.  It would take extra work for the maintainers to determine what "
"code is in your version at a given line number, and we could not be certain."
msgstr ""

#. type: itemize
#: trouble.texi.orig:926
msgid ""
"Additional information from a C debugger such as GDB might enable someone to "
"find a problem on a machine which he does not have available.  If you don't "
"know how to use GDB, please read the GDB manual---it is not very long, and "
"using GDB is easy.  You can find the GDB distribution, including the GDB "
"manual in online form, in most of the same places you can find the Emacs "
"distribution.  To run Emacs under GDB, you should switch to the @file{src} "
"subdirectory in which Emacs was compiled, then do @samp{gdb emacs}.  It is "
"important for the directory @file{src} to be current so that GDB will read "
"the @file{.gdbinit} file in this directory."
msgstr ""

#. type: itemize
#: trouble.texi.orig:929
msgid ""
"However, you need to think when you collect the additional information if "
"you want it to show what causes the bug."
msgstr ""

#. type: cindex
#: trouble.texi.orig:930
#, no-wrap
msgid "backtrace for bug reports"
msgstr ""

#. type: itemize
#: trouble.texi.orig:938
msgid ""
"For example, many people send just a backtrace, but that is not very useful "
"by itself.  A simple backtrace with arguments often conveys little about "
"what is happening inside GNU Emacs, because most of the arguments listed in "
"the backtrace are pointers to Lisp objects.  The numeric values of these "
"pointers have no significance whatever; all that matters is the contents of "
"the objects they point to (and most of the contents are themselves "
"pointers)."
msgstr ""

#. type: findex
#: trouble.texi.orig:939
#, no-wrap
msgid "debug_print"
msgstr ""

#. type: itemize
#: trouble.texi.orig:945
msgid ""
"To provide useful information, you need to show the values of Lisp objects "
"in Lisp notation.  Do this for each variable which is a Lisp object, in "
"several stack frames near the bottom of the stack.  Look at the source to "
"see which variables are Lisp objects, because the debugger thinks of them as "
"integers."
msgstr ""

#. type: itemize
#: trouble.texi.orig:952
msgid ""
"To show a variable's value in Lisp syntax, first print its value, then use "
"the user-defined GDB command @code{pr} to print the Lisp object in Lisp "
"syntax.  (If you must use another debugger, call the function "
"@code{debug_print} with the object as an argument.)  The @code{pr} command "
"is defined by the file @file{.gdbinit}, and it works only if you are "
"debugging a running process (not with a core dump)."
msgstr ""

#. type: itemize
#: trouble.texi.orig:955
msgid ""
"To make Lisp errors stop Emacs and return to GDB, put a breakpoint at "
"@code{Fsignal}."
msgstr ""

#. type: itemize
#: trouble.texi.orig:958
msgid ""
"For a short listing of Lisp functions running, type the GDB command "
"@code{xbacktrace}."
msgstr ""

#. type: itemize
#: trouble.texi.orig:965
msgid ""
"The file @file{.gdbinit} defines several other commands that are useful for "
"examining the data types and contents of Lisp objects.  Their names begin "
"with @samp{x}.  These commands work at a lower level than @code{pr}, and are "
"less convenient, but they may work even when @code{pr} does not, such as "
"when debugging a core dump or when Emacs has had a fatal signal."
msgstr ""

#. type: cindex
#: trouble.texi.orig:966
#, no-wrap
msgid "debugging Emacs, tricks and techniques"
msgstr ""

#. type: itemize
#: trouble.texi.orig:972
msgid ""
"More detailed advice and other useful techniques for debugging Emacs are "
"available in the file @file{etc/DEBUG} in the Emacs distribution.  That file "
"also includes instructions for investigating problems whereby Emacs stops "
"responding (many people assume that Emacs is ``hung'', whereas in fact it "
"might be in an infinite loop)."
msgstr ""

#. type: itemize
#: trouble.texi.orig:975
msgid ""
"To find the file @file{etc/DEBUG} in your Emacs installation, use the "
"directory name stored in the variable @code{data-directory}."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:978
msgid "Here are some things that are not necessary in a bug report:"
msgstr ""

#. type: itemize
#: trouble.texi.orig:983
msgid ""
"A description of the envelope of the bug---this is not necessary for a "
"reproducible bug."
msgstr ""

#. type: itemize
#: trouble.texi.orig:987
msgid ""
"Often people who encounter a bug spend a lot of time investigating which "
"changes to the input file will make the bug go away and which changes will "
"not affect it."
msgstr ""

#. type: itemize
#: trouble.texi.orig:994
msgid ""
"This is often time-consuming and not very useful, because the way we will "
"find the bug is by running a single example under the debugger with "
"breakpoints, not by pure deduction from a series of examples.  You might as "
"well save time by not searching for additional examples.  It is better to "
"send the bug report right away, go back to editing, and find another bug to "
"report."
msgstr ""

#. type: itemize
#: trouble.texi.orig:998
msgid ""
"Of course, if you can find a simpler example to report @emph{instead} of the "
"original one, that is a convenience.  Errors in the output will be easier to "
"spot, running under the debugger will take less time, etc."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1001
msgid ""
"However, simplification is not vital; if you can't do this or don't have "
"time to try, please report the bug with your original test case."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1004
msgid "A core dump file."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1010
msgid ""
"Debugging the core dump might be useful, but it can only be done on your "
"machine, with your Emacs executable.  Therefore, sending the core dump file "
"to the Emacs maintainers won't be useful.  Above all, don't include the core "
"file in an email bug report! Such a large message can be extremely "
"inconvenient."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1013
msgid "A system-call trace of Emacs execution."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1020
msgid ""
"System-call traces are very useful for certain special kinds of debugging, "
"but in most cases they give little useful information.  It is therefore "
"strange that many people seem to think that @emph{the} way to report "
"information about a crash is to send a system-call trace.  Perhaps this is a "
"habit formed from experience debugging programs that don't have source code "
"or debugging symbols."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1026
msgid ""
"In most programs, a backtrace is normally far, far more informative than a "
"system-call trace.  Even in Emacs, a simple backtrace is generally more "
"informative, though to give full information you should supplement the "
"backtrace by displaying variable values and printing them as Lisp objects "
"with @code{pr} (see above)."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1029
msgid "A patch for the bug."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1037
msgid ""
"A patch for the bug is useful if it is a good one.  But don't omit the other "
"information that a bug report needs, such as the test case, on the "
"assumption that a patch is sufficient.  We might see problems with your "
"patch and decide to fix the problem another way, or we might not understand "
"it at all.  And if we can't understand what bug you are trying to fix, or "
"why your patch should be an improvement, we mustn't install it."
msgstr ""

#. type: ifnottex
#: trouble.texi.orig:1041
msgid ""
"@xref{Sending Patches}, for guidelines on how to make it easy for us to "
"understand and install your patches."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1045
msgid "A guess about what the bug is or what it depends on."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1048
msgid ""
"Such guesses are usually wrong.  Even experts can't guess right about such "
"things without first using the debugger to find the facts."
msgstr ""

#. type: subsection
#: trouble.texi.orig:1051
#, no-wrap
msgid "Sending Patches for GNU Emacs"
msgstr ""

#. type: cindex
#: trouble.texi.orig:1053
#, no-wrap
msgid "sending patches for GNU Emacs"
msgstr ""

#. type: cindex
#: trouble.texi.orig:1054
#, no-wrap
msgid "patches, sending"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:1062
msgid ""
"If you would like to write bug fixes or improvements for GNU Emacs, that is "
"very helpful.  When you send your changes, please follow these guidelines to "
"make it easy for the maintainers to use them.  If you don't follow these "
"guidelines, your information might still be useful, but using it will take "
"extra work.  Maintaining GNU Emacs is a lot of work in the best of "
"circumstances, and we can't keep up unless you do your best to help."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1070
msgid ""
"Send an explanation with your changes of what problem they fix or what "
"improvement they bring about.  For a fix for an existing bug, it is best to "
"reply to the relevant discussion on the @samp{bug-gnu-emacs} list, or the "
"bug entry in the GNU Bug Tracker at @url{http://debbugs.gnu.org}.  Explain "
"why your change fixes the bug."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1076
msgid ""
"Always include a proper bug report for the problem you think you have "
"fixed.  We need to convince ourselves that the change is right before "
"installing it.  Even if it is correct, we might have trouble understanding "
"it if we don't have a way to reproduce the problem."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1080
msgid ""
"Include all the comments that are appropriate to help people reading the "
"source in the future understand why this change was needed."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1084
msgid ""
"Don't mix together changes made for different reasons.  Send them "
"@emph{individually}."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1091
msgid ""
"If you make two changes for separate reasons, then we might not want to "
"install them both.  We might want to install just one.  If you send them all "
"jumbled together in a single set of diffs, we have to do extra work to "
"disentangle them---to figure out which parts of the change serve which "
"purpose.  If we don't have time for this, we might have to ignore your "
"changes entirely."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1095
msgid ""
"If you send each change as soon as you have written it, with its own "
"explanation, then two changes never get tangled up, and we can consider each "
"one properly without any extra work to disentangle them."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1101
msgid ""
"Send each change as soon as that change is finished.  Sometimes people think "
"they are helping us by accumulating many changes to send them all together.  "
"As explained above, this is absolutely the worst thing you could do."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1105
msgid ""
"Since you should send each change separately, you might as well send it "
"right away.  That gives us the option of installing it immediately if it is "
"important."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1112
msgid ""
"Use @samp{diff -c} to make your diffs.  Diffs without context are hard to "
"install reliably.  More than that, they are hard to study; we must always "
"study a patch to decide whether we want to install it.  Unidiff format is "
"better than contextless diffs, but not as easy to read as @samp{-c} format."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1116
msgid ""
"If you have GNU diff, use @samp{diff -c -F'^[_a-zA-Z0-9$]+ *('} when making "
"diffs of C code.  This shows the name of the function that each change "
"occurs in."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1123
msgid ""
"Avoid any ambiguity as to which is the old version and which is the new.  "
"Please make the old version the first argument to diff, and the new version "
"the second argument.  And please give one version or the other a name that "
"indicates whether it is the old version or your new changed one."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1128
msgid ""
"Write the change log entries for your changes.  This is both to save us the "
"extra work of writing them, and to help explain your changes so we can "
"understand them."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1133
msgid ""
"The purpose of the change log is to show people where to find what was "
"changed.  So you need to be specific about what functions you changed; in "
"large functions, it's often helpful to indicate where within the function "
"the change was."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1139
msgid ""
"On the other hand, once you have shown people where to find the change, you "
"need not explain its purpose in the change log.  Thus, if you add a new "
"function, all you need to say about it is that it is new.  If you feel that "
"the purpose needs explaining, it probably does---but put the explanation in "
"comments in the code.  It will be more useful there."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1143
msgid ""
"Please look at the change log entries of recent commits to see what sorts of "
"information to put in, and to learn the style that we use.  @xref{Change "
"Log}."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1148
msgid ""
"When you write the fix, keep in mind that we can't install a change that "
"would break other systems.  Please think about what effect your change will "
"have if compiled on another type of system."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1154
msgid ""
"Sometimes people send fixes that @emph{might} be an improvement in "
"general---but it is hard to be sure of this.  It's hard to install such "
"changes because we have to study them very carefully.  Of course, a good "
"explanation of the reasoning by which you concluded the change was correct "
"can help convince us."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1158
msgid ""
"The safest changes are changes to the configuration files for a particular "
"machine.  These are safe because they can't create new bugs on other "
"machines."
msgstr ""

#. type: itemize
#: trouble.texi.orig:1161
msgid ""
"Please help us keep up with the workload by designing the patch in a form "
"that is clearly safe to install."
msgstr ""

#. type: node
#: trouble.texi.orig:1164
#, no-wrap
msgid "Contributing"
msgstr ""

#. type: section
#: trouble.texi.orig:1165
#, no-wrap
msgid "Contributing to Emacs Development"
msgstr ""

#. type: cindex
#: trouble.texi.orig:1166
#, no-wrap
msgid "contributing to Emacs"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:1169
msgid ""
"If you would like to work on improving Emacs, please contact the maintainers "
"at"
msgstr ""

#. type: ifnothtml
#: trouble.texi.orig:1171
msgid "@email{emacs-devel@@gnu.org}."
msgstr ""

#. type: ifhtml
#: trouble.texi.orig:1175
msgid ""
"@url{http://lists.gnu.org/mailman/listinfo/emacs-devel, the emacs-devel "
"mailing list}."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:1177
msgid "You can ask for suggested projects or suggest your own ideas."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:1180
msgid ""
"If you have already written an improvement, please tell us about it.  If you "
"have not yet started work, it is useful to contact"
msgstr ""

#. type: email{#1}
#: trouble.texi.orig:1182
msgid "emacs-devel@@gnu.org"
msgstr ""

#. type: ifhtml
#: trouble.texi.orig:1185
msgid "@url{http://lists.gnu.org/mailman/listinfo/emacs-devel, emacs-devel}"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:1188
msgid ""
"before you start; it might be possible to suggest ways to make your "
"extension fit in better with the rest of Emacs."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:1193
msgid ""
"The development version of Emacs can be downloaded from the repository where "
"it is actively maintained by a group of developers.  See the Emacs project "
"page @url{http://savannah.gnu.org/projects/emacs/} for details."
msgstr ""

#. type: Plain text
#: trouble.texi.orig:1195
msgid "For more information on how to contribute, see the"
msgstr ""

#. type: ifhtml
#: trouble.texi.orig:1198
msgid "@url{http://gnu.org/software/emacs/CONTRIBUTE, etc/CONTRIBUTE}"
msgstr ""

#. type: file{#1}
#: trouble.texi.orig:1201 trouble.texi.orig:1205
msgid "etc/CONTRIBUTE"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:1207
msgid "file in the Emacs distribution."
msgstr ""

#. type: node
#: trouble.texi.orig:1208
#, no-wrap
msgid "Service"
msgstr ""

#. type: section
#: trouble.texi.orig:1209
#, no-wrap
msgid "How To Get Help with GNU Emacs"
msgstr ""

#. type: cindex
#: trouble.texi.orig:1210
#, no-wrap
msgid "help in using Emacs"
msgstr ""

#. type: cindex
#: trouble.texi.orig:1211
#, no-wrap
msgid "help-gnu-emacs mailing list"
msgstr ""

#. type: cindex
#: trouble.texi.orig:1212
#, no-wrap
msgid "gnu.emacs.help newsgroup"
msgstr ""

#. type: Plain text
#: trouble.texi.orig:1216
msgid ""
"If you need help installing, using or changing GNU Emacs, there are two ways "
"to find it:"
msgstr ""

#. type: itemize
#: trouble.texi.orig:1220
msgid "Send a message to"
msgstr ""

#. type: ifnothtml
#: trouble.texi.orig:1222
msgid "the mailing list @email{help-gnu-emacs@@gnu.org},"
msgstr ""

#. type: ifhtml
#: trouble.texi.orig:1226
msgid ""
"@url{http://lists.gnu.org/mailman/listinfo/help-gnu-emacs, the "
"help-gnu-emacs mailing list},"
msgstr ""

#. type: itemize
#: trouble.texi.orig:1230
msgid ""
"or post your request on newsgroup @code{gnu.emacs.help}.  (This mailing list "
"and newsgroup interconnect, so it does not matter which one you use.)"
msgstr ""

#. type: itemize
#: trouble.texi.orig:1234
msgid ""
"Look in the @uref{http://www.fsf.org/resources/service/, service directory} "
"for someone who might help you for a fee."
msgstr ""

#. type: ifnottex
#: trouble.texi.orig:1238
msgid "@lowersections"
msgstr ""
