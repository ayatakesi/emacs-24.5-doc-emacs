# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-06-25 01:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: package.texi.orig:5
#, no-wrap
msgid "Packages"
msgstr ""

#. type: chapter
#: package.texi.orig:6
#, no-wrap
msgid "Emacs Lisp Packages"
msgstr ""

#. type: cindex
#: package.texi.orig:7
#, no-wrap
msgid "Package"
msgstr ""

#. type: cindex
#: package.texi.orig:8
#, no-wrap
msgid "Emacs Lisp package archive"
msgstr ""

#. type: cindex
#: package.texi.orig:9
#, no-wrap
msgid "Package archive"
msgstr ""

#. type: cindex
#: package.texi.orig:10
#, no-wrap
msgid "Emacs Lisp package"
msgstr ""

#. type: Plain text
#: package.texi.orig:16
msgid ""
"Emacs includes a facility that lets you easily download and install "
"@dfn{packages} that implement additional features.  Each package is a "
"separate Emacs Lisp program, sometimes including other components such as an "
"Info manual."
msgstr ""

#. type: Plain text
#: package.texi.orig:20
msgid ""
"@kbd{M-x list-packages} brings up a buffer named @file{*Packages*} with a "
"list of all packages.  You can install or uninstall packages via this "
"buffer.  @xref{Package Menu}."
msgstr ""

#. type: findex
#: package.texi.orig:21
#, no-wrap
msgid "describe-package"
msgstr ""

#. type: Plain text
#: package.texi.orig:25
msgid ""
"The command @kbd{C-h P} (@code{describe-package}) prompts for the name of a "
"package, and displays a help buffer describing the attributes of the package "
"and the features that it implements."
msgstr ""

#. type: Plain text
#: package.texi.orig:30
msgid ""
"By default, Emacs downloads packages from a @dfn{package archive} maintained "
"by the Emacs developers and hosted by the GNU project.  Optionally, you can "
"also download packages from archives maintained by third parties.  "
"@xref{Package Installation}."
msgstr ""

#. type: Plain text
#: package.texi.orig:36
msgid ""
"For information about turning an Emacs Lisp program into an installable "
"package, @xref{Packaging,,,elisp, The Emacs Lisp Reference Manual}.  For "
"information about finding third-party packages and other Emacs Lisp "
"extensions, @xref{Packages that do not come with Emacs,,,efaq, GNU Emacs "
"FAQ}."
msgstr ""

#. type: node
#: package.texi.orig:41 package.texi.orig:43
#, no-wrap
msgid "Package Menu"
msgstr ""

#. type: menuentry
#: package.texi.orig:41
msgid "Buffer for viewing and managing packages."
msgstr ""

#. type: section
#: package.texi.orig:41 package.texi.orig:142 package.texi.orig:143
#, no-wrap
msgid "Package Installation"
msgstr ""

#. type: menuentry
#: package.texi.orig:41
msgid "Options for package installation."
msgstr ""

#. type: node
#: package.texi.orig:41 package.texi.orig:263
#, no-wrap
msgid "Package Files"
msgstr ""

#. type: menuentry
#: package.texi.orig:41
msgid "Where packages are installed."
msgstr ""

#. type: section
#: package.texi.orig:44
#, no-wrap
msgid "The Package Menu Buffer"
msgstr ""

#. type: cindex
#: package.texi.orig:45
#, no-wrap
msgid "package menu"
msgstr ""

#. type: cindex
#: package.texi.orig:46
#, no-wrap
msgid "built-in package"
msgstr ""

#. type: findex
#: package.texi.orig:47
#, no-wrap
msgid "list-packages"
msgstr ""

#. type: Plain text
#: package.texi.orig:52
msgid ""
"The command @kbd{M-x list-packages} brings up the @dfn{package menu}.  This "
"is a buffer listing all the packages that Emacs knows about, one on each "
"line, with the following information:"
msgstr ""

#. type: itemize
#: package.texi.orig:56
msgid "The package name (e.g., @samp{auctex})."
msgstr ""

#. type: itemize
#: package.texi.orig:59
msgid "The package's version number (e.g., @samp{11.86})."
msgstr ""

#. type: itemize
#: package.texi.orig:65
msgid ""
"The package's status---normally one of @samp{available} (can be downloaded "
"from the package archive), @samp{installed}, or @samp{built-in} (included in "
"Emacs by default)."
msgstr ""

#. type: itemize
#: package.texi.orig:72
msgid ""
"The status can also be @samp{new}.  This is equivalent to @samp{available}, "
"except that it means the package became newly available on the package "
"archive after your last invocation of @kbd{M-x list-packages}.  In other "
"instances, a package may have the status @samp{held}, @samp{disabled}, or "
"@samp{obsolete}.  @xref{Package Installation}."
msgstr ""

#. type: itemize
#: package.texi.orig:75
msgid "A short description of the package."
msgstr ""

#. type: Plain text
#: package.texi.orig:82
msgid ""
"The @code{list-packages} command accesses the network, to retrieve the list "
"of available packages from the package archive server.  If the network is "
"unavailable, it falls back on the most recently retrieved list."
msgstr ""

#. type: Plain text
#: package.texi.orig:84
msgid "The following commands are available in the package menu:"
msgstr ""

#. type: item
#: package.texi.orig:86
#, no-wrap
msgid "h"
msgstr ""

#. type: table
#: package.texi.orig:89
msgid ""
"Print a short message summarizing how to use the package menu "
"(@code{package-menu-quick-help})."
msgstr ""

#. type: item
#: package.texi.orig:90
#, no-wrap
msgid "?"
msgstr ""

#. type: key{#1}
#: package.texi.orig:91
#, no-wrap
msgid "RET"
msgstr ""

#. type: table
#: package.texi.orig:95
msgid ""
"Display a help buffer for the package on the current line "
"(@code{package-menu-describe-package}), similar to the help window displayed "
"by the @kbd{C-h P} command (@pxref{Packages})."
msgstr ""

#. type: item
#: package.texi.orig:96
#, no-wrap
msgid "i"
msgstr ""

#. type: table
#: package.texi.orig:102
msgid ""
"Mark the package on the current line for installation "
"(@code{package-menu-mark-install}).  If the package status is "
"@samp{available}, this adds an @samp{I} character to the start of the line; "
"typing @kbd{x} (see below) will download and install the package."
msgstr ""

#. type: item
#: package.texi.orig:103
#, no-wrap
msgid "d"
msgstr ""

#. type: table
#: package.texi.orig:110
msgid ""
"Mark the package on the current line for deletion "
"(@code{package-menu-mark-delete}).  If the package status is "
"@samp{installed}, this adds a @samp{D} character to the start of the line; "
"typing @kbd{x} (see below) will delete the package.  @xref{Package Files}, "
"for information about what package deletion entails."
msgstr ""

#. type: item
#: package.texi.orig:111
#, no-wrap
msgid "u"
msgstr ""

#. type: table
#: package.texi.orig:114
msgid ""
"Remove any installation or deletion mark previously added to the current "
"line by an @kbd{i} or @kbd{d} command."
msgstr ""

#. type: item
#: package.texi.orig:115
#, no-wrap
msgid "U"
msgstr ""

#. type: table
#: package.texi.orig:120
msgid ""
"Mark all package with a newer available version for ``upgrading'' "
"(@code{package-menu-mark-upgrades}).  This places an installation mark on "
"the new available versions, and a deletion mark on the old installed "
"versions."
msgstr ""

#. type: item
#: package.texi.orig:121
#, no-wrap
msgid "x"
msgstr ""

#. type: table
#: package.texi.orig:125
msgid ""
"Download and install all packages marked with @kbd{i}, and their "
"dependencies; also, delete all packages marked with @kbd{d} "
"(@code{package-menu-execute}).  This also removes the marks."
msgstr ""

#. type: item
#: package.texi.orig:126
#, no-wrap
msgid "r"
msgstr ""

#. type: table
#: package.texi.orig:130
msgid ""
"Refresh the package list (@code{package-menu-refresh}).  This fetches the "
"list of available packages from the package archive again, and recomputes "
"the package list."
msgstr ""

#. type: item
#: package.texi.orig:131
#, no-wrap
msgid "f"
msgstr ""

#. type: table
#: package.texi.orig:136
msgid ""
"Filter the package list (@code{package-menu-filter}).  This prompts for a "
"keyword (e.g., @samp{games}), then shows only the packages that relate to "
"that keyword.  To restore the full package list, type @kbd{q}."
msgstr ""

#. type: Plain text
#: package.texi.orig:141
msgid ""
"For example, you can install a package by typing @kbd{i} on the line listing "
"that package, followed by @kbd{x}."
msgstr ""

#. type: findex
#: package.texi.orig:145
#, no-wrap
msgid "package-install"
msgstr ""

#. type: Plain text
#: package.texi.orig:150
msgid ""
"Packages are most conveniently installed using the package menu "
"(@pxref{Package Menu}), but you can also use the command @kbd{M-x "
"package-install}.  This prompts for the name of a package with the "
"@samp{available} status, then downloads and installs it."
msgstr ""

#. type: cindex
#: package.texi.orig:151
#, no-wrap
msgid "package requirements"
msgstr ""

#. type: Plain text
#: package.texi.orig:159
msgid ""
"A package may @dfn{require} certain other packages to be installed, because "
"it relies on functionality provided by them.  When Emacs installs such a "
"package, it also automatically downloads and installs any required package "
"that is not already installed.  (If a required package is somehow "
"unavailable, Emacs signals an error and stops installation.)  A package's "
"requirements list is shown in its help buffer."
msgstr ""

#. type: vindex
#: package.texi.orig:160
#, no-wrap
msgid "package-archives"
msgstr ""

#. type: Plain text
#: package.texi.orig:170
msgid ""
"By default, packages are downloaded from a single package archive maintained "
"by the Emacs developers.  This is controlled by the variable "
"@code{package-archives}, whose value is a list of package archives known to "
"Emacs.  Each list element must have the form @code{(@var{id} "
". @var{location})}, where @var{id} is the name of a package archive and "
"@var{location} is the @acronym{HTTP} address or directory name of the "
"package archive.  You can alter this list if you wish to use third party "
"package archives---but do so at your own risk, and use only third parties "
"that you think you can trust!"
msgstr ""

#. type: anchor{#1}
#: package.texi.orig:172
msgid "Package Signing"
msgstr ""

#. type: cindex
#: package.texi.orig:172
#, no-wrap
msgid "package security"
msgstr ""

#. type: cindex
#: package.texi.orig:173
#, no-wrap
msgid "package signing"
msgstr ""

#. type: Plain text
#: package.texi.orig:189
msgid ""
"The maintainers of package archives can increase the trust that you can have "
"in their packages by @dfn{signing} them.  They generate a private/public "
"pair of cryptographic keys, and use the private key to create a "
"@dfn{signature file} for each package.  With the public key, you can use the "
"signature files to verify who created the package, and that it has not been "
"modified.  A valid signature is not a cast-iron guarantee that a package is "
"not malicious, so you should still exercise caution.  Package archives "
"should provide instructions on how you can obtain their public key.  One way "
"is to download the key from a server such as @url{http://pgp.mit.edu/}.  Use "
"@kbd{M-x package-import-keyring} to import the key into Emacs.  Emacs stores "
"package keys in the @file{gnupg} subdirectory of @code{package-user-dir}.  "
"The public key for the GNU package archive is distributed with Emacs, in the "
"@file{etc/package-keyring.gpg}.  Emacs uses it automatically."
msgstr ""

#. type: vindex
#: package.texi.orig:190
#, no-wrap
msgid "package-check-signature"
msgstr ""

#. type: vindex
#: package.texi.orig:191
#, no-wrap
msgid "package-unsigned-archives"
msgstr ""

#. type: Plain text
#: package.texi.orig:197
msgid ""
"If the user option @code{package-check-signature} is non-@code{nil}, Emacs "
"attempts to verify signatures when you install packages.  If the option has "
"the value @code{allow-unsigned}, you can still install a package that is not "
"signed.  If you use some archives that do not sign their packages, you can "
"add them to the list @code{package-unsigned-archives}."
msgstr ""

#. type: Plain text
#: package.texi.orig:202
msgid ""
"For more information on cryptographic keys and signing, @pxref{Top,, Top, "
"gnupg, The GNU Privacy Guard Manual}.  Emacs comes with an interface to GNU "
"Privacy Guard, @pxref{Top,, EasyPG, epa, Emacs EasyPG Assistant Manual}."
msgstr ""

#. type: vindex
#: package.texi.orig:203
#, no-wrap
msgid "package-pinned-packages"
msgstr ""

#. type: Plain text
#: package.texi.orig:209
msgid ""
"If you have more than one package archive enabled, and some of them offer "
"different versions of the same package, you may find the option "
"@code{package-pinned-packages} useful.  You can add package/archive pairs to "
"this list, to ensure that the specified package is only ever downloaded from "
"the specified archive."
msgstr ""

#. type: Plain text
#: package.texi.orig:216
msgid ""
"Once a package is downloaded and installed, it is @dfn{loaded} into the "
"current Emacs session.  Loading a package is not quite the same as loading a "
"Lisp library (@pxref{Lisp Libraries}); its effect varies from package to "
"package.  Most packages just make some new commands available, while others "
"have more wide-ranging effects on the Emacs session.  For such information, "
"consult the package's help buffer."
msgstr ""

#. type: Plain text
#: package.texi.orig:222
msgid ""
"By default, Emacs also automatically loads all installed packages in "
"subsequent Emacs sessions.  This happens at startup, after processing the "
"init file (@pxref{Init File}).  As an exception, Emacs does not load "
"packages at startup if invoked with the @samp{-q} or @samp{--no-init-file} "
"options (@pxref{Initial Options})."
msgstr ""

#. type: vindex
#: package.texi.orig:223
#, no-wrap
msgid "package-enable-at-startup"
msgstr ""

#. type: Plain text
#: package.texi.orig:226
msgid ""
"To disable automatic package loading, change the variable "
"@code{package-enable-at-startup} to @code{nil}."
msgstr ""

#. type: findex
#: package.texi.orig:227
#, no-wrap
msgid "package-initialize"
msgstr ""

#. type: Plain text
#: package.texi.orig:242
msgid ""
"The reason automatic package loading occurs after loading the init file is "
"that user options only receive their customized values after loading the "
"init file, including user options which affect the packaging system.  In "
"some circumstances, you may want to load packages explicitly in your init "
"file (usually because some other code in your init file depends on a "
"package).  In that case, your init file should call the function "
"@code{package-initialize}.  It is up to you to ensure that relevant user "
"options, such as @code{package-load-list} (see below), are set up prior to "
"the @code{package-initialize} call.  You should also set "
"@code{package-enable-at-startup} to @code{nil}, to avoid loading the "
"packages again after processing the init file.  Alternatively, you may "
"choose to completely inhibit package loading at startup, and invoke the "
"command @kbd{M-x package-initialize} to load your packages manually."
msgstr ""

#. type: vindex
#: package.texi.orig:243
#, no-wrap
msgid "package-load-list"
msgstr ""

#. type: Plain text
#: package.texi.orig:255
msgid ""
"For finer control over package loading, you can use the variable "
"@code{package-load-list}.  Its value should be a list.  A list element of "
"the form @code{(@var{name} @var{version})} tells Emacs to load version "
"@var{version} of the package named @var{name}.  Here, @var{version} should "
"be a version string (corresponding to a specific version of the package), or "
"@code{t} (which means to load any installed version), or @code{nil} (which "
"means no version; this ``disables'' the package, preventing it from being "
"loaded).  A list element can also be the symbol @code{all}, which means to "
"load the latest installed version of any package not named by the other list "
"elements.  The default value is just @code{'(all)}."
msgstr ""

#. type: Plain text
#: package.texi.orig:262
msgid ""
"For example, if you set @code{package-load-list} to @code{'((muse \"3.20\") "
"all)}, then Emacs only loads version 3.20 of the @samp{muse} package, plus "
"any installed version of packages other than @samp{muse}.  Any other version "
"of @samp{muse} that happens to be installed will be ignored.  The "
"@samp{muse} package will be listed in the package menu with the @samp{held} "
"status."
msgstr ""

#. type: section
#: package.texi.orig:264
#, no-wrap
msgid "Package Files and Directory Layout"
msgstr ""

#. type: cindex
#: package.texi.orig:265
#, no-wrap
msgid "package directory"
msgstr ""

#. type: cindex
#: package.texi.orig:267
#, no-wrap
msgid "package file"
msgstr ""

#. type: findex
#: package.texi.orig:268
#, no-wrap
msgid "package-install-file"
msgstr ""

#. type: Plain text
#: package.texi.orig:278
msgid ""
"Each package is downloaded from the package archive in the form of a single "
"@dfn{package file}---either an Emacs Lisp source file, or a tar file "
"containing multiple Emacs Lisp source and other files.  Package files are "
"automatically retrieved, processed, and disposed of by the Emacs commands "
"that install packages.  Normally, you will not need to deal directly with "
"them, unless you are making a package (@pxref{Packaging,,,elisp, The Emacs "
"Lisp Reference Manual}).  Should you ever need to install a package directly "
"from a package file, use the command @kbd{M-x package-install-file}."
msgstr ""

#. type: vindex
#: package.texi.orig:279
#, no-wrap
msgid "package-user-dir"
msgstr ""

#. type: Plain text
#: package.texi.orig:286
msgid ""
"Once installed, the contents of a package are placed in a subdirectory of "
"@file{~/.emacs.d/elpa/} (you can change the name of that directory by "
"changing the variable @code{package-user-dir}).  The package subdirectory is "
"named @file{@var{name}-@var{version}}, where @var{name} is the package name "
"and @var{version} is its version string."
msgstr ""

#. type: cindex
#: package.texi.orig:287
#, no-wrap
msgid "system-wide packages"
msgstr ""

#. type: vindex
#: package.texi.orig:288
#, no-wrap
msgid "package-directory-list"
msgstr ""

#. type: Plain text
#: package.texi.orig:295
msgid ""
"In addition to @code{package-user-dir}, Emacs looks for installed packages "
"in the directories listed in @code{package-directory-list}.  These "
"directories are meant for system administrators to make Emacs packages "
"available system-wide; Emacs itself never installs packages there.  The "
"package subdirectories for @code{package-directory-list} are laid out in the "
"same way as in @code{package-user-dir}."
msgstr ""

#. type: Plain text
#: package.texi.orig:299
msgid ""
"Deleting a package (@pxref{Package Menu}) involves deleting the "
"corresponding package subdirectory.  This only works for packages installed "
"in @code{package-user-dir}; if told to act on a package in a system-wide "
"package directory, the deletion command signals an error."
msgstr ""
