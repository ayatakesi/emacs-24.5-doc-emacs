@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 2004-2015 Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@c
@c This file is included either in emacs-xtra.texi (when producing the
@c printed version) or in the main Emacs manual (for the on-line version).
@node Picture Mode
@section Editing Pictures
@cindex pictures
@cindex making pictures out of text characters
@findex picture-mode

  テキスト文字で作られたピクチャー(たとえばプログラムのコメントにあるような、レジスターをフィールドに分割したピクチャーなど)を編集するには、コマンド@kbd{M-x
picture-mode}を使用してPictureモードに入ります。

  Pictureモードでは、編集はテキストの@dfn{quarter-plane(1/4平面)}モデルにもとづき、テキスト文字は、右方および下方に無限に広がる領域に点在します。このモデルには、行の終端という概念は存在しません。せいぜい言えるのは、その行の空白でない最後の文字がどこにあるかぐらいです。

  もちろん、実際にはEmacsはテキストを文字シーケンスとして考え、行は終端をもちます。しかしPictureモードは、もっともよく使われるコマンドを、テキストのquarter-planeモデルをシミュレートする変種に置き換えます。これらのコマンドはスペースの挿入、またはタブをスペースに置き換えることにより、これを行ないます。

  Emacsのほとんどの基本的な編集コマンドは、本質的には同等なことをquarter-planeの方法で行なうように、Pictureモードにより再定義されます。それに加えてPictureモードは、@kbd{C-c}プレフィクスで始まる、特別なピクチャー編集コマンドを実行する、さまざまなキーを定義します。

  これらのキーのうち特に重要なのは@kbd{C-c
C-c}です。ピクチャーが、通常は他のメジャーモードで編集する、大きなファイルの一部ということもあります。Pictureモードは以前のメジャーモードを記録するので、後で@kbd{C-c
C-c} (@code{picture-mode-exit})コマンドでそのモードに戻ることができます。@kbd{C-c
C-c}は数引数を与えなければ、行末のスペースの削除も行ないます。

  Pictureモードの特別なコマンドのすべては、(@file{picture}ライブラリーがロードされていれば)他のモードでも機能しますが、Pictureモード以外ではキーにバインドされません。以下の説明では、``1列''移動...のような言い方をしますが、通常の同等なコマンドと同じように、Pictureモードのコマンドは数引数を扱うことができます。

@vindex picture-mode-hook
  Pictureモードをオンにすることにより、フック@code{picture-mode-hook}が実行されます。Pictureモードにたいする追加の拡張は、@file{artist.el}で見ることができます。

@menu
* Basic Picture::            Pictureモードの基本概念と簡単なコマンド。
* Insert in Picture::        自己挿入文字の後のカーソル移動方向の制御。
* Tabs in Picture::          タブストップとインデントにたいするさまざまな機能。
* Rectangles in Picture::    矩形領域のクリアーと重ね合わせ。
@end menu

@node Basic Picture
@subsection Basic Editing in Picture Mode

@findex picture-forward-column
@findex picture-backward-column
@findex picture-move-down
@findex picture-move-up
@cindex editing in Picture mode

  ほとんどのキーは、Pictureモードでも通常と同じことを、quarter-planeスタイルで行ないます。たとえば@kbd{C-f}は、@code{picture-forward-column}を実行するようにリバインドされます。これはポイントを1列右に移動します。必要ならスペースを挿入するので実際の行末は関係ありません。@kbd{C-b}は、@code{picture-backward-column}を実行するようにリバインドされます。必要ならタブを複数のスペースに変換して、常に1列ポイントを左に移動します。@kbd{C-n}と@kbd{C-p}は、@code{picture-move-down}と@code{picture-move-up}を実行するようにリバインドされ、どちらもポイントが同じ列に留まるように、必要に応じてスペースの挿入とタブの変換を行ないます。@kbd{C-e}は、@code{picture-end-of-line}を実行します。これは、その行の最後の非空白文字の後に移動します。@kbd{C-a}は、@code{picture-beginning-of-line}を実行します(スクリーンモデルの選択は行の開始に影響を与えません。このコマンドが行なう追加事項は、カレントピクチャー列を0に更新することです)。

@findex picture-newline
  テキストの挿入は、Overwriteモードを通じてquarter-planeモデルに適合されます
@iftex
(@ref{Minor Modes,,, emacs, the Emacs Manual}を参照してください)。
@end iftex
@ifnottex
(@ref{Minor Modes}を参照してください)。
@end ifnottex
自己挿入文字は既存のテキストを右にずらすのではなく、列ごとに既存のテキストを置き換えます。@key{RET}は@code{picture-newline}を実行し、これは単に次の行の先頭に移動するので、新しいテキストでその行を置き換えることができます。

@findex picture-backward-clear-column
@findex picture-clear-column
@findex picture-clear-line
  Pictureモードでは、通常は削除やkillを行なうコマンドは、かわりにテキストを消去(スペースで置き換え)します。@key{DEL}
(@code{picture-backward-clear-column})は、前の文字を削除するのではなく、スペースで置き換えます。これはポイントを後方に移動します。@kbd{C-d}
(@code{picture-clear-column})は、次の文字をスペースで置き換えますが、ポイントは移動しません(文字をクリアーして前方に移動したいときは@key{SPC}を使用します)。@kbd{C-k}
(@code{picture-clear-line})は、実際に行の内容をkillしますが、バッファーから改行は削除しません。

@findex picture-open-line
  実際に挿入を行なうには、特別なコマンドを使わなければなりません。@kbd{C-o}
(@code{picture-open-line})は、カレント行の後に空行を作成します。行の分割はしません。Pictureモードでも@kbd{C-M-o}
(@code{split-line})は意味があるので、変更されていません。@kbd{C-j}
(@code{picture-duplicate-line})は、カレント行の下に同じ内容の行を挿入します。

@kindex C-c C-d @r{(Picture mode)}
   Pictureモードで実際の削除を行なうには、@kbd{C-w}、@kbd{C-c
C-d}(これは他のモードでは@kbd{C-d}にバインドされている@code{delete-char}にバインドされています)、またはピクチャー矩形コマンドの1つを使用します(@ref{Rectangles
in Picture}を参照してください)。

@node Insert in Picture
@subsection Controlling Motion after Insert

@findex picture-movement-up
@findex picture-movement-down
@findex picture-movement-left
@findex picture-movement-right
@findex picture-movement-nw
@findex picture-movement-ne
@findex picture-movement-sw
@findex picture-movement-se
@kindex C-c < @r{(Picture mode)}
@kindex C-c > @r{(Picture mode)}
@kindex C-c ^ @r{(Picture mode)}
@kindex C-c . @r{(Picture mode)}
@kindex C-c ` @r{(Picture mode)}
@kindex C-c ' @r{(Picture mode)}
@kindex C-c / @r{(Picture mode)}
@kindex C-c \ @r{(Picture mode)}
  Pictureモードでは、``自己挿入''文字は上書きとポイント移動を行なうので、ポイントを移動する方法に、本質的に制限はありません。ポイントは通常右に移動しますが、``自己挿入''文字の後に移動する方向は、直行方向と対角方向の8つのうちから任意の方向を指定できます。これはバッファーに線を描くとき便利です。

@table @kbd
@item C-c <
@itemx C-c @key{LEFT}
挿入の後、左に移動します(@code{picture-movement-left})。
@item C-c >
@itemx C-c @key{RIGHT}
挿入の後、右に移動します(@code{picture-movement-right})。
@item C-c ^
@itemx C-c @key{UP}
挿入の後、上に移動します(@code{picture-movement-up})。
@item C-c .
@itemx C-c @key{DOWN}
挿入の後、下に移動します(@code{picture-movement-down})。
@item C-c `
@itemx C-c @key{Home}
挿入の後、左上(``北西'')に移動します(@code{picture-movement-nw})。
@item C-c '
@itemx C-c @key{prior}
挿入の後、右上(``北東'')に移動します(@code{picture-movement-ne})。
@item C-c /
@itemx C-c @key{End}
挿入の後、左下(``南西'')に移動します(@code{picture-movement-sw})。
@item C-c \
@itemx C-c @key{next}
挿入の後、右下(``南東'')に移動します(@code{picture-movement-se})。
@end table

@kindex C-c C-f @r{(Picture mode)}
@kindex C-c C-b @r{(Picture mode)}
@findex picture-motion
@findex picture-motion-reverse
  カレントPicture挿入方向にもとづき移動を行なうコマンドは2つです。1つはコマンド@kbd{C-c C-f}
(@code{picture-motion})で、その時点で``挿入''後に移動すると定められた方向と同じ方向に移動するのが@kbd{C-c C-f}
(@code{picture-motion})で、逆方向へは@kbd{C-c C-b}
(@code{picture-motion-reverse})です。

@node Tabs in Picture
@subsection Picture Mode Tabs

@kindex M-TAB @r{(Picture mode)}
@findex picture-tab-search
@vindex picture-tab-chars
  Pictureモードでは、タブのような動作が2つ提供されます。コンテキストベースのタブ動作には、@kbd{M-@key{TAB}}
(@code{picture-tab-search})を使用します。引数を与えないと、前の空でない行で、空白の後の次の``意味をもつ''文字の下にポイントを移動します。ここで``次''とは、``開始した位置から水平方向に大な位置''という意味です。@kbd{C-u
M-@key{TAB}}のように引数を指定した場合、このコマンドはカレント行で次の意味のある文字に移動します。@kbd{M-@key{TAB}}はテキストを変更せず、ポイントだけを移動します。``意味のある''文字は変数@code{picture-tab-chars}により定義され、これは一連の文字で定義されます。この変数の構文は正規表現での@samp{[@dots{}]}の内側で使用される構文と似ていますが、@samp{[}と@samp{]}はありません。デフォルト値は@code{"!-~"}です。

@findex picture-tab
  @key{TAB}は@code{picture-tab}を実行し、これはカレントのタブストップの設定にもとづき動作します。Pictureモードでは@code{tab-to-tab-stop}と等価です。通常はポイントを移動するだけですが、数引数を指定した場合は、移動先までのテキストをクリアーします。

@kindex C-c TAB @r{(Picture mode)}
@findex picture-set-tab-stops
  コンテキストベースとタブストップベースのタブ動作形式は、@kbd{C-c @key{TAB}}
(@code{picture-set-tab-stops})で合わせることができます。このコマンドは、カレント行にたいして、@kbd{M-@key{TAB}}が意味をもつと判断するであろう位置に、タブストップをセットします。このコマンドの使い方としては、@key{TAB}と合わせて、コンテキストベースの効果を得ることができます。しかし@kbd{M-@key{TAB}}で充分な場合は、そちらのほうが便利です。

  ピクチャー内では、実際のタブ文字を抑止するほうが便利かもしれません。たとえば、これにより@kbd{C-x
@key{TAB}}がピクチャーをめちゃくちゃにするのを防ぐことができます。変数@code{indent-tabs-mode}を@code{nil}にセットすることにより、これを行なうことができます。

@node Rectangles in Picture
@subsection Picture Mode Rectangle Commands
@cindex rectangles and Picture mode
@cindex Picture mode and rectangles

  Pictureモードは、quarter-planeモデルに適合する方法で、テキストの矩形部分に作用するコマンドを定義します。標準の矩形領域コマンドも便利でしょう
@iftex
@ref{Rectangles,,, emacs, the Emacs Manual}を参照してください。
@end iftex
@ifnottex
@ref{Rectangles}を参照してください。
@end ifnottex

@table @kbd
@item C-c C-k
矩形領域をスペースでクリアーします(@code{picture-clear-rectangle})。プレフィクス引数を指定した場合、テキストを削除します。
@item C-c C-w @var{r}
同様ですが、最初にレジスター@var{r}に矩形領域の内容を保存します(@code{picture-clear-rectangle-to-register})。
@item C-c C-y
ポイント位置を左上隅として、最後にkillされた矩形領域をバッファーに上書きコピーします。引数を指定した場合は、上書きではなく挿入します。
@item C-c C-x @var{r}
同様ですが、レジスター@var{r}の矩形領域を使用します(@code{picture-yank-rectangle-from-register})。
@end table

@kindex C-c C-k @r{(Picture mode)}
@kindex C-c C-w @r{(Picture mode)}
@findex picture-clear-rectangle
@findex picture-clear-rectangle-to-register
  ピクチャー矩形領域コマンドの@kbd{C-c C-k} (@code{picture-clear-rectangle})と@kbd{C-c C-w}
(@code{picture-clear-rectangle-to-register})が、標準の矩形領域コマンドと異なる点は、通常は矩形領域を削除するかわりにクリアーすることです。これはPictureモードで@kbd{C-d}が変更された方法と類似しています。

  しかしPictureモードで矩形領域を削除するのが便利なときもあるかもしれないので、これらのコマンドは数引数を与えたときは矩形領域を削除します。数引数の指定の有無に関わらず、@kbd{C-c
C-k}は@kbd{C-c C-y}のために矩形領域を保存します。

@kindex C-c C-y @r{(Picture mode)}
@kindex C-c C-x @r{(Picture mode)}
@findex picture-yank-rectangle
@findex picture-yank-rectangle-from-register
  矩形領域をyankするPictureモードのコマンドは、挿入ではなく上書きするという点で、標準の矩形領域コマンドと異なります。これはPictureモードでのテキストの挿入方法が他のモードと異なるのと同じです。@kbd{C-c
C-y} (@code{picture-yank-rectangle})は、一番最近killされた矩形領域を(上書きにより)挿入し、@kbd{C-c
C-x}
(@code{picture-yank-rectangle-from-register})は、指定されたレジスターの矩形領域で同様のことを行ないます。
