@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c This is part of the Emacs manual.
@c Copyright (C) 1985-1987, 1993-1995, 1997, 2000-2015 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Microsoft Windows
@appendix EmacsとMicrosoft Windows/MS-DOS
@cindex Microsoft Windows
@cindex MS-Windows, Emacs peculiarities

  このセクションでは、Microsoft
WindowsでEmacsを使用する際の特性を説明します。これらの特性の中には、Microsoft'sの古いMS-DOS``オペレーティングシステム''(``MS-DOG''としても知られる)に関連するものもあります。しかしMS-DOS@emph{だけ}に関連するEmacs機能については、別の
@iftex
マニュアル(@ref{MS-DOS,,, emacs-xtra, Specialized Emacs
Features}を参照してください)で説明します。
@end iftex
@ifnottex
セクション(@ref{MS-DOS}を参照してください)で説明します。
@end ifnottex


  MS-WindowsでのEmacsの振る舞いは、ロングファイル名のサポート、複数フレーム、スクロールバー、マウスメニュー、サブプロセスを含めて、このマニュアルの他の部分でドキュメントされているのと、だいたい同じです。しかし多くはありませんが、特別に考慮すべきこともあるので、それらについてはここで説明します。

@menu
* Windows Startup::          WindowsでEmacsを開始する方法。
* Text and Binary::          行末にCRLFを使用するテキストファイル。
* Windows Files::            Windowsのファイル名の慣習。
* ls in Lisp::               Diredにたいする@code{ls}のエミュレーション。
* Windows HOME::             開始時にEmacsが@file{.emacs}を探す場所。
* Windows Keyboard::         Windows特有のキーボード機能。
* Windows Mouse::            Windows特有のマウス機能。
* Windows Processes::        Windowsでのサブプロセスの実行。
* Windows Printing::         MS-Windowsでプリンターを指定する方法。
* Windows Fonts::            MS-Windowsでのフォントの指定。
* Windows Misc::             その他のWindowsの機能。
@ifnottex
* MS-DOS:: MS-DOSでのEmacsの使用。
@end ifnottex
@end menu

@node Windows Startup
@section MS-WindowsでEmacsを開始する方法
@cindex starting Emacs on MS-Windows

  MS-WindowsでEmacsを開始するには、いくつかの方法があります:

@enumerate
@item
@pindex runemacs.exe
@cindex desktop shortcut, MS-Windows
@cindex start directory, MS-Windows
@cindex directory where Emacs starts on MS-Windows
デスクトップのショートカットアイコンから、それを左マウスボタンでダブルクリックするか、1回クリックしてから@key{RET}を押します。デスクトップのショートカットは、ショートカットの``Target''(ショートカットの`Properties''の中にあります)に、@file{emacs.exe}ではなく、@file{runemacs.exe}の絶対ファイル名を指定する必要があります。なぜならショートカットのターゲットが@file{emacs.exe}(Windowsから見る限りこれはコンソールプログラムです)のときに作成されるコンソールウィンドウを、@file{runemacs.exe}は隠すからです。この方法を使用する場合、Emacsはショートカットで指定されたディレクトリーで開始されます。これを制御するには、ショートカットを右クリックして``Properties''を選択し、``Shortcut''タブで``Start
in''フィールドを変更します。

@item
コマンドプロンプトウィンドウから、プロンプトにたいして@kbd{emacs
@key{RET}}とタイプします。そのコマンドプロンプトウィンドウからは、Emacsを終了するまで、他のコマンドを呼び出すことはできなくなります。この場合、EmacsはWindowsシェルのカレントディレクトリーで開始されます。

@item
コマンドプロンプトウィンドウから、プロンプトにたいして@kbd{runemacs
@key{RET}}とタイプします。そのコマンドプロンプトウィンドウから、すぐに別のコマンドを呼び出すことが可能になります。この場合EmacsはWindowsシェルのカレントディレクトリーで開始されます。

@item
@cindex invoking Emacs from Windows Explorer
@pindex emacsclient.exe
@pindex emacsclientw.exe
@file{emacsclient.exe}または@file{emacsclientw.exe}を通じてEmacsを開始します。これらのコマンドは、Emacsを他のプログラムから呼び出して、他のプログラムから要求された編集ジョブのために、実行中のEmacsプロセスを再使用します。@ref{Emacs
Server}を参照してください。2つのコマンドの違いは、@file{emacsclient.exe}がコンソールプログラムなのにたいして、@file{emacsclientw.exe}はWindowsのGUIプログラムであるという点です。どちらのプログラムも、プログラムを終了して呼び出したプログラムに制御を戻す前に、Emacsが編集ジョブの終了をシグナルするまで待ちます。これらのコマンドを、それぞれどのような場合に使用するかは、編集サービスを必要とするプログラムが期待することに依存します。そのプログラム自身がコンソール(テキストモード)プログラムの場合は、@file{emacsclient.exe}を使用するべきです。そうすれば呼び出したプログラムと同じコマンドウィンドウにメッセージとプロンプトが表示されます。対照的に呼び出し側のプログラムがGUIプログラムの場合は、@file{emacsclientw.exe}を使用するほうがよいでしょう。なぜなら@file{emacsclient.exe}はGUIプログラムから呼び出された場合、コマンドウィンドウをポップアップするからです。@file{emacsclientw.exe}を使いたい状況としては、Windows
Explorerでファイルを右クリックして、ポップアップメニューで``Open
With''を選択する場合です。@command{emacsclient}を呼び出すときにEmacsが実行中でない(またはサーバーとして実行されていない)場合は、@samp{--alternate-editor=}または@samp{-a}オプションを使用します。このオプションは常にエディターを与えます。@command{emacsclient}を通じて呼び出された場合、Emacsは@command{emacsclient}を呼び出したプログラムのカレントディレクトリーで開始されます。
@end enumerate

@cindex emacsclient, on MS-Windows
MS-Windowsの制限により、Emacsは同一セッションでGUIとテキストモードのフレームをもつことはできないことに注意してください。また複数の@dfn{コマンドプロンプト}ウィンドウでテキストモードのフレームを開くこともできません。なぜならWindowsのプログラムは、それぞれ1度に1つのコンソールしかもつことができないからです。これらの理由により、@command{emacsclient}を@option{-c}オプションで呼び出したとき、Emacsサーバーがテキストモードセッションで実行されている場合、Emacsは常にそれが開始されたのと同じ@dfn{コマンドプロンプト}ウィンドウに、テキストモードのフレームを開きます。GUIフレームはサーバーがGUIセッションで実行されているときだけ作成されます。同様に、@command{emacsclient}を@option{-t}オプションで呼び出したとき、サーバーがGUIセッションで実行されている場合はGUIフレームを作成し、サーバーセッションが@dfn{コマンドプロンプト}ウィンドウのテキストモードで実行されている場合はテキストモードのフレームを作成します。@ref{emacsclient
Options}を参照してください。

@node Text and Binary
@section テキストファイルとバイナリーファイル
@cindex text and binary files on MS-DOS/MS-Windows

  GNU Emacsはテキスト行を分けるのに改行文字を使用します。これはGNU、Unixmその他のPosix準拠システムで使用されている慣習です。

@cindex end-of-line conversion on MS-DOS/MS-Windows
  対照的にMS-DOSとMS-Windowsは、テキスト行を分けるのに、通常はCR(carriage-return:
キャリッジリターン)とLF(linefeed:
ラインフィード)の、2文字からなるシーケンスを使用します(LFは改行と同じ文字です)。したがってこれらのファイルを便利に編集するために、Emacsはこれらの行末(EOL:
end-of-line)文字を変換する必要があります。そしてこれはEmacsが通常行なっていることです。Emacsはファイルを読み込むときCRLFを改行に変換して、ファイルに書き込むときは改行をCRLFに変換します。国際化文字コードの変換を処理するのと同じ仕組みが、この変換でも行なわれます(@ref{Coding
Systems}を参照してください)。

@cindex cursor location, on MS-DOS
@cindex point location, on MS-DOS
  ほとんどのファイルにおいて、この特別なフォーマット変換の重要な問題は、Emacsが報告する文字の位置(@ref{Position
Info}を参照してください)が、オペレーティングシステムが認識するファイルサイズの情報と一致しないことです。

  それに加えて、ファイル内容から行の区切りにCRLFではなく改行(LF)が使用されているとEmacsが認識した場合、Emacsはファイルの読み書きでEOL変換を行ないません。したがって特別に何かを行なわなくても、GNUおよびUnixシステムのファイルをMS-DOSで読み書きでき、編集した後でも、それらのファイルのEOLはUnixスタイルの慣習にしたがいます。

  カレントバッファーにたいして、どのEOL変換が使用されているかは、モードラインに表示されます。そのバッファーにたいしてMS-DOSのEOL変換が使用されている場合、MS-WindowsでビルドされたEmacsでは、モードラインの先頭付近の、コーディングシステムニーモニックの後ろにバックスラッシュ@samp{\}が表示されます。なんのEOL変換も処理されていない場合、そのファイルのEOLフォーマットが通常のCRLFではないことを警告するために、バックスラッシュのかわりに文字列@samp{(Unix)}が表示されます。

@cindex DOS-to-Unix conversion of files
  ファイルをvisitして、DOSスタイルとUnixスタイルのどちらを使用するか指定するには、コーディングシステムを指定します(@ref{Text
Coding}を参照してください)。たとえば@kbd{C-x @key{RET} c unix @key{RET} C-x C-f
foobar.txt}は、EOL変換をせずに、ファイル@file{foobar.txt}をvisitします。CRLFで終わる行がある場合、Emacsは行末に@samp{^M}を表示します。同様に、@kbd{C-x
@key{RET}
f}コマンドで、そのバッファーを指定したEOLフォーマットで保存するよう指示できます。たとえばバッファーをUnixのEOLフォーマットで保存するには、@kbd{C-x
@key{RET} f unix @key{RET} C-x
C-s}とタイプします。DOSのEOL変換でファイルをvisitしていて、それをUnixのEOLフォーマットで保存すると、@code{dos2unix}コマンドのように、そのファイルをUnixのEOLスタイルに変換できます。

@cindex untranslated file system
@findex add-untranslated-filesystem
  NFS、Samba、または他の類似した方法により、GNUおよびUnixシステムを使用しているコンピューターのファイルシステムにアクセスする場合、Emacsはそれらのファイルシステム上のファイル
---
たとえファイルを新たに作成する場合でも、EOL変換を行なうべきではありません。EOL変換を行なわないようにするには、関数@code{add-untranslated-filesystem}を呼び出して、それらのファイルシステムが@dfn{untranslated(変換なし)}だと指定します。この関数は、ドライブ文字とオプションでディレクトリーを含む、ファイルシステム名を引数にとります。たとえば、

@example
(add-untranslated-filesystem "Z:")
@end example

@noindent
これはZドライブが変換なしのファイルシステムであると指定し、

@example
(add-untranslated-filesystem "Z:\\foo")
@end example

@noindent
これはドライブZのディレクトリー@file{\foo}は、変換なしのファイルシステムだと指定します。

  @file{.emacs}や@file{site-start.el}の中でで@code{add-untranslated-filesystem}を使用するのが、ほとんどでしょう。@file{site-start.el}に記述しておけば、そのサイトのすべてのユーザーが恩恵にあずかることができます。

@findex remove-untranslated-filesystem
  @code{add-untranslated-filesystem}の効果を取り消すには、関数@code{remove-untranslated-filesystem}を使用します。この関数は、前に@code{add-untranslated-filesystem}で使用された文字列と同様の文字列を引数にとります。

  ファイルシステムを変換なしと指定しても、影響があるのはEOL変換だけで、文字セットの変換に影響はありません。原則的として、行末に改行を使用するUnixスタイルで、新たにファイルを作成するようEmacsに指示します。@ref{Coding
Systems}を参照してください。

@node Windows Files
@section MS-Windowsのファイル名
@cindex file names on MS-Windows

  MS-WindowsとMS-DOSでは通常、ファイル名の名前単位の区切りにバックスラッシュを使用します(他のシステムではスラッシュを使用します)。MS-DOSおよびMS-WindowsのEmacsは、スラッシュとバックスラッシュのどちらも使用でき、ファイル名に含まれるドライブ文字も識別できます。

@cindex file-name completion, on MS-Windows
  MS-DOSおよびMS-Windowsでは、ファイル名は大文字小文字を区別せず、Emacsもデフォルトではファイル名の補完で大文字小文字の違いを無視します。

@vindex w32-get-true-file-attributes
  変数@code{w32-get-true-file-attributes}は、@code{file-attributes}や@code{directory-files-and-attributes}のように、より正確にプリミティブなファイル属性を判断するために、Emacsが追加のシステムコールを呼び出すべきかを制御します。これらの追加のシステムコールは、ファイルの正しい所有者、リンクカウントと、パイプのような特殊ファイルのファイルタイプを取得するのに必要となります。システムコールを使用しない場合、ファイルの所有者はカレントユーザーとなり、リンクカウントは常に1に、そして特殊ファイルは通常ファイルとなるでしょう。

  この変数の値が@code{local}(デフォルト)の場合、Emacsはローカルの固定ドライブのファイルにたいしてのみ、システムコールを呼び出します。他の非@code{nil}値は、ファイルがリムーバブルメディアやリモートボリュームにある場合も、システムコールを呼び出すことを意味し、これはDiredやその他の関連する機能の速度低下を招く恐れがあります。値@code{nil}はシステムコールを呼び出さないことを意味します。非@code{nil}値は、FAT、FAT32、exFATのようなボリュームより、ハードリンクやファイルセキュリティーをサポートするNTFSのボリュームの場合のほうが有用です。

@cindex file names, invalid characters on MS-Windows
  Unixとは異なり、MS-Windowsのファイルシステムでは、ファイル名に使用されるかもしれない複数の文字にたいして制限があります。以下の文字は使用できません:

@itemize @bullet
@item
シェルのリダイレクション文字@samp{<}、@samp{>}、@samp{|}。

@item
コロン@samp{:}(ただしドライブ文字を除く)。

@item
スラッシュ@samp{/}とバックスラッシュ@samp{\}(ただしディレクトリー区切り文字の場合を除く)。

@item
ワイルドカード文字@samp{*}と@samp{?}。

@item
コードポイントが10進の1から31の制御文字。特にファイル名の中の改行は許されていません。

@item
コードポイント0のnull文字(この制限はUnixファイルシステムにもあります)。
@end itemize

@noindent
これらに加えて、ファイル名拡張子の有無に関わらず、@file{NUL}、@file{LPT1}、@file{PRN}、@file{CON}のようなDOSの文字デバイスに名前がマッチする任意のファイルは、どのディレクトリーにあっても、文字デバイスとして解釈されます。したがってその文字デバイスを使用したいときだけ、そのようなファイル名を使用します。

@node ls in Lisp
@section MS-Windowsでの@code{ls}のエミュレーション
@cindex Dired, and MS-Windows/MS-DOS
@cindex @code{ls} emulation

  Diredは通常、Diredバッファーで表示するディレクトリーリストを生成するために、外部プログラムの@code{ls}を使用します。しかしMS-WindowsとMS-DOSには、@sc{gnu}
@code{ls}のいくつかのポートは存在するものの、システムにはそのようなプログラムがありません。したがって、そのようなシステム上のEmacsは、@file{ls-lisp.el}パッケージを使用することにより、Lispで@code{ls}を@emph{エミュレート}します。@file{ls-lisp.el}は、@code{ls}のほぼ完全なエミュレーションを提供し、エミュレーションに特化したオプションと機能もあります。
@iftex
詳細については、名前が@code{ls-lisp}で始まる変数のドキュメントを参照してください。
@end iftex
@ifnottex
それらについては、このセクションで説明します。

  @code{ls}エミュレーションは、@code{ls}スイッチの多くをサポートしますが、すべてをサポートする訳ではありません。サポートされているオプションは、@option{-A}、@option{-a}、@option{-B}、@option{-C}、@option{-c}、@option{-G}、@option{-g}、@option{-h}、@option{-i}、@option{-n}、@option{-R}、@option{-r}、@option{-S}、@option{-s}、@option{-t}、@option{-U}、@option{-u}、@option{-X}です。@option{-F}オプションは、部分的にサポートされています(ファイルをクラス化する文字を追加しますが、シンボリックリンクのフォローを抑止しません)。

@vindex ls-lisp-use-insert-directory-program
  MS-WindowsとMS-DOSでは、@file{ls-lisp.el}はEmacsが構築されるとき事前ロードされるので、それらの環境では常に@code{ls}のLispエミュレーションが使用されます。ポートされた@code{ls}がある場合、@code{ls-lisp-use-insert-directory-program}を非@code{nil}値にセットすることにより、変数@code{insert-directory-program}にセットされた名前の外部プログラムを使用するように戻すことができます。

@vindex ls-lisp-ignore-case
  デフォルトでは、@file{ls-lisp.el}はディレクトリーのリストを生成するのに、大文字小文字を区別するソート順を使用します。これは他のプラットフォームと同じような見映えにリストするためです。大文字小文字を区別せずにファイルをソートしたい場合は、変数@code{ls-lisp-ignore-case}に非@code{nil}値をセットしてください。

@vindex ls-lisp-dirs-first
  デフォルトでは、@code{ls}の動作をエミュレートするために、ファイルとサブディレクトリーは一緒にソートされます。しかしネイティブのMS-WindowsとMS-DOSのファイルマネージャーでは、ファイルの前にディレクトリーがリストされます。このように動作させたい場合は、オプション@code{ls-lisp-dirs-first}を非@code{nil}値にカスタマイズしてください。

@vindex ls-lisp-verbosity
  変数@code{ls-lisp-verbosity}は、@file{ls-lisp.el}が表示するファイル属性を制御します。値にはシンボル@code{links}、@code{uid}、@code{gid}を1つ以上含むリストを指定します。@code{links}は、そのファイルデータに関連付けられている(@dfn{links
to}とも言います)別のファイルの数を表示することを意味し、これはNTFSボリュームでのみ有用です。@code{uid}はそのファイルを所有するユーザーの、数字による識別子を表示することを意味します。@code{gid}はそのファイルの所有者のグループの、数字による識別子を表示することを意味します。デフォルト値は@code{(links
uid gid)}で、3つのすべてのオプション属性が表示されます。

@vindex ls-lisp-emulation
  変数@code{ls-lisp-emulation}は、上記で説明した3つのオプション@code{ls-lisp-ignore-case}、@code{ls-lisp-dirs-first}、@code{ls-lisp-verbosity}でデフォルトをセットすることにより、@code{ls}エミュレーションの風合いを制御します。このオプションの値には、以下のシンボルを指定できます:

@table @code
@item GNU
@itemx nil
@sc{gnu}システムをエミュレートします(デフォルト)。これは@code{ls-lisp-ignore-case}と@code{ls-lisp-dirs-first}を@code{nil}に、@code{ls-lisp-verbosity}を@code{(links
uid gid)}にセットします。
@item UNIX
Unixシステムをエミュレートします。@code{GNU}と同様ですが、@code{ls-lisp-verbosity}は@code{(links
uid)}にセットします。
@item MacOS
MacOSをエミュレートします。@code{ls-lisp-ignore-case}を@code{t}に、@code{ls-lisp-dirs-first}と@code{ls-lisp-verbosity}を@code{nil}にセットします。
@item MS-Windows
MS-Windowsをエミュレートします。@code{ls-lisp-ignore-case}と@code{ls-lisp-dirs-first}を@code{t}にセットし、@code{ls-lisp-verbosity}を、Windows
NT/2000/XP/003では@code{(links)}、Windows
9Xでは@code{nil}にセットします。これらのプラットフォームのEmacsユーザーの多くがデフォルトとして@sc{gnu}を好むため、たとえWindowsにおいても、デフォルトのエミュレーションは@code{MS-Windows}ではないことに注意してください。
@end table

@noindent
これ以外の値を@code{ls-lisp-emulation}にセットするのは、@code{GNU}をセットするのと同じです。このオプションをカスタマイズすることにより、必要に応じて3つの従属オプションを更新するために、関数@code{ls-lisp-set-options}が呼び出されます。@file{ls-lisp.el}がロードされた後(MS-WindowsとMS-DOSでは事前ロードされることに注意してください)に、customizeを使用せずにこの変数の値を変更した場合、この関数を手動で呼び出して、同じ結果を得ることができます。

@vindex ls-lisp-support-shell-wildcards
  変数@code{ls-lisp-support-shell-wildcards}は、ファイル名パターンがサポートされる方法を制御します。非@code{nil}(デフォルト)の場合、ファイル名パターンはシェルスタイルのワイルドカードとして扱われ、@code{nil}の場合はEmacsの正規表現として扱われます。

@vindex ls-lisp-format-time-list
  変数@code{ls-lisp-format-time-list}は、ファイルの日付と時刻の書式をフォーマットする方法を定義します。Emacsがカレントlocaleを判断できる場合、@emph{この変数の値は無視されます}(しかし@code{ls-lisp-use-localized-time-format}の値が非@code{nil}の場合、Emacsはカレントlocaleが利用できるときでも@code{ls-lisp-format-time-list}にしたがいます。以下を参照してください)。

@code{ls-lisp-format-time-list}の値は、2つの文字列からなるリストです。最初の文字列は、そのファイルがその年に変更されている場合に使用され、2番目の文字列はそれより古いファイルに使用されます。2つの文字列では、日時の一部を置換するために@samp{%}シーケンスを使用できます。たとえば:
@lisp
("%b %e %H:%M" "%b %e  %Y")
@end lisp

@noindent
これらの@samp{%}シーケンスにたいする文字列の置換は、カレントlocaleに依存することに注意してください。日時のフォーマットの仕様については、@ref{Time
Parsing,,, elisp, The Emacs Lisp Reference Manual}を参照してください。

@vindex ls-lisp-use-localized-time-format
  Emacsは通常、ファイルのタイムスタンプの日時フォーマットに、慣習にしたがったフォーマット、またはISOスタイルのフォーマットを使用します。しかし変数@code{ls-lisp-use-localized-time-format}の値が非@code{nil}の場合、Emacsはファイルのタイムスタンプを、@code{ls-lisp-format-time-list}の指定にしたがってフォーマットします。@code{ls-lisp-format-time-list}の@samp{%}シーケンスは、localeにしたがった月の名前と曜日名を生成し、それによりDiredの列表示がずれるかもしれません。
@end ifnottex

@node Windows HOME
@section MS-Windowsでのホームと開始ディレクトリー
@cindex HOME directory on MS-Windows

  Windowsで@code{HOME}に相当するのは、@dfn{ユーザー固有のアプリケーションデータディレクトリー}で、それの実際の位置はWindowsのバージョンに依存します。典型的な値は、Windows
2000/XP/2003では@file{C:\Documents and Settings\@var{username}\Application
Data}、Windows Vista/7/2008では@file{C:\Documents and
Settings\@var{username}\Application Data}、そしてWindows
9X/MEでは@file{C:\WINDOWS\Application
Data}か@file{C:\WINDOWS\Profiles\@var{username}\Application
Data}のいずれかです。このディレクトリーが存在しない、またはアクセスできない場合、Emacsは@code{HOME}のデフォルト値を@file{C:\}にフォールバックします。

  環境変数@env{HOME}をシステムの他のディレクトリーを指すように明示的にセットすることにより、@code{HOME}のデフォルト値をオーバーライドできます。@env{HOME}はコマンドシェルプロンプト、または@samp{My
Computer}の@samp{Properties}ダイアログからセットできます。@code{HOME}はシステムレジストリーからもセットできます。@ref{MS-Windows
Registry}を参照してください。

  古いバージョンのEmacs@footnote{古いバージョンのEmacsは、アプリケーションデータディレクトリーをチェックしません。}との互換性のため、ドライブ@file{C:}のルートディレクトリー@file{C:\}に@file{.emacs}という名前のファイルが存在する場合、そして@env{HOME}が環境とレジストリーのどちらでもセットされていない場合、Emacsは@file{C:\}をデフォルトの@code{HOME}の場所として扱い、たとえアプリケーションデータディレクトリーが存在する場合でも、そこを探しません。古い名前の@file{_emacs}(以下参照)ではなく、@file{C:\}の@file{.emacs}だけが探されることに注意してください。@file{C:\.emacs}を使用して@code{HOME}を定義する方法は、推奨されていません。

  最終的な場所がどこであれ、Emacsはその場所を指すように環境変数@env{HOME}の内部値をセットし、通常ホームディレクトリーで探したり作成するファイルとディレクトリーのために、その場所を使用します。

  Emacsがホームディレクトリーをどこだと認識しているかは、@kbd{C-x d ~/
@key{RET}}とタイプして常に確認できます。これはホームディレクトリーのファイルのリストを表示し、最初の行にホームディレクトリーの完全な名前を表示します。同様にinitファイルをvisitするには、(initファイルの名前が@file{.emacs}の場合)@kbd{C-x
C-f ~/.emacs @key{RET}}とタイプしてください。

@cindex init file @file{.emacs} on MS-Windows
  ホームディレクトリーはinitファイルが格納される場所です。@ref{Init
File}で述べられるとおり、initファイルは任意の名前をもつことができます。

@cindex @file{_emacs} init file, MS-Windows
  MS-DOSはドットで始まるファイル名を使用できず、古いWindowsシステムではそのような名前のファイルを作成するのが困難だったので、EmacsのWindowsポートは、ホームディレクトリーに@file{_emacs}が存在して、@file{.emacs}が存在しない場合、@file{_emacs}という名前ののinitファイルをサポートします。この名前は時代遅れと考えられています。

@node Windows Keyboard
@section MS-Windowsでのキーボードの使用方法
@cindex keyboard, MS-Windows

  このセクションでは、Emacsでのキーボード入力に関するWindows固有の機能について説明します。

@cindex MS-Windows keyboard shortcuts
  MS-Windowsプログラムで慣習的に使用されるキー組み合わせ(``キーボードショートカット''として知られる)の多くが、伝統的なEmacsのキーバインドと衝突します(これらEmacsのキーバインドは、Microsoftが設立される数年前には確立されていました)。衝突の例には@kbd{C-c}、@kbd{C-x}、@kbd{C-z}、@kbd{C-a}、@kbd{W-@key{SPC}}が含まれます。CUAモード(@ref{CUA
Bindings}を参照してください)を有効にすることにより、これらのいくつかの意味をMS-Windowsでの意味に近づけるよう再定義できます。

@iftex
このカテゴリーにおける追加のWindows固有の変数については、@inforef{Windows Keyboard, ,
emacs}を参照してください。
@end iftex
@ifnottex
@vindex w32-alt-is-meta
@cindex @code{Alt} key (MS-Windows)
  デフォルトでは、@key{Alt}とラベルされたキーは、@key{META}キーにマップされます。かわりに@code{Alt}修飾を生成したい場合は、変数@code{w32-alt-is-meta}に@code{nil}をセットしてください。

@findex w32-register-hot-key
@findex w32-unregister-hot-key
  MS-Windowsでは、@kbd{@key{Alt}-@key{TAB}}のような特定のキー組み合わせは、Windowsが使用するために予約済みです。これらのキー組み合わせは、Emacsがそれを取得する前に、システムにより解釈されます。関数@code{w32-register-hot-key}を使用して、Windowsに横取りされることなく、Emacsがキーシーケンスを取得できます。このキーシーケンスを@dfn{ホットキー(hot
key)}として登録して、Windowsにたいするそのキー特別な意味をオーバーライドします(MS-Windowsは、フォーカスがEmacsにあるときだけ、そのキーシーケンスがホットキーだと指示されるので、他のWindowsアプリケーションにたいして、特別なキーは通常どおりの意味をもちます)。

  @code{w32-register-hot-key}に指定する引数は、@code{define-key}で許されるベクター形式で、修飾キーあり/なしで、ただ1つのキーを指定しなければなりません。@code{w32-alt-is-meta}が@code{t}(デフォルト)の場合、メタ修飾は@key{Alt}キーと解釈され、ハイパー修飾は常にWindowsキー(通常@key{start}という文字とWindowsのロゴがラベルされています)と解釈されます。この関数がキーシーケンスの登録に成功すると、ホットキーIDを返し、そうでない場合は@code{nil}が返されます。

@kindex M-TAB@r{, (MS-Windows)}
@cindex @kbd{M-@key{TAB}} vs @kbd{@key{Alt}-@key{TAB}} (MS-Windows)
@cindex @kbd{@key{Alt}-@key{TAB}} vs @kbd{M-@key{TAB}} (MS-Windows)
  たとえば@code{(w32-register-hot-key
[M-tab])}とすると、Emacs内で普通に@kbd{M-@key{TAB}}を使用して、トップレベルにあるポイント位置の単語やシンボルを補完したり、以前にインクリメンタル検索の間に見つけた文字列にたいして、カレント検索文字列を補完することができます。

  関数@code{w32-unregister-hot-key}は、引数となるキーシーケンスにたいして、@code{w32-register-hot-key}と逆のことを行ないます。

@vindex w32-capslock-is-shiftlock
  デフォルトでは、@key{CapsLock}キー(このキーは小文字を大文字に変換します)は通常の文字キーだけに効果をもちます。しかし変数@code{w32-capslock-is-shiftlock}を非@code{nil}値にセットした場合、@key{CapsLock}は非文字キーにも同様に効果をもつようになり、その非文字キーをタイプするとき、あたかも@key{Shift}キーが押されたかのようになります。

@vindex w32-enable-caps-lock
  変数@code{w32-enable-caps-lock}に@code{nil}値をセットした場合、@key{CapsLock}キーは、ある文字にたいするシフトが押されたバージョンのキーではなく、かわりにシンボル@code{capslock}を生成します。デフォルト値は@code{t}です。

@vindex w32-enable-num-lock
@cindex keypad keys (MS-Windows)
  同様に@code{w32-enable-num-lock}が@code{nil}の場合、@key{NumLock}キーはシンボル@code{kp-numlock}を生成します。デフォルトは@code{t}で、これは@key{NumLock}に期待された動作、すなわちテンキー上のキーのもつ意味の切り替えを行ないます。
@end ifnottex

@vindex w32-apps-modifier
  変数@code{w32-apps-modifier}は、@key{Apps}キー(通常は右@key{Alt}キーと右@key{Ctrl}キーの間にあります)の効果を制御します。変数の値には、対応する修飾キーを示すシンボル@code{hyper}、@code{super}、@code{meta}、@code{alt}、@code{control}、@code{shift}のどれか1つを指定するか、@code{nil}を指定してそれをキー@code{apps}として扱います。デフォルトは@code{nil}です。

@vindex w32-lwindow-modifier
@vindex w32-rwindow-modifier
@vindex w32-scroll-lock-modifier
  変数@code{w32-lwindow-modifier}は、左Windowsキー(通常は@key{start}という文字とWindowsロゴがラベルされています)の効果を決定します。変数の値が@code{nil}(デフォルト)の場合、このキーはシンボル@code{lwindow}を生成します。これに@code{hyper}、@code{super}、@code{meta}、@code{alt}、@code{control}、@code{shift}のどれか1つを指定すると、対応する修飾キーを生成します。これに似た変数@code{w32-rwindow-modifier}は右Windowsキーの効果を制御し、@code{w32-scroll-lock-modifier}は同じことを@key{ScrLock}キーにたいして行ないます。これらの変数が@code{nil}にセットされている場合、右Windowsキーはシンボル@code{rwindow}を生成し、@key{ScrLock}はシンボル@code{scroll}を生成します。

@vindex w32-pass-alt-to-system
@cindex Windows system menu
@cindex @code{Alt} key invokes menu (Windows)
  EmacsがネイティブのWindowsアプリケーションとしてコンパイルされていると、Windowsメニューを呼び出す@key{Alt}をタップ(tapping:
覗き見)するWindows機能をオフに切り替えます。これはEmacsでは@key{Alt}として用いられるからです。Emacsを使用するとき、ユーザーが1度@key{META}キーを押して、後で気が変わることがあります。もしこのキーがWindowsメニューを立ち上げる効果をもつ場合、それに続くコマンドの意味が変更されてしまいます。多くのユーザーは、これにイライラするでしょう。

  @code{w32-pass-alt-to-system}を非@code{nil}値にセットすることにより、@key{Alt}キーの覗き見にたいするWindowsのデフォルトの処理を再び有効にできます。

@ifnottex
@vindex w32-pass-lwindow-to-system
@vindex w32-pass-rwindow-to-system
  変数@code{w32-pass-lwindow-to-system}と@code{w32-pass-rwindow-to-system}は、左Windowsキーと右Windowsキーが、Windowsに渡されるか、Emacsに渡されるかを決定します。値が@code{nil}の場合、これらのキーはEmacsに渡され、それ以外の場合はWindowsに渡されます。両方の変数のデフォルトは@code{t}です。これらのキーをWindowsに渡すことにより、たとえば@kbd{@key{Lwindow}}は@code{Start}メニューを開くなどの、通常の効果が生成されます。@footnote{現在のところEmacsでは抑止できないが、低レベルでWindowsにとらえられる、``Windows''キーと他のキーの組み合わせがいくつかあります。たとえば@kbd{@key{Lwindow}
r}は常にWindowsの@samp{Run}ダイアログをポップアップします。とはいえ変数@code{w32-phantom-key-code}をカスタマイズすることが、あるケースでは助けになるかもしれません。}

@vindex w32-recognize-altgr
@kindex AltGr @r{(MS-Windows)}
@cindex AltGr key (MS-Windows)
  変数@code{w32-recognize-altgr}は、(もしそれがキーボードにあれば)@key{AltGr}キー(またはそれと同種のキー)が右@key{Alt}と左@key{Ctrl}キーを一緒に押したときの組み合わせとするか、それともそれを@key{AltGr}キーとして認識するかを制御します。デフォルトは@code{t}で、これはそれらのキーが@code{AltGr}を生成することを意味します。これを@code{nil}にセットすることにより、@key{AltGr}キー(またはそれと同種のキー)との組み合わせは、@key{Ctrl}修飾と@key{META}修飾の組み合わせとして解釈されます。
@end ifnottex

@node Windows Mouse
@section MS-Windowsでのマウスの使用方法
@cindex mouse, and MS-Windows

  このセクションでは、マウスに関連したWindows固有の変数について説明します。

@vindex w32-mouse-button-tolerance
@cindex simulation of middle mouse button
  変数@code{w32-mouse-button-tolerance}は、2ボタンマウスで、マウス中央ボタンを模倣する際の時間間隔を、ミリ秒で指定します。左ボタンと右ボタンの両方のボタンが、この時間間隔のうちに離された場合、Emacsはそれらどちらかのボタンのダブルクリックイベントのかわりに、マウス中央ボタンのクリックイベントを生成します。

@vindex w32-pass-extra-mouse-buttons-to-system
  変数@code{w32-pass-extra-mouse-buttons-to-system}が非@code{nil}の場合、EmacsはWindowsに第4、第5マウスボタンを渡します。

@vindex w32-swap-mouse-buttons
  変数@code{w32-swap-mouse-buttons}、は3ボタンマウスが@kbd{mouse-2}イベントを生成するかを制御します。これが@code{nil}(デフォルト)の場合、中央のボタンは@kbd{mouse-2}を生成し、右ボタンは@kbd{mouse-3}を生成します。この変数が非@code{nil}の場合、これら2つのボタンの役割は逆になります。

@node Windows Processes
@section Windows 9X/MEおよびWindows NT/2000/XPでのサブプロセス
@cindex subprocesses on MS-Windows

@cindex DOS applications, running from Emacs
  WindowsのネイティブアプリケーションとしてコンパイルされたEmacsには、(DOSバージョンとは対照的に)非同期サブプロセスにたいする完全なサポートが含まれます。Windowsバージョンでは、同期および非同期サブプロセスは、Windows
9X/MEおよびWindows
NT/2000/XPで、32ビットWindowsアプリケーションを実行する限りは、うまく動作します。しかしサブプロセスでDOSアプリケーションを実行する場合は、問題に遭遇したり、そのアプリケーションを実行できないかもしれません。また、2つのサブプロセスで2つのDOSアプリケーションを実行する場合は、システムを再起動する必要があるかもしれません。

Windows9X標準のコマンドインプリターはDOSアプリケーションなので、そのようなシステムを使用する場合に、これらの問題が重要になります。しかしこれらの問題についてわたしたちができることはありません。Microsoftだけがこれをfixできるのです。

サブプロセスで1つのDOSアプリケーションを実行する場合、それが``様式に従って(well-behaved)''いる限り、そしてスクリーンへの直接アクセスや、その他の異例なことを行なわない限り、そのサブプロセスは期待されたとおりに動作すべきです。CPUモニターアプリケーションがある場合、そのDOSアプリケーションがアイドル状態でも、CPUは100%ビジーに見えるかもしれませんが、これは単にCPUモニターがプロセッサー負荷を計測する方法によるものです。

他のDOSアプリケーションを別のサブプロセスで開始する前に、DOSアプリケーションを終了しなければなりません。EmacsはDOSサブプロセスに割り込み、または終了させることができません。プログラムの終了コマンドを与えることだけが、そのようなサブプロセスを終了できる唯一の方法です。

同時に別のサブプロセスで2つのDOSアプリケーションの実行を試みた場合、それらの一方、または両方が非同期であっても、最初のサブプロセスが終了するまで、2番目に開始されたサブプロセスはサスペンドされます。

@cindex kill DOS application
もし最初のサブプロセスと対話することができ、終了を指示できたら2番目のプロセスは通常どおり実行を継続するはずです。しかし2番目のサブプロセスが同期実行されている場合、Emacsは最初のサブプロセスが終了するまでハングするでしょう。最初のプロセスがユーザーによる入力なしには終了しない場合、Windows9Xでは再起動する以外に選択肢はありません。Windows
NT/2000/XPで実行している場合、プロセスビューアーアプリケーションを使用して、適切なNTVDMのインスタンスをkillすることができます(これにより、両方のDOSサブプロセスが終了します)。

このような状況でWindows9Xを再起動する場合、@code{Start}メニューの@code{Shutdown}コマンドを使用しないでください。これは通常システムをハングさせます。かわりに@kbd{@key{Ctrl}-@key{Alt}-@key{DEL}}とタイプして@code{Shutdown}を選択します。これは処理を行なうのに数分かかるかもしれませんが、通常どおり機能します。

@vindex w32-quote-process-args
  変数@code{w32-quote-process-args}は、Emacsがプロセス引数をクォートする方法を制御します。非@code{nil}は文字@code{"}でクォートすることを意味します。変数の値が文字の場合、Emacsは任意のクォート文字をエスケープするのに、その文字を使用します。それ以外の場合、プログラムのタイプにもとづいて、適切なエスケープ文字を選択します。

@ifnottex
@findex w32-shell-execute
  関数@code{w32-shell-execute}は、特定のタイプのファイルやドキュメントにたいして、ある種の標準的なWindows操作を処理するために登録された、MS-Windowsアプリケーションを実行するカスタマイズコマンドを記述するのに有用かもしれません。この関数はWindows
APIの@code{ShellExecute}にたいするラッパーです。詳細は、MS-WindowsのAPIドキュメントを参照してください。
@end ifnottex

@node Windows Printing
@section MS-Windowsでの印刷

  Posixスタイルの@code{lpr}プログラムが利用できない場合、MS-DOSとMS-Windowsでは、@code{lpr-buffer}(@ref{Printing}を参照してください)や@code{ps-print-buffer}(@ref{PostScript}を参照してください)のような印刷コマンドは、プリンターポートの1つに出力を送ります。同じEmacs変数がすべてのシステムでの印刷を制御しますが、MS-DOSとMS-Windowsでは、それらの変数が異なるデフォルト値をもつ場合があります。

  MS
WindowsのEmacsは、(関数@code{default-printer-name}を使用して)デフォルトプリンターの自動検出を試みます。しかし、これはある稀なケースでは失敗することがあり、Emacsから別のプリンターを使用したいと思うときがあるかもしれません。このセクションの残りの部分では、Emacsに使用するプリンターを指示する方法を説明します。

@vindex printer-name@r{, (MS-DOS/MS-Windows)}
  ローカルプリンターを使用したい場合、Lisp変数@code{lpr-command}に@code{""}(これはWindowsではデフォルトです)をセットして、@code{printer-name}にプリンターポート、たとえば通常のローカルプリンターポート@code{"PRN"}、または@code{"LPT2"}、またはシリアルプリンターにたいする@code{"COM1"}などをセットします。@code{printer-name}にファイル名をセットすることもできます。この場合、``印刷''された出力は、そのファイルに追加されます。@code{printer-name}を@code{"NUL"}にセットした場合、印刷された出力は破棄されます(システムのnullデバイスに送られます)。

  @code{printer-name}にそのプリンターのUNC共有名 --- たとえば@code{"//joes_pc/hp4si"}のような ---
をセットすることにより、他のマシンで共有されているプリンターを使用することもできます(ここではスラッシュを使用するか、バックスラッシュを使用するかは問題ではありません)。共有プリンターの名前を探すには、サーバーのリストを取得するために、コマンドプロンプトでコマンド@samp{net
view}を実行して、@samp{net view
@var{server-name}}でそのサーバーで共有されているプリンター(とディレクトリー)の名前を確認します。かわりにデスクトップの@samp{Network
Neighborhood}アイコンをクリックして、ネットワークを通じてプリンターを共有しているマシンを確認することもできます。

@cindex @samp{net use}, and printing on MS-Windows
@cindex networked printers (MS-Windows)
  プリンターが@samp{net
view}で出力されない場合、または@code{printer-name}にUNC共有名をセットしても、そのプリンターからハードコピーが出力されない場合、@samp{net
use}コマンドを使用して、@code{"LPT2"}のようなローカルプリンターポートを、ネットワークプリンターに接続できます。たとえば@kbd{net
use LPT2:
\\joes_pc\hp4si}@footnote{@code{printer-name}の値は、スラッシュとバックスラッシュの両方でセットできますが、@samp{net
use}コマンドはUNC共有名がWindowsスタイルのバックスラッシュでタイプされるのを要求することに注意してください。}により、Windowsに@code{LPT2}ポートを@dfn{キャプチャー}させて、印刷物をマシン@code{joes_pc}に接続されているプリンターにリダイレクトします。このコマンド後は、@code{printer-name}に@code{"LPT2"}をセットすることにより、そのネットワークプリンターでハードコピーが印刷されます。

  あるWindowsネットワークソフトウェアーでは、@code{"LPT2"}のような特定のプリンターポートをキャプチャーして、@samp{net
use}のかわりに@w{@code{Control
Panel->Printers}}を通じてネットワークプリンターにリダイレクトするよう、Windowsに指示できます。

  @code{printer-name}にファイル名をセットする場合、絶対ファイル名を使用するのが最良です。Emacsはカレントバッファーのデフォルトディレクトリーに合わせて作業ディレクトリーを変更するので、@code{printer-name}のファイル名が相対ファイル名の場合、結果として印刷が行なわれたバッファーのディレクトリーごとに、複数のファイルができてしまいます。

  変数@code{printer-name}の値が正しいのに、印刷してもそのプリンターからハードコピーが印刷されない場合、そのプリンターがプレーンテキストの印刷をサポートしない可能性があります(安価なプリンターのいくつかでは、この機能が省略されています)。そのような場合、以下で説明するPostScriptプリントコマンドを試してみてください。

@findex print-buffer @r{(MS-DOS)}
@findex print-region @r{(MS-DOS)}
@vindex lpr-headers-switches @r{(MS-DOS)}
  コマンド@code{print-buffer}および@code{print-region}は、印刷された各ページにヘッダーを生成するために、@code{pr}プログラムを呼び出すか、@code{lpr}プログラムの特別なスイッチを使用します。通常MS-DOSとMS-Windowsにはこれらのプログラムがないので、デフォルトでは印刷ページのヘッダーの印刷リクエストは単に無視されるように、@code{lpr-headers-switches}がセットされています。したがって@code{print-buffer}と@code{print-region}は、@code{lpr-buffer}および@code{lpr-region}と同じ出力を生成します。適切な@code{pr}プログラム(たとえばGNU
Coreutilsのもの)がある場合は、@code{lpr-headers-switches}に@code{nil}をセットします。するとEmacsはページヘッダーを生成するために@code{pr}を呼び出し、その結果を@code{printer-name}で指定されたプリンターで印刷します。

@vindex print-region-function @r{(MS-DOS)}
@cindex lpr usage under MS-DOS
@vindex lpr-command @r{(MS-DOS)}
@vindex lpr-switches @r{(MS-DOS)}
  最後に、もし@code{lpr}によく似たものがある場合、変数@code{lpr-command}を@code{"lpr"}にセットします。するとEmacsは他のシステムと同じように、印刷に@code{lpr}を使用します(そのプログラムの名前が@code{lpr}でない場合は、@code{lpr-command}に適切な値をセットします)。@code{lpr-command}が@code{""}でないときに、変数@code{lpr-switches}は、その標準的な意味をもちます。変数@code{printer-name}の値が文字列のとき、Unixの場合のように、@code{lpr}の@code{-P}オプションの値としてその文字列が使用されます。

@findex ps-print-buffer @r{(MS-DOS)}
@findex ps-spool-buffer @r{(MS-DOS)}
@vindex ps-printer-name @r{(MS-DOS)}
@vindex ps-lpr-command @r{(MS-DOS)}
@vindex ps-lpr-switches @r{(MS-DOS)}
  類似の変数@code{ps-lpr-command}、@code{ps-lpr-switches}、@code{ps-printer-name}
(@ref{PostScript
Variables}を参照してください)は、PostScriptファイルがどのように印刷されるかを定義します。これらの変数は、上記で説明した非PostScript印刷にたいする変数と同じ方法で使用されます。したがって非PostScript印刷にたいして@code{printer-name}が使用される方法と同様に、@code{ps-printer-name}の値はPostScript出力が送られるデバイス(またはファイル)の名前として使用されます(2つの異なるポートに接続された2つのプリンターがあり、それらの1つだけがPostScriptプリンターの場合、2つの個別の変数セットをもつことができます)。

@cindex Ghostscript, use for PostScript printing
  変数@code{ps-lpr-command}のデフォルト値は@code{""}で、これはPostScript出力を@code{ps-printer-name}で指定されたプリンターポートに送りますが、@code{ps-lpr-command}にはPostScriptファイルを受け付けるプログラム名をセットすることもできます。したがって非PostScriptプリンターがある場合、この変数に(Ghostscriptのような)PostScriptのインタープリタープログラムをセットできます。インタープリタープログラムに渡す必要があるスイッチを指定するには、@code{ps-lpr-switches}を使用します(@code{ps-printer-name}の値が文字列の場合、@code{-P}オプションにたいする値として、スイッチのリストが追加されます。これはおそらく@code{lpr}を使用する場合だけ有用なので、インタープリターを使用するときは@code{ps-printer-name}に文字列以外の何かをセットすれば、無視させることができます)。

  たとえばシステムのデフォルトプリンターで、Ghostscriptを使用して印刷するには、以下を@file{.emacs}に記述します:

@example
(setq ps-printer-name t)
(setq ps-lpr-command "D:/gs6.01/bin/gswin32c.exe")
(setq ps-lpr-switches '("-q" "-dNOPAUSE" "-dBATCH"
                        "-sDEVICE=mswinpr2"
                        "-sPAPERSIZE=a4"))
@end example

@noindent
(Ghostscriptがディレクトリー@file{D:/gs6.01}にインストールされていると仮定します。)

@node Windows Fonts
@section MS-Windowsでのフォント指定
@cindex font specification (MS Windows)

  Emacs23からは、フォントはフォント名、サイズ、オプションのプロパティーにより指定されるようになりました。フォントを指定するフォーマットは、モダンなフリーデスクトップで使用されているfontconfigライブラリーから由来しています。

@example
  [Family[-PointSize]][:Option1=Value1[:Option2=Value2[...]]]
@end example

  後方互換のため、古いXLFDベースのフォーマットもサポートされます。

@cindex font backend selection (MS-Windows)
  Emacs23以降では、いくつかのフォントバックエンドがサポートされています。現在のところ、Windowsではバックエンドとして、@code{gdi}と@code{uniscribe}がサポートされます。@code{gdi}フォントバックエンドは、すべてのバージョンのWindowsで利用でき、Windowsでネイティブにサポートされるすべてのフォントをサポートします。@code{uniscribe}フォントバックエンドはWindows
2000以降で利用でき、TrueTypeフォントとOpenTypeフォントをサポートします。複雑なレイアウトを要求するいくつかの言語は、Uniscribeバックエンドだけが正しくサポートできる言語もあります。デフォルトでは、どちらのバックエンドもサポートされていれば有効になり、@code{gdi}より@code{uniscribe}が優先されます。これをオーバーライドして、Uniscribeが利用できる場合もGDIバックエンドを使用するには、コマンドライン引数@kbd{-xrm
Emacs.fontBackend:gdi}を指定してEmacsを呼び出すか、レジストリーのキー@samp{HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs}または@samp{HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs}のいずれかの下に、リソース@code{Emacs.fontBackend}を追加して値を@code{gdi}にセットします(@ref{Resources}を参照してください)。

@cindex font properties (MS Windows)
@noindent
以下は、MS-Windowsのすべてのフォントバックエンドにたいして一般的なオプションのプロパティーです:

@table @code

@vindex font-weight-table @r{(MS-Windows)}
@item weight
フォントのweightを指定します。特別な値@code{light}、@code{medium}、@code{demibold}、@code{bold}、@code{black}は、@code{weight=}を使わずに指定できます(例:
@kbd{Courier
New-12:bold})。それ以外の場合、weightは100から900の数字か、@code{font-weight-table}の中の名前のついたweightを指定します。指定されない場合は、regularフォントが指定されたとみなします。

@vindex font-slant-table @r{(MS-Windows)}
@item slant
フォントがitalicかどうかを指定します。特別な値@code{roman}、@code{italic}、@code{oblique}は、@code{slant=}を使わずに指定できます(例:
@kbd{Courier
New-12:italic})。それ以外の場合は、数字か、@code{font-slant-table}内のなまえつきのslantの1つを指定します。Windowsでは、150を越える任意のslantはitalicとして扱われ、150以下のものはすべてromanとして扱われます。

@item family
フォントファミリーを指定しますが、通常はフォント名の最初でファミリーを指定します。

@item pixelsize
フォントサイズをピクセルで指定します。これはファミリー名の後のポイントサイズ指定のかわりに使用することができます。

@item adstyle
そのフォントにたいする、追加のスタイル情報を指定します。MS-Windowsでは、値@code{mono}、@code{sans}、@code{serif}、@code{script}、@code{decorative}が認識されます。これはフォントファミリーが指定されていない場合のフォールバックとして、もっとも有用です。

@vindex w32-charset-info-alist
@item registry
そのフォントがカバーすることを期待される、文字セットregistryを指定します。ほとんどのTrueTypeフォントとOpenTypeフォントは、複数の国際化文字セット(national
character
sets)をカバーするUnicodeフォントですが、ここで@code{w32-charset-info-alist}から、特定の文字セットをサポートするregistry指定を使用することにより、選択されるフォントを絞り込むことができます。

@item spacing
フォントがspacingされる方法を指定します。@code{p}はプロポーショナルフォントを指定し、@code{m}および@code{c}はモノスペースフォントを指定します。

@item foundry
Windowsでは使用されませんが、情報的な目的のために、そしてこれをセットしようとするコードによる問題を防ぐため、ビットマップフォントでは@code{raster}、スケーラブルフォントでは@code{outline}、どちらともタイプが特定できなかった場合は@code{unknown}が、内部的にセットされます。
@end table

@cindex font properties (MS Windows gdi backend)
Options specific to @code{GDI} fonts:

@table @code

@cindex font scripts (MS Windows)
@cindex font Unicode subranges (MS Windows)
@item script
そのフォントがサポートすべきUnicodeの部分範囲(subrange)を指定します。

Windowsでは@code{latin}、@code{greek}、@code{coptic}、@code{cyrillic}、@code{armenian}、@code{hebrew}、@code{arabic}、@code{syriac}、@code{nko}、@code{thaana}、@code{devanagari}、@code{bengali}、@code{gurmukhi}、@code{gujarati}、@code{oriya}、@code{tamil}、@code{telugu}、@code{kannada}、@code{malayam}、@code{sinhala}、@code{thai}、@code{lao}、@code{tibetan}、@code{myanmar}、@code{georgian}、@code{hangul}、@code{ethiopic}、@code{cherokee}、@code{canadian-aboriginal}、@code{ogham}、@code{runic}、@code{khmer}、@code{mongolian}、@code{symbol}、@code{braille}、@code{han}、@code{ideographic-description}、@code{cjk-misc}、@code{kana}、@code{bopomofo}、@code{kanbun}、@code{yi}、@code{byzantine-musical-symbol}、@code{musical-symbol}、@code{mathematical}のscriptが認識されます。

@cindex font antialiasing (MS Windows)
@item antialias
アンチエイリアシング(antialiasing)の方法を指定します。値@code{none}は、アンチエイリアシングを行なわないことを意味します。@code{standard}は、標準のアンチエイリアシングを使用することを意味します。@code{subpixel}は、subpixelアンチエイリアシング(WindowsではCleartypeとして知られます)を使用することを意味します。@code{natural}は、文字間のspacing調整つきでsubpixelアンチエイリアシングを使用することを意味します。指定されない場合、そのフォントはシステムのデフォルトのアンチエイリアシングを使用します。
@end table

@node Windows Misc
@section その他のWindows固有の機能

  このセクションでは、その他のWindows固有の機能を説明します。

@vindex w32-use-visible-system-caret
@cindex screen reader software, MS-Windows
  変数@code{w32-use-visible-system-caret}は、システムカレット(system
caret)を可視にするか決定するフラグです。スクリーンリーダーソフトウェアーが使用されていないときのデフォルトは@code{nil}で、これはEmacsがポイント位置を示すために自分でカーソルを描画することを意味します。非@code{nil}値は、Emacsがシステムカレットでポイント位置を示すことを意味します。これはスクリーンリーダーソフトウェアーの使用を容易にし、そのようなソフトウェアーがEmacsの実行を検知したときのデフォルトになります。この変数が非@code{nil}の場合、カーソル表示に影響を与える他の変数は効果がなくなります。

@iftex
このカテゴリーにおけるWindows固有な追加の変数については、@inforef{Windows Misc, , emacs}を参照してください。
@end iftex

@ifnottex
@vindex w32-grab-focus-on-raise
@cindex frame focus policy, MS-Windows
  変数@code{w32-grab-focus-on-raise}が非@code{nil}値にセットされている場合、フレームがraiseされるときフォーカスを奪います。デフォルトは@code{t}で、これはWindowsのデフォルトのclick-to-focusポリシーに適合します。
@end ifnottex

@ifnottex
@include msdog-xtra.texi
@end ifnottex
